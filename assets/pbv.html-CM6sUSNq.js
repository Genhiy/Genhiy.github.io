import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a as n,d as s,b as t,e as p}from"./app-SD3SAAIy.js";const l={},u=n("h2",{id:"模版及模块设置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#模版及模块设置"},[n("span",null,"模版及模块设置")])],-1),r={href:"https://github.com/ashleve/lightning-hydra-template",target:"_blank",rel:"noopener noreferrer"},k={href:"https://zhuanlan.zhihu.com/p/353985363",target:"_blank",rel:"noopener noreferrer"},d=p(`<p>train.py main:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@hydra<span class="token punctuation">.</span>main</span><span class="token punctuation">(</span>version_base<span class="token operator">=</span><span class="token string">&quot;1.3&quot;</span><span class="token punctuation">,</span> config_path<span class="token operator">=</span><span class="token string">&quot;../configs&quot;</span><span class="token punctuation">,</span> config_name<span class="token operator">=</span><span class="token string">&quot;train.yaml&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>cfg<span class="token punctuation">:</span> DictConfig<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token comment"># apply extra utilities</span>
    <span class="token comment"># (e.g. ask for tags if none are provided in cfg, print cfg tree, etc.)</span>
    utils<span class="token punctuation">.</span>modif_config_based_on_flags<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>

    utils<span class="token punctuation">.</span>extras<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>

    <span class="token comment"># train the model</span>
    metric_dict<span class="token punctuation">,</span> _ <span class="token operator">=</span> train<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>

    <span class="token comment"># safely retrieve metric value for hydra-based hyperparameter optimization</span>
    metric_value <span class="token operator">=</span> utils<span class="token punctuation">.</span>get_metric_value<span class="token punctuation">(</span>
        metric_dict<span class="token operator">=</span>metric_dict<span class="token punctuation">,</span> metric_name<span class="token operator">=</span>cfg<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;optimized_metric&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>

    <span class="token comment"># return optimized metric</span>
    <span class="token keyword">return</span> metric_value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置debug模式" tabindex="-1"><a class="header-anchor" href="#设置debug模式"><span>设置debug模式</span></a></h3><p>utils.modif_config_based_on_flags(cfg): （pointbev/utils/launch）读取train.yaml中的flags: 「debug: false val_sparse: false」</p><p>Available flags:</p><ul><li>debug: use mini dataset and debug mode. mini数据集debug模式</li><li>val_sparse: use sparse validation mode. 稀疏验证模式</li></ul><p>这里有个问题，这个代码这里只是把cfg传入了函数，然后函数内对cfg进行了修改。</p><p>如：<code>config.train = True</code>，但并没有返回值，cfg能被正确修改吗？答：可以，如果是单一变量，则不行。例如：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> <span class="token number">2</span>
fun<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment"># 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是使用 OmegaConf，加载的配置文件字典或对象：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> omegaconf <span class="token keyword">import</span> OmegaConf

config <span class="token operator">=</span> OmegaConf<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">&quot;config.yaml&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
<span class="token comment"># {&#39;model&#39;: {&#39;name&#39;: &#39;resnet&#39;, &#39;num_layers&#39;: 18}, &#39;training&#39;: {&#39;batch_size&#39;: 64, &#39;learning_rate&#39;: 0.001}}</span>

<span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    cfg<span class="token punctuation">.</span>model<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;train&#39;</span>

fun<span class="token punctuation">(</span>config<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
<span class="token comment"># {&#39;model&#39;: {&#39;name&#39;: &#39;train&#39;, &#39;num_layers&#39;: 18}, &#39;training&#39;: {&#39;batch_size&#39;: 64, &#39;learning_rate&#39;: 0.001}}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置warning忽略" tabindex="-1"><a class="header-anchor" href="#设置warning忽略"><span>设置warning忽略</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>    <span class="token comment"># disable python warnings</span>
    <span class="token keyword">if</span> cfg<span class="token punctuation">.</span>extras<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;ignore_warnings&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&quot;Disabling python warnings! &lt;cfg.extras.ignore_warnings=True&gt;&quot;</span><span class="token punctuation">)</span>
        warnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">&quot;ignore&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在python中运行代码经常会遇到的情况是——代码可以正常运行但是会提示警告，有时特别讨厌，尤其是强迫症患者真的是很难过了。那么如何来控制警告输出呢？其实很简单，python通过调用warnings模块中定义的warn()函数来发出警告。我们可以通过警告过滤器进行控制是否发出警告消息:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> warnings
warnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">&#39;ignore&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>“error” 将匹配警告转换为异常</li><li>“ignore” 忽略匹配的警告</li><li>“always” 始终输出匹配的警告</li><li>“default” 对于同样的警告只输出第一次出现的警告</li><li>“module” 在一个模块中只输出第一次出现的警告</li><li>“once” 输出第一次出现的警告,而不考虑它们的位置</li></ul><h3 id="多进程只执行一次" tabindex="-1"><a class="header-anchor" href="#多进程只执行一次"><span>多进程只执行一次</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>    <span class="token comment"># prompt user to input tags from command line if none are provided in the config</span>
    <span class="token keyword">if</span> cfg<span class="token punctuation">.</span>extras<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;enforce_tags&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&quot;Enforcing tags! &lt;cfg.extras.enforce_tags=True&gt;&quot;</span><span class="token punctuation">)</span>
        rich_utils<span class="token punctuation">.</span>enforce_tags<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> save_to_file<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@rank_zero_only</span>
<span class="token keyword">def</span> <span class="token function">enforce_tags</span><span class="token punctuation">(</span>cfg<span class="token punctuation">:</span> DictConfig<span class="token punctuation">,</span> save_to_file<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Prompts user to input tags from command line if no tags are provided in config.&quot;&quot;&quot;</span>

    <span class="token keyword">if</span> <span class="token keyword">not</span> cfg<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;tags&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token string">&quot;id&quot;</span> <span class="token keyword">in</span> HydraConfig<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>hydra<span class="token punctuation">.</span>job<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&quot;Specify tags before launching a multirun!&quot;</span><span class="token punctuation">)</span>

        log<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">&quot;No tags provided in config. Prompting user to input tags...&quot;</span><span class="token punctuation">)</span>
        tags <span class="token operator">=</span> Prompt<span class="token punctuation">.</span>ask<span class="token punctuation">(</span><span class="token string">&quot;Enter a list of comma separated tags&quot;</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&quot;dev&quot;</span><span class="token punctuation">)</span>
        tags <span class="token operator">=</span> <span class="token punctuation">[</span>t<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> tags<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span> <span class="token keyword">if</span> t <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">]</span>

        <span class="token keyword">with</span> open_dict<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">:</span>
            cfg<span class="token punctuation">.</span>tags <span class="token operator">=</span> tags

        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Tags: </span><span class="token interpolation"><span class="token punctuation">{</span>cfg<span class="token punctuation">.</span>tags<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> save_to_file<span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>Path<span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>paths<span class="token punctuation">.</span>output_dir<span class="token punctuation">,</span> <span class="token string">&quot;tags.log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
            rich<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>tags<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@rank_zero_only: from pytorch_lightning.utilities import rank_zero_only</code> :</p><ul><li>Function that can be used as a decorator to enable a function/method being called only on global rank 0.</li><li>可用作装饰器的函数，使函数/方法只能在全局rank 0 上调用。也即用于多进程时只调用一次。</li></ul><h3 id="装饰器控制异常" tabindex="-1"><a class="header-anchor" href="#装饰器控制异常"><span>装饰器控制异常</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@utils<span class="token punctuation">.</span>task_wrapper</span>
<span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>cfg<span class="token punctuation">:</span> DictConfig<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Tuple<span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行时间：调用train的时候执行，用于控制执行任务函数时的失败行为。此包装器可用于：</p><ul><li>确保即使任务函数引发异常，日志记录器也会关闭（防止多重运行失败）</li><li>将异常保存到<code>.log</code>文件中</li><li>在 <code>logs/</code> 文件夹中使用专用文件将运行标记为失败（这样我们以后就能找到并重新运行它）</li></ul><h2 id="预处理" tabindex="-1"><a class="header-anchor" href="#预处理"><span>预处理</span></a></h2><h3 id="实例化参数类" tabindex="-1"><a class="header-anchor" href="#实例化参数类"><span>实例化参数类</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>datamodule<span class="token punctuation">:</span> LightningDataModule <span class="token operator">=</span> hydra<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>instantiate<span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>hydra.utils.instantiate：目的是实现配置文件中的类或函数的自动实例化，作用是根据提供的配置参数或其他属性来创建一个类或实例，可以将配置参数解析为实例的构造函数参数，并返回实例。比如：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> hydra<span class="token punctuation">.</span>utils <span class="token keyword">import</span> instantiate

<span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>arg1 <span class="token operator">=</span> arg1
        self<span class="token punctuation">.</span>arg2 <span class="token operator">=</span> arg2

config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;MyClass&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;arg1&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;arg2&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">}</span>
obj <span class="token operator">=</span> instantiate<span class="token punctuation">(</span>config<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在这里：</p><ul><li><code>datamodule</code>是返回的类，其为<code>&lt;pointbev.data.datamodule.nuscenes_loader.NuScenesDatamodule object at 0x7f00a18fd350&gt;</code>。</li><li><code>datamodule: LightningDataModule</code>冒号的作用是提示datamodule的类型，是为了更可读，没有运行中的意义。</li><li><code>hydra.utils.instantiate(cfg.data)</code>是将cfg.data中的参数实例化，转为<code>NuScenesDatamodule object</code>。</li></ul><p>同样的，后续有实例化model类的代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>model<span class="token punctuation">:</span> LightningModule <span class="token operator">=</span> hydra<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>instantiate<span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>model<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="准备数据集" tabindex="-1"><a class="header-anchor" href="#准备数据集"><span>准备数据集</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>    <span class="token keyword">if</span> cfg<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;train&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&quot;Starting training!&quot;</span><span class="token punctuation">)</span>
        trainer<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>model<span class="token operator">=</span>model<span class="token punctuation">,</span> datamodule<span class="token operator">=</span>datamodule<span class="token punctuation">,</span> ckpt_path<span class="token operator">=</span>cfg<span class="token punctuation">.</span>ckpt<span class="token punctuation">.</span>path<span class="token punctuation">)</span>
        <span class="token comment"># jump -&gt; /pointbev/data/datamodule/nuscenes_loader.py line 145 setup in class NuScenesDatamodule(pl.LightningDataModule)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取数据集所用的方法是继承 pl.LightningDataModule 来提供训练、校验、测试的数据：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token punctuation">,</span> random_split
<span class="token keyword">import</span> pytorch_lightning <span class="token keyword">as</span> pl


<span class="token keyword">class</span> <span class="token class-name">MyDataModule</span><span class="token punctuation">(</span>pl<span class="token punctuation">.</span>LightningDataModule<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">prepare_data</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 在该函数里一般实现数据集的下载等，只有cuda:0 会执行该函数</span>
        <span class="token comment"># download, split, etc...</span>
        <span class="token comment"># only called on 1 GPU/TPU in distributed</span>
        <span class="token keyword">pass</span>

    <span class="token keyword">def</span> <span class="token function">setup</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stage<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># make assignments here (val/train/test split)</span>
        <span class="token comment"># called on every process in DDP</span>
        <span class="token comment"># 实现数据集的定义，每张GPU都会执行该函数, stage 用于标记是用于什么阶段</span>
        <span class="token keyword">if</span> stage <span class="token operator">==</span> <span class="token string">&#39;fit&#39;</span> <span class="token keyword">or</span> stage <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>train_dataset <span class="token operator">=</span> MyDataset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_file_path<span class="token punctuation">,</span> self<span class="token punctuation">.</span>train_file_num<span class="token punctuation">,</span> transform<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>val_dataset <span class="token operator">=</span> MyDataset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>val_file_path<span class="token punctuation">,</span> self<span class="token punctuation">.</span>val_file_num<span class="token punctuation">,</span> transform<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> stage <span class="token operator">==</span> <span class="token string">&#39;test&#39;</span> <span class="token keyword">or</span> stage <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>test_dataset <span class="token operator">=</span> MyDataset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>test_file_path<span class="token punctuation">,</span> self<span class="token punctuation">.</span>test_file_num<span class="token punctuation">,</span> transform<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">train_dataloader</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> DataLoader<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>self<span class="token punctuation">.</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">val_dataloader</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> DataLoader<span class="token punctuation">(</span>self<span class="token punctuation">.</span>val_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>self<span class="token punctuation">.</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">test_dataloader</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> DataLoader<span class="token punctuation">(</span>self<span class="token punctuation">.</span>test_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38),v={href:"https://blog.csdn.net/u013250861/article/details/123591130",target:"_blank",rel:"noopener noreferrer"},m=p(`<p>一些变量记录：</p><ul><li>grid：{&#39;xbound&#39;: [-50.0, 50.0, 0.5], &#39;ybound&#39;: [-50.0, 50.0, 0.5], &#39;zbound&#39;: [-10.0, 10.0, 20.0], &#39;dbound&#39;: [4.0, 45.0, 1.0]}存储了x、y、z变量的范围及grid长度。</li></ul><h3 id="数据集情况及数据处理" tabindex="-1"><a class="header-anchor" href="#数据集情况及数据处理"><span>数据集情况及数据处理</span></a></h3><p>数据存储在<code>class TemporalNuScenesDataset(NuScenesDataset):</code>的<code>self.ixes</code>中，比如我们查看<code>self.ixes[0]</code>：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token punctuation">{</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;b5989651183643369174912bc5641d3b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;timestamp&#39;</span><span class="token punctuation">:</span> <span class="token number">1538984233547259</span><span class="token punctuation">,</span> <span class="token string">&#39;prev&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;next&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;0bb62a68055249e381b039bf54b0ccf8&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;scene_token&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;325cef682f064c55a255f2625c533b75&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;RADAR_FRONT&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;438f2c308c3a48c088b8867c5ea16578&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;RADAR_FRONT_LEFT&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1d9d5e24ff5947ad8365ed42b1ddca32&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;RADAR_FRONT_RIGHT&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;8167f5bc42f54a0dbe8de50a6fa224c5&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;RADAR_BACK_LEFT&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;384563e2f56c4220bb0d41e420c57634&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;RADAR_BACK_RIGHT&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;2183371cd78b4cfe9d49934cba271e2a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;LIDAR_TOP&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;65e07a70e6b5404a87bf34e49d4c0924&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CAM_FRONT&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;524d443c501a4f98a14508c3fb6f6de3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CAM_FRONT_RIGHT&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;d6f89460954c43d39ed7c9ac91ab03d0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CAM_BACK_RIGHT&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;b3e53998db124133bb9cd832d78d2b11&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CAM_BACK&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;fd183c135b1f41ea8eb7a3df78d0b1ff&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CAM_FRONT_LEFT&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;d6986708c5084569bf7a636968070602&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CAM_BACK_LEFT&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;4552459a83ac4259b7592c8d7c87248f&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;anns&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;204f3df0559a4f5da0f5f523f680e230&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c12f1f4ddc44407390f10b007cc24654&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中包括本帧的token（帧名）、timestamp（时间戳）、prev（前一帧）、next（后一帧）、scene_token（场景名）、data（雷达和图片数据，也是token）、anns（标注框token）。</p><h3 id="掌控学习率" tabindex="-1"><a class="header-anchor" href="#掌控学习率"><span>掌控学习率</span></a></h3>`,7),b={href:"https://zhuanlan.zhihu.com/p/93624972",target:"_blank",rel:"noopener noreferrer"},g=p(`<p>pytorch_lightning中如何设置学习率衰减？其实跟pytorch是一样的，基本上不需要修改。重写configure_optimizers()函数即可：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 设置优化器</span>
<span class="token keyword">def</span> <span class="token function">configure_optimizers</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    weight_decay <span class="token operator">=</span> <span class="token number">1e-6</span>  <span class="token comment"># l2正则化系数</span>
    <span class="token comment"># 假如有两个网络，一个encoder一个decoder</span>
    optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&#39;encoder_params&#39;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;decoder_params&#39;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>decoder<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">,</span> weight_decay<span class="token operator">=</span>weight_decay<span class="token punctuation">)</span>
    <span class="token comment"># 同样，如果只有一个网络结构，就可以更直接了</span>
    optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>my_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">,</span> weight_decay<span class="token operator">=</span>weight_decay<span class="token punctuation">)</span>
    <span class="token comment"># 我这里设置2000个epoch后学习率变为原来的0.5，之后不再改变</span>
    scheduler <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>lr_scheduler<span class="token punctuation">.</span>MultiStepLR<span class="token punctuation">(</span>optimizer<span class="token punctuation">,</span> milestones<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>
    optim_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;optimizer&#39;</span><span class="token punctuation">:</span> optimizer<span class="token punctuation">,</span> <span class="token string">&#39;lr_scheduler&#39;</span><span class="token punctuation">:</span> scheduler<span class="token punctuation">}</span>
    <span class="token keyword">return</span> optim_dict
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dataloader" tabindex="-1"><a class="header-anchor" href="#dataloader"><span>Dataloader</span></a></h3><p>基本内容：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">train_dataloader</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>
            self<span class="token punctuation">.</span>traindata<span class="token punctuation">,</span>……
        <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取后跳转：<code>on_after_batch_transfer</code>，用于重写以在批次传输到设备后对批次进行更改或应用批量增强。example：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">on_after_batch_transfer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> batch<span class="token punctuation">,</span> dataloader_idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    batch<span class="token punctuation">[</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> gpu_transforms<span class="token punctuation">(</span>batch<span class="token punctuation">[</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> batch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="前向过程" tabindex="-1"><a class="header-anchor" href="#前向过程"><span>前向过程</span></a></h2><p>首先进网络PointBeV(Network)的forward函数：（路径：pointbev/models/sampled.py）</p><ul><li>imgs：图像输入，维度为<code>1*1*6*3*224*480</code>，即<code>B*T*N*C*H*W</code>。</li><li>rots：从摄像机到自车的旋转矩阵，维度为<code>1*1*6*3*3*3</code>，即<code>B*T*N*(3*3)</code>。</li><li>trans：从摄像机到自车的平移向量，维度为<code>1*1*6*3*1</code>，即<code>B*T*N*(3*1)</code>。</li><li>intrins：从摄像机到图像的本征矩阵，维度为<code>1*1*6*3*3</code>，即<code>B*T*N*(3*3)</code>。。</li><li>bev_aug：增强矩阵，用于使 BEV 围绕自我位置移动，维度为<code>1*1*4*4</code>，即<code>B*T*(4*4)</code>。</li><li>B为batch_size，T为时间序列帧数，N为摄像头数目，一般为6。</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code> <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> imgs<span class="token punctuation">,</span> rots<span class="token punctuation">,</span> trans<span class="token punctuation">,</span> intrins<span class="token punctuation">,</span> bev_aug<span class="token punctuation">,</span> egoTin_to_seq<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">(</span>
            dict_shape<span class="token punctuation">,</span>
            dict_vox<span class="token punctuation">,</span>
            dict_img<span class="token punctuation">,</span>
            dict_mat<span class="token punctuation">,</span>
        <span class="token punctuation">)</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>_common_init_backneck_prepare_vt<span class="token punctuation">(</span>
            imgs<span class="token punctuation">,</span> rots<span class="token punctuation">,</span> trans<span class="token punctuation">,</span> intrins<span class="token punctuation">,</span> bev_aug<span class="token punctuation">,</span> egoTin_to_seq
        <span class="token punctuation">)</span>
        <span class="token comment"># dict_img: 1 6 128 28 60</span>

        sampling_imgs <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;lidar&quot;</span><span class="token punctuation">:</span> kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;lidar_img&quot;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">&quot;hdmap&quot;</span><span class="token punctuation">:</span> kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;hdmap&quot;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
        out<span class="token punctuation">,</span> masks<span class="token punctuation">,</span> tracks <span class="token operator">=</span> self<span class="token punctuation">.</span>forward_coarse_and_fine<span class="token punctuation">(</span>
            dict_img<span class="token punctuation">,</span>
            dict_mat<span class="token punctuation">,</span>
            dict_shape<span class="token punctuation">,</span>
            dict_vox<span class="token punctuation">,</span>
            sampling_imgs<span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
        <span class="token comment"># out: bining: 1 1 1 200 200  offsets: 1 1 2 200 200  centerness: 1 1 1 200 200</span>
        dict_out <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;bev&quot;</span><span class="token punctuation">:</span> out<span class="token punctuation">}</span>
        dict_out<span class="token punctuation">[</span><span class="token string">&quot;masks&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;bev&quot;</span><span class="token punctuation">:</span> masks<span class="token punctuation">}</span>
        dict_out<span class="token punctuation">[</span><span class="token string">&quot;tracks&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> tracks

        <span class="token keyword">return</span> dict_out
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="图像的特征提取" tabindex="-1"><a class="header-anchor" href="#图像的特征提取"><span>图像的特征提取</span></a></h3><p>第一个函数：<code>_common_init_backneck_prepare_vt</code>，在common文件Network(nn.Module)中，用来打包一些基础数据：</p><p>Shared among models: 模型共享：</p><ul><li>dictionary initialization, 字典初始化</li><li>forward backbone and neck, 前向backbone和neck</li><li>preparation of view transformation, 准备视图转换</li><li>extension of the input for the temporal models. 扩展时空模型的输入</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>img_feats <span class="token operator">=</span> self<span class="token punctuation">.</span>forward_backneck<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">forward_backneck</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> imgs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Backbone and Neck</span>
    btn <span class="token operator">=</span> imgs<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    imgs <span class="token operator">=</span> self<span class="token punctuation">.</span>_prepare_backneck<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span> <span class="token comment"># 就是imgs = rearrange(imgs, &quot;b t n c h w -&gt; (b t n) c h w&quot;)</span>
    imgs_feats <span class="token operator">=</span> self<span class="token punctuation">.</span>neck<span class="token punctuation">(</span>self<span class="token punctuation">.</span>backbone<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span><span class="token punctuation">)</span>
    imgs_feats <span class="token operator">=</span> self<span class="token punctuation">.</span>_arrange_backneck<span class="token punctuation">(</span>btn<span class="token punctuation">,</span> imgs_feats<span class="token punctuation">)</span> <span class="token comment"># 就是img_feats = rearrange(img_feats, &quot;(b t n) c h w -&gt; (b t) n c h w&quot;)</span>
    <span class="token keyword">return</span> imgs_feats
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ul><li><code>self.backbone</code>：EfficientNet(Backbone)；输出：<code>torch.Size([6, 56, 28, 60]);torch.Size([6, 160, 14, 30])</code></li><li><code>self.neck</code>：AGPNeck(Backbone)；输出：<code>torch.Size([6, 128, 28, 60])</code></li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>AGPNeck<span class="token punctuation">(</span>
  <span class="token punctuation">(</span>align_res_layer<span class="token punctuation">)</span><span class="token punctuation">:</span> AlignRes<span class="token punctuation">(</span>
    <span class="token punctuation">(</span>layers<span class="token punctuation">)</span><span class="token punctuation">:</span> ModuleList<span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Identity<span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Upsample<span class="token punctuation">(</span>scale_factor<span class="token operator">=</span><span class="token number">2.0</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;bilinear&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">(</span>prepare_c_layer<span class="token punctuation">)</span><span class="token punctuation">:</span> PrepareChannel<span class="token punctuation">(</span>
    <span class="token punctuation">(</span>layers<span class="token punctuation">)</span><span class="token punctuation">:</span> Sequential<span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Conv2d<span class="token punctuation">(</span><span class="token number">216</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
      <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> InstanceNorm2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> eps<span class="token operator">=</span><span class="token number">1e-05</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> affine<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> track_running_stats<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
      <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
      <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
      <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span> InstanceNorm2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> eps<span class="token operator">=</span><span class="token number">1e-05</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> affine<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> track_running_stats<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
      <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    <span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">:</span> Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>align_res_layer：将不同分辨率的图层升为相同分辨率。将之前的<code>torch.Size([6, 56, 28, 60]);torch.Size([6, 160, 14, 30])</code>第一个不变，第二个上采样两倍，转换为：<code>torch.Size([6, 56, 28, 60]);torch.Size([6, 160, 28, 60])</code></li><li>group_method（分组方法）：如何收集上采样图层。<code>group_method=lambda x: torch.cat(x, dim=1)</code>也即将x concat到一起：<code>torch.Size([6, 216, 28, 60])</code></li><li>prepare_c_layer：更改上采样图层的通道，以便与网络对齐。输出：<code>torch.Size([6, 128, 28, 60])</code></li></ul><h3 id="bevformer-camprojector" tabindex="-1"><a class="header-anchor" href="#bevformer-camprojector"><span>BEVFormer CamProjector</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dict_mat<span class="token punctuation">,</span> dict_shape<span class="token punctuation">,</span> dict_vox<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看输入的字典内容和维度：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>dict_mat<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span> <span class="token keyword">for</span> key <span class="token keyword">in</span> dict_mat<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>dict_vox<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span> <span class="token keyword">for</span> key <span class="token keyword">in</span> dict_vox<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> dict_vox<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输入：</p><ul><li>dict_mat: [&#39;rots: torch.Size([1, 6, 3, 3])&#39;, &#39;trans: torch.Size([1, 6, 3, 1])&#39;, &#39;intrins: torch.Size([1, 6, 3, 3])&#39;, &#39;bev_aug: torch.Size([1, 1, 4, 4])&#39;, &#39;egoTin_to_seq: torch.Size([1, 1, 4, 4])&#39;]</li><li>dict_vox: [&#39;vox_coords: torch.Size([1, 3, 200, 200, 8])&#39;, &#39;vox_idx: torch.Size([1, 3, 200, 200, 8])&#39;]</li></ul><h3 id="pointbev-bev特征生成" tabindex="-1"><a class="header-anchor" href="#pointbev-bev特征生成"><span>PointBev BEV特征生成</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>out<span class="token punctuation">,</span> masks<span class="token punctuation">,</span> tracks <span class="token operator">=</span> self<span class="token punctuation">.</span>forward_coarse_and_fine<span class="token punctuation">(</span>
            dict_img<span class="token punctuation">,</span> dict_mat<span class="token punctuation">,</span> dict_shape<span class="token punctuation">,</span> dict_vox<span class="token punctuation">,</span> sampling_imgs<span class="token punctuation">,</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中内容：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>dict_vox<span class="token punctuation">.</span>update<span class="token punctuation">(</span>self<span class="token punctuation">.</span>projector<span class="token punctuation">(</span>dict_mat<span class="token punctuation">,</span> dict_shape<span class="token punctuation">,</span> dict_vox<span class="token punctuation">)</span><span class="token punctuation">)</span>

bev_feats<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> vox_idx <span class="token operator">=</span> self<span class="token punctuation">.</span>view_transform<span class="token punctuation">(</span>
    img_feats<span class="token punctuation">,</span>
    dict_vox<span class="token punctuation">,</span>
<span class="token punctuation">)</span>

kwargs <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;feats&quot;</span><span class="token punctuation">:</span> bev_feats<span class="token punctuation">,</span>
    <span class="token string">&quot;indices&quot;</span><span class="token punctuation">:</span> vox_idx<span class="token punctuation">,</span>
    <span class="token string">&quot;spatial_shape&quot;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>coord_selector<span class="token punctuation">.</span>spatial_range<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;batch_size&quot;</span><span class="token punctuation">:</span> b <span class="token operator">*</span> t<span class="token punctuation">,</span>
    <span class="token string">&quot;from_dense&quot;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
bev_feats <span class="token operator">=</span> decoder<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>

bev_feats <span class="token operator">=</span> self<span class="token punctuation">.</span>forward_temporal<span class="token punctuation">(</span>bev_feats<span class="token punctuation">,</span> dict_shape<span class="token punctuation">)</span>

<span class="token comment"># Heads</span>
dict_out <span class="token operator">=</span> self<span class="token punctuation">.</span>forward_heads<span class="token punctuation">(</span>bev_feats<span class="token punctuation">,</span> dict_shape<span class="token punctuation">)</span>
mask_dict <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span> mask <span class="token keyword">for</span> k <span class="token keyword">in</span> dict_out<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token keyword">return</span> dict_out<span class="token punctuation">,</span> mask_dict<span class="token punctuation">,</span> bev_feats
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="gridsamplevt" tabindex="-1"><a class="header-anchor" href="#gridsamplevt"><span>GridSampleVT</span></a></h4><ul><li>输入： <ul><li>图像特征：torch.Size([1, 6, 128, 28, 60])</li><li>dict_vox：其中包含：dict_keys([&#39;vox_feats&#39;, &#39;vox_valid&#39;, &#39;vox_coords&#39;, &#39;voxcam_coords&#39;, &#39;vox_idx&#39;])</li></ul></li><li>输出： <ul><li>BEV特征：torch.Size([40000, 128])</li><li>mask：torch.Size([1, 1, 1, 200, 200])</li><li>vox_idx：torch.Size([40000, 3])</li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>GridSampleVT<span class="token punctuation">(</span>
  <span class="token punctuation">(</span>coordembd<span class="token punctuation">)</span><span class="token punctuation">:</span> PositionalEncodingMap<span class="token punctuation">(</span>
    <span class="token punctuation">(</span>layer<span class="token punctuation">)</span><span class="token punctuation">:</span> MLP<span class="token punctuation">(</span>
      <span class="token punctuation">(</span>act<span class="token punctuation">)</span><span class="token punctuation">:</span> GELU<span class="token punctuation">(</span>approximate<span class="token operator">=</span><span class="token string">&#39;none&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">(</span>layers<span class="token punctuation">)</span><span class="token punctuation">:</span> ModuleList<span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">48</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">(</span>compressor<span class="token punctuation">)</span><span class="token punctuation">:</span> MLP<span class="token punctuation">(</span>
    <span class="token punctuation">(</span>act<span class="token punctuation">)</span><span class="token punctuation">:</span> ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token punctuation">(</span>layers<span class="token punctuation">)</span><span class="token punctuation">:</span> ModuleList<span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Conv2d<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">3</span> x Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="decoder-sparseunet" tabindex="-1"><a class="header-anchor" href="#decoder-sparseunet"><span>Decoder：SparseUNet</span></a></h3><p>位置：<code>pointbev/models/autoencoder/sparse_resnet.py</code></p><p>输入：</p><ul><li>BEV特征：<code>torch.Size([40000, 128])</code></li><li>vox_idx：<code>torch.Size([40000, 3])</code></li></ul><p>输出：BEV特征：<code>SparseConvTensor[shape=torch.Size([40000, 128])]</code></p><h3 id="head-bevconvhead" tabindex="-1"><a class="header-anchor" href="#head-bevconvhead"><span>Head：BEVConvHead</span></a></h3><p>位置：<code>pointbev/models/heads/convn.py</code></p><p>输入：<code>SparseConvTensor[shape=torch.Size([40000, 128])]</code></p><p>输出：字典，包括：</p><ul><li><code>&#39;binimg&#39;: SparseConvTensor[shape=torch.Size([40000, 1])]</code>,</li><li><code>&#39;offsets&#39;: SparseConvTensor[shape=torch.Size([40000, 2])]</code>,</li><li><code>&#39;centerness&#39;: SparseConvTensor[shape=torch.Size([40000, 1])]}</code></li></ul><p>还有待学习，这一块还没看懂。</p><h2 id="反向传播及后处理" tabindex="-1"><a class="header-anchor" href="#反向传播及后处理"><span>反向传播及后处理</span></a></h2><h3 id="loss计算" tabindex="-1"><a class="header-anchor" href="#loss计算"><span>loss计算</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>losses<span class="token punctuation">,</span> loss <span class="token operator">=</span> self<span class="token punctuation">.</span>_common_step_losses<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> batch<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Loss Function：（多任务）</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>ModuleDict<span class="token punctuation">(</span>
  <span class="token punctuation">(</span>binimg<span class="token punctuation">)</span><span class="token punctuation">:</span> ModuleDict<span class="token punctuation">(</span>
    <span class="token punctuation">(</span>T0_P0<span class="token punctuation">)</span><span class="token punctuation">:</span> BCELoss<span class="token punctuation">(</span>
      <span class="token punctuation">(</span>loss_fn<span class="token punctuation">)</span><span class="token punctuation">:</span> BCEWithLogitsLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">(</span>centerness<span class="token punctuation">)</span><span class="token punctuation">:</span> SpatialLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">(</span>offsets<span class="token punctuation">)</span><span class="token punctuation">:</span> SpatialLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">_common_step_losses</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> preds<span class="token punctuation">,</span> batch<span class="token punctuation">)</span><span class="token punctuation">:</span>
    losses <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    total_loss <span class="token operator">=</span> <span class="token number">0.0</span>

    <span class="token keyword">def</span> <span class="token function">_update_total_loss</span><span class="token punctuation">(</span>total_loss<span class="token punctuation">,</span> loss<span class="token punctuation">,</span> name<span class="token punctuation">,</span> weighting<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">(</span>weight<span class="token punctuation">,</span> uncertainty<span class="token punctuation">)</span> <span class="token operator">=</span> weighting<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
        <span class="token keyword">return</span> total_loss <span class="token operator">+</span> loss <span class="token operator">*</span> weight <span class="token operator">+</span> uncertainty

    update_total_loss <span class="token operator">=</span> partial<span class="token punctuation">(</span>_update_total_loss<span class="token punctuation">,</span> weighting<span class="token operator">=</span>self<span class="token punctuation">.</span>weighting<span class="token punctuation">)</span>

    <span class="token comment"># Pipeline losses</span>
    keys <span class="token operator">=</span> self<span class="token punctuation">.</span>dict_losses<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>
    bev_losses <span class="token operator">=</span> self<span class="token punctuation">.</span>dict_losses<span class="token punctuation">[</span><span class="token string">&quot;bev&quot;</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token string">&quot;bev&quot;</span> <span class="token keyword">in</span> keys <span class="token keyword">else</span> <span class="token boolean">None</span>

    <span class="token comment"># Masks: 0 to remove, 1 to keep.</span>
    dict_masks <span class="token operator">=</span> self<span class="token punctuation">.</span>_get_masks<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> batch<span class="token punctuation">)</span>

    <span class="token comment"># Single element:</span>
    <span class="token comment"># -&gt; Centerness, Offsets</span>
    <span class="token keyword">for</span> l_dict<span class="token punctuation">,</span> l_pip<span class="token punctuation">,</span> l_key<span class="token punctuation">,</span> pred_key<span class="token punctuation">,</span> target_key<span class="token punctuation">,</span> l_mask<span class="token punctuation">,</span> l_bool <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>
        <span class="token punctuation">[</span>bev_losses<span class="token punctuation">,</span> bev_losses<span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&quot;bev&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bev&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&quot;centerness&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;offsets&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&quot;centerness&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;offsets&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&quot;centerness&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;offsets&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>dict_masks<span class="token punctuation">[</span><span class="token string">&quot;centerness&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dict_masks<span class="token punctuation">[</span><span class="token string">&quot;binimg&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>self<span class="token punctuation">.</span>with_centr_offs<span class="token punctuation">,</span> self<span class="token punctuation">.</span>with_centr_offs<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> l_bool<span class="token punctuation">:</span>
            <span class="token keyword">continue</span>

        l_bev_loss <span class="token operator">=</span> l_dict<span class="token punctuation">[</span>l_key<span class="token punctuation">]</span>
        l_pred <span class="token operator">=</span> preds<span class="token punctuation">[</span>l_pip<span class="token punctuation">]</span><span class="token punctuation">[</span>pred_key<span class="token punctuation">]</span>
        <span class="token comment"># ! Trace only present</span>
        l_target <span class="token operator">=</span> batch<span class="token punctuation">[</span>target_key<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

        loss <span class="token operator">=</span> l_bev_loss<span class="token punctuation">(</span>l_pred<span class="token punctuation">,</span> l_target<span class="token punctuation">,</span> l_mask<span class="token punctuation">)</span>
        name <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>l_pip<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>l_key<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
        losses<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> loss<span class="token punctuation">}</span><span class="token punctuation">)</span>
        total_loss <span class="token operator">=</span> update_total_loss<span class="token punctuation">(</span>total_loss<span class="token punctuation">,</span> loss<span class="token punctuation">,</span> name<span class="token punctuation">)</span>

    <span class="token comment"># -&gt; Dictionaries:</span>
    <span class="token comment"># Binimg, HDMap</span>
    <span class="token keyword">for</span> l_key<span class="token punctuation">,</span> pred_key<span class="token punctuation">,</span> target_key<span class="token punctuation">,</span> l_mask<span class="token punctuation">,</span> l_bool <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>
        <span class="token punctuation">[</span><span class="token string">&quot;binimg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hdmap&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&quot;binimg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hdmap&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&quot;binimg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hdmap&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>dict_masks<span class="token punctuation">[</span><span class="token string">&quot;binimg&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>self<span class="token punctuation">.</span>with_binimg<span class="token punctuation">,</span> self<span class="token punctuation">.</span>with_hdmap<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> l_bool<span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
        l_bev_losses <span class="token operator">=</span> bev_losses<span class="token punctuation">[</span>l_key<span class="token punctuation">]</span>
        l_preds <span class="token operator">=</span> preds<span class="token punctuation">[</span><span class="token string">&quot;bev&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pred_key<span class="token punctuation">]</span>
        l_targets <span class="token operator">=</span> batch<span class="token punctuation">[</span>target_key<span class="token punctuation">]</span>

        <span class="token keyword">for</span> k<span class="token punctuation">,</span> l <span class="token keyword">in</span> l_bev_losses<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            loss <span class="token operator">=</span> l<span class="token punctuation">(</span>l_preds<span class="token punctuation">,</span> l_targets<span class="token punctuation">,</span> l_mask<span class="token punctuation">)</span>
            name <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;bev/</span><span class="token interpolation"><span class="token punctuation">{</span>l_key<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>k<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
            losses<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> loss<span class="token punctuation">}</span><span class="token punctuation">)</span>
            total_loss <span class="token operator">=</span> update_total_loss<span class="token punctuation">(</span>total_loss<span class="token punctuation">,</span> loss<span class="token punctuation">,</span> name<span class="token punctuation">)</span>
    <span class="token keyword">return</span> losses<span class="token punctuation">,</span> total_loss <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>losses<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="debug" tabindex="-1"><a class="header-anchor" href="#debug"><span>debug</span></a></h2><h3 id="debug-hooks" tabindex="-1"><a class="header-anchor" href="#debug-hooks"><span>debug_hooks</span></a></h3><p>一段难懂的代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">execute_once</span><span class="token punctuation">(</span>is_hook<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>
        dict_cnt <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

        <span class="token decorator annotation punctuation">@functools<span class="token punctuation">.</span>wraps</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">nonlocal</span> dict_cnt
            <span class="token keyword">if</span> is_hook<span class="token punctuation">:</span>
                module <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
                name <span class="token operator">=</span> module<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                name <span class="token operator">=</span> f<span class="token punctuation">.</span>__qualname__
            <span class="token keyword">if</span> name <span class="token keyword">not</span> <span class="token keyword">in</span> dict_cnt<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                dict_cnt<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
                <span class="token keyword">return</span> f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>

        <span class="token keyword">return</span> wrapper
    <span class="token keyword">return</span> decorator
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一步步看：</p><ul><li>首先：<code>def execute_once(is_hook=True)</code>: 定义了一个名为 execute_once 的函数，它接受一个参数 is_hook，默认值为 True。这个参数决定了如何确定被装饰函数的唯一性。</li><li>然后<code>return decorator</code>，execute_once 函数返回 decorator 函数，这样 execute_once 本身就可以被用作一个装饰器。</li><li>内层，<code>def decorator(f)</code>: 定义了一个嵌套函数 decorator，它接受一个函数 f 作为参数，这个 f 将是被装饰的函数。</li><li><code>return wrapper</code> 返回包装函数 wrapper，这样 wrapper 就可以被用作装饰器。</li><li><code>dict_cnt = {}</code> 在 decorator 函数内部定义了一个字典 dict_cnt，用于存储已经执行过的函数名。</li><li><code>@functools.wraps(f)</code> 是一个装饰器，用于复制原函数 f 的元数据（如函数名、文档字符串等）到包装函数 wrapper 上。</li><li><code>def wrapper(*args, **kwargs)</code>: 定义了一个包装函数 wrapper，它接受任意数量的位置参数 *args 和关键字参数 **kwargs。</li><li><code>nonlocal dict_cnt</code> 声明 dict_cnt 为非局部变量，允许 wrapper 函数修改 decorator 函数作用域中的 dict_cnt 字典。</li><li><code>if name not in dict_cnt.keys()</code>: 检查 name 是否不在 dict_cnt 的键中。<code>dict_cnt[name] = 1</code> 如果 name 不在 dict_cnt 中，则将其添加到字典中，并设置值为 1。</li><li><code>return f(*args, **kwargs)</code> 如果 name 是第一次出现，则执行原函数 f，并返回其结果。</li></ul><p>总结来说，这段代码定义了一个装饰器，当 is_hook=True 时，它将确保在同一个类中，每个方法只执行一次；当 is_hook=False 时，它将确保整个程序中，每个函数只执行一次。这是通过在 dict_cnt 字典中跟踪函数（或方法）的执行情况来实现的。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@execute_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@rank_zero_only</span>
<span class="token keyword">def</span> <span class="token function">debug_hook</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Note: torch hooks do not work with kwargs passed as inputs.&quot;&quot;&quot;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Class:&quot;</span><span class="token punctuation">,</span> module<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Inputs:&quot;</span><span class="token punctuation">)</span>
    print_shape<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Outputs:&quot;</span><span class="token punctuation">)</span>
    print_shape<span class="token punctuation">(</span>output<span class="token punctuation">)</span>

    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>reset_peak_memory_stats<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段函数则是用来输出debug_hook的，<code>@execute_once()</code>是调用上面的装饰器，确保同一个类/整个程序只执行一次，<code>@rank_zero_only</code>是调用lightning的方法，确保只有<code>rank:0</code>机器执行这段代码。</p><p>那么代码里是怎么调用这段代码来输出网络情况的呢？</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> pointbev<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>debug <span class="token keyword">import</span> debug_hook
<span class="token keyword">class</span> <span class="token class-name">Backbone</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>register_forward_hook<span class="token punctuation">(</span>debug_hook<span class="token punctuation">)</span>
        <span class="token keyword">return</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> return_all<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,62),h=n("code",null,"EfficientNet(Backbone)",-1),_=n("code",null,"register_forward_hook",-1),f={href:"https://blog.csdn.net/qq_58011370/article/details/136648507",target:"_blank",rel:"noopener noreferrer"},y=p('<h3 id="环境安装" tabindex="-1"><a class="header-anchor" href="#环境安装"><span>环境安装</span></a></h3><p>问题：安装作者的sparse-gs库时：<code>subprocess.CalledProcessError: Command &#39;[&#39;ninja&#39;, &#39;-v&#39;]&#39; returned non-zero exit status 1.</code></p><p>解决方案：</p><p>修改anaconda环境下的<code>lib/python3.11/site-packages/torch/utils/cpp_extension.py</code>文件：将第1858行的<code>[&#39;ninja&#39;,&#39;-v&#39;]</code>改成<code>[&#39;ninja&#39;,&#39;--version&#39;]</code>。再将第1636行的<code>&#39;ninja --version&#39;</code>改成<code>&#39;ninja -v&#39;</code>。</p><p>问题：安装作者的sparse-gs库时：<code>error: command &#39;/usr/local/cuda-11.3/bin/nvcc&#39; failed with exit code 1</code></p><p>疑似原因：CUDA版本不匹配，python所用的CUDA版本是11.8，但系统里是11.3，这可能与nvcc关系不大，因为安装了11.8的nvcc后仍报此错。</p><p>解决方案：换CUDA版本是11.8的开发机安装。</p><p>并在<code>lib/python3.11/site-packages/torch/utils/cpp_extension.py</code>文件的第60、72行后添加对11.8的支持：<code>&#39;11.8&#39;: ((6, 0, 0), (12, 0)),</code>和<code>&#39;11.8&#39;: (MINIMUM_CLANG_VERSION, (14, 0)),</code>。好像之前也遇到过相似的问题，也是在11.8的开发机上才安装成功。</p>',8);function w(q,x){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("blockquote",null,[n("p",null,[s("本代码的模版来自："),n("a",r,[s("https://github.com/ashleve/lightning-hydra-template"),t(a)])])]),n("blockquote",null,[n("p",null,[s("Pytorch lightning参考："),n("a",k,[s("Pytorch Lightning 完全攻略"),t(a)])])]),d,n("blockquote",null,[n("p",null,[s("参考资料："),n("a",v,[s("Pytorch Lightning框架：使用笔记【LightningModule、LightningDataModule、Trainer、ModelCheckpoint】"),t(a)])])]),m,n("blockquote",null,[n("p",null,[s("学习率衰减策略参考："),n("a",b,[s("pytorch必须掌握的的4种学习率衰减策略"),t(a)])])]),g,n("p",null,[s("也就是说Backbone是加了debug_hook端口的，而我们所用的"),h,s("是继承了Backbone的。那么，代码中的"),_,s("是什么？答：钩子方法，参考："),n("a",f,[s("【PyTorch】 register_forward_hook()简单用法"),t(a)])]),y])}const S=e(l,[["render",w],["__file","pbv.html.vue"]]),N=JSON.parse('{"path":"/zsk/ai/paper/pbv.html","title":"PointBEV","lang":"zh-CN","frontmatter":{"date":"2024-05-15T00:00:00.000Z","title":"PointBEV","author":"Genhiy","order":1,"category":["Python"],"tag":["BEV","debug"],"description":"模版及模块设置 本代码的模版来自：https://github.com/ashleve/lightning-hydra-template Pytorch lightning参考：Pytorch Lightning 完全攻略 train.py main: 设置debug模式 utils.modif_config_based_on_flags(cfg): ...","head":[["meta",{"property":"og:url","content":"https://github.com/Genhiy/Genhiy.github.io/zsk/ai/paper/pbv.html"}],["meta",{"property":"og:site_name","content":"Genhiy"}],["meta",{"property":"og:title","content":"PointBEV"}],["meta",{"property":"og:description","content":"模版及模块设置 本代码的模版来自：https://github.com/ashleve/lightning-hydra-template Pytorch lightning参考：Pytorch Lightning 完全攻略 train.py main: 设置debug模式 utils.modif_config_based_on_flags(cfg): ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Genhiy"}],["meta",{"property":"article:tag","content":"BEV"}],["meta",{"property":"article:tag","content":"debug"}],["meta",{"property":"article:published_time","content":"2024-05-15T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PointBEV\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Genhiy\\"}]}"]]},"headers":[{"level":2,"title":"模版及模块设置","slug":"模版及模块设置","link":"#模版及模块设置","children":[{"level":3,"title":"设置debug模式","slug":"设置debug模式","link":"#设置debug模式","children":[]},{"level":3,"title":"设置warning忽略","slug":"设置warning忽略","link":"#设置warning忽略","children":[]},{"level":3,"title":"多进程只执行一次","slug":"多进程只执行一次","link":"#多进程只执行一次","children":[]},{"level":3,"title":"装饰器控制异常","slug":"装饰器控制异常","link":"#装饰器控制异常","children":[]}]},{"level":2,"title":"预处理","slug":"预处理","link":"#预处理","children":[{"level":3,"title":"实例化参数类","slug":"实例化参数类","link":"#实例化参数类","children":[]},{"level":3,"title":"准备数据集","slug":"准备数据集","link":"#准备数据集","children":[]},{"level":3,"title":"数据集情况及数据处理","slug":"数据集情况及数据处理","link":"#数据集情况及数据处理","children":[]},{"level":3,"title":"掌控学习率","slug":"掌控学习率","link":"#掌控学习率","children":[]},{"level":3,"title":"Dataloader","slug":"dataloader","link":"#dataloader","children":[]}]},{"level":2,"title":"前向过程","slug":"前向过程","link":"#前向过程","children":[{"level":3,"title":"图像的特征提取","slug":"图像的特征提取","link":"#图像的特征提取","children":[]},{"level":3,"title":"BEVFormer CamProjector","slug":"bevformer-camprojector","link":"#bevformer-camprojector","children":[]},{"level":3,"title":"PointBev BEV特征生成","slug":"pointbev-bev特征生成","link":"#pointbev-bev特征生成","children":[]},{"level":3,"title":"Decoder：SparseUNet","slug":"decoder-sparseunet","link":"#decoder-sparseunet","children":[]},{"level":3,"title":"Head：BEVConvHead","slug":"head-bevconvhead","link":"#head-bevconvhead","children":[]}]},{"level":2,"title":"反向传播及后处理","slug":"反向传播及后处理","link":"#反向传播及后处理","children":[{"level":3,"title":"loss计算","slug":"loss计算","link":"#loss计算","children":[]}]},{"level":2,"title":"debug","slug":"debug","link":"#debug","children":[{"level":3,"title":"debug_hooks","slug":"debug-hooks","link":"#debug-hooks","children":[]},{"level":3,"title":"环境安装","slug":"环境安装","link":"#环境安装","children":[]}]}],"git":{},"readingTime":{"minutes":12.36,"words":3708},"filePathRelative":"zsk/ai/paper/pbv.md","localizedDate":"2024年5月15日","excerpt":"<h2>模版及模块设置</h2>\\n<blockquote>\\n<p>本代码的模版来自：<a href=\\"https://github.com/ashleve/lightning-hydra-template\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/ashleve/lightning-hydra-template</a></p>\\n</blockquote>\\n<blockquote>\\n<p>Pytorch lightning参考：<a href=\\"https://zhuanlan.zhihu.com/p/353985363\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Pytorch Lightning 完全攻略</a></p>\\n</blockquote>","autoDesc":true}');export{S as comp,N as data};
