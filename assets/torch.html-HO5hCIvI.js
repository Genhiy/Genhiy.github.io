import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c,a as n,d as s,b as t,e as p}from"./app-SD3SAAIy.js";const i={},u=p(`<h3 id="tensor" tabindex="-1"><a class="header-anchor" href="#tensor"><span>tensor</span></a></h3><h4 id="zeros-、ones" tabindex="-1"><a class="header-anchor" href="#zeros-、ones"><span>zeros()、ones()</span></a></h4><p>创建全0、全1的tensor：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cuda0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">&#39;cuda:0&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float64<span class="token punctuation">,</span> device<span class="token operator">=</span>cuda0<span class="token punctuation">)</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.0000</span><span class="token punctuation">,</span>  <span class="token number">1.0000</span><span class="token punctuation">,</span>  <span class="token number">1.0000</span><span class="token punctuation">,</span>  <span class="token number">1.0000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span> <span class="token number">1.0000</span><span class="token punctuation">,</span>  <span class="token number">1.0000</span><span class="token punctuation">,</span>  <span class="token number">1.0000</span><span class="token punctuation">,</span>  <span class="token number">1.0000</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float64<span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token string">&#39;cuda:0&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="item" tabindex="-1"><a class="header-anchor" href="#item"><span>item()</span></a></h4><p>从只有一个数字的tensor中得到这个数字：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x
tensor<span class="token punctuation">(</span><span class="token number">2.5000</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">2.5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="grad、backward" tabindex="-1"><a class="header-anchor" href="#grad、backward"><span>grad、backward()</span></a></h4><p>获取梯度与反向传播：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> out <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> out<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">.</span>grad
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">2.0000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.0000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span> <span class="token number">2.0000</span><span class="token punctuation">,</span>  <span class="token number">2.0000</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="unsqueeze" tabindex="-1"><a class="header-anchor" href="#unsqueeze"><span>unsqueeze()</span></a></h4><p>升维，使用方法：<code>input.unsqueeze(1)</code>，1表示在张量的第二维中加括号，也即在一个<code>torch.Size([8, 6, 224, 224])</code>的第二维上插一个维度变为：<code>torch.Size([8, 1, 6, 224, 224])</code>。</p><h4 id="repeat" tabindex="-1"><a class="header-anchor" href="#repeat"><span>repeat()</span></a></h4><p>重复，关于这个的操作，有些文章写的那叫一个离谱，根本就读不懂，其实很简单，首先，repeat中的参数个数不能少于张量的维度，当等于时，张量的第i个维度重复repeat的第i个参数倍次，当repeat参数个数大于张量维度时，就在张量维度上补1，补至和repeat的参数个数相同，然后再进行repeat操作。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">)</span>
<span class="token builtin">input</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token builtin">input</span><span class="token punctuation">.</span>shape
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token builtin">input</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token builtin">input</span><span class="token punctuation">.</span>shape
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="torch-flip" tabindex="-1"><a class="header-anchor" href="#torch-flip"><span>torch.flip()</span></a></h4><p>用于翻转张量的函数。它可以用于在指定维度上对张量进行翻转操作。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>torch<span class="token punctuation">.</span>flip<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> dims<span class="token punctuation">)</span> → Tensor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>input：输入张量，可以是任意形状的张量。</li><li>dims：一个整数或整数列表，表示要翻转的维度。</li><li>返回一个张量，表示在指定维度上翻转后的结果，dims=1代表将第一维度反转，dims=[1,2]代表将第一、二维度反转。</li></ul><h2 id="model" tabindex="-1"><a class="header-anchor" href="#model"><span>model</span></a></h2><h3 id="nn-module" tabindex="-1"><a class="header-anchor" href="#nn-module"><span>nn.Module</span></a></h3><p>定义：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Module</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 定义一些基本内容，需重写，</span>
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 前向过程，需重写</span>
 
    <span class="token keyword">def</span> <span class="token function">add_module</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">cuda</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 将模型移到cuda设备上</span>
    <span class="token keyword">def</span> <span class="token function">cpu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 将模型移到cpu上</span>
    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token builtin">input</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># model(x)这条语句可以正常执行的前提，这个函数调用的forward</span>
    <span class="token keyword">def</span> <span class="token function">parameters</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> recurse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 查看神经网络的参数信息</span>
    <span class="token keyword">def</span> <span class="token function">named_parameters</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prefix<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> recurse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 同样是查看神经网络的参数信息</span>
    <span class="token keyword">def</span> <span class="token function">children</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 返回网络模型里的组成元素，children()返回的是最外层的元素</span>
    <span class="token keyword">def</span> <span class="token function">named_children</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">modules</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 返回网络模型里的组成元素，modules()返回的是所有的元素，包括不同级别的子元素</span>
    <span class="token keyword">def</span> <span class="token function">named_modules</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> memo<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> prefix<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 设置模式为训练</span>
    <span class="token keyword">def</span> <span class="token function">eval</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 设置模式为评估</span>
    <span class="token keyword">def</span> <span class="token function">zero_grad</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__dir__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
有一部分没有完全列出来
&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般把网络中具有可学习参数的层（如全连接层、卷积层等）放在构造函数__init__()中，当然也可以把不具有参数的层也放在里面；如果这些不含参数的层(如ReLU、dropout、BatchNormanation层)不放在构造函数__init__里面，则在forward方法里面可以使用nn.functional来代替：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> torch
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F
 
<span class="token keyword">class</span> <span class="token class-name">MyNet</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>MyNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 第一句话，调用父类的构造函数</span>
        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>dense1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>dense2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
 
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>dense1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>dense2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x
 
model <span class="token operator">=</span> MyNet<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;运行结果为：
MyNet(
  (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv2): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (dense1): Linear(in_features=288, out_features=128, bias=True)
  (dense2): Linear(in_features=128, out_features=10, bias=True)
)
&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：此时，将没有训练参数的层没有放在构造函数里面了，所以这些层就不会出现在model里面，但是运行关系是在forward里面通过functional的方法实现的。</p><p>其他构建网络的方法：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn
<span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict
<span class="token keyword">class</span> <span class="token class-name">MyNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>MyNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv_block <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>dense_block <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
    <span class="token comment"># 在这里实现层之间的连接关系，其实就是所谓的前向传播</span>
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        conv_out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_block<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        res <span class="token operator">=</span> conv_out<span class="token punctuation">.</span>view<span class="token punctuation">(</span>conv_out<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        out <span class="token operator">=</span> self<span class="token punctuation">.</span>dense_block<span class="token punctuation">(</span>res<span class="token punctuation">)</span>
        <span class="token keyword">return</span> out
 
model <span class="token operator">=</span> MyNet<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;运行结果为：
MyNet(
  (conv_block): Sequential(
    (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (dense_block): Sequential(
    (0): Linear(in_features=288, out_features=128, bias=True)
    (1): ReLU()
    (2): Linear(in_features=128, out_features=10, bias=True)
  )
)
&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里在每一个包装块里面，各个层是没有名称的，默认按照0、1、2、3、4来排名。如果我们希望有名字：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn
<span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict
<span class="token keyword">class</span> <span class="token class-name">MyNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>MyNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv_block <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            OrderedDict<span class="token punctuation">(</span>
                <span class="token punctuation">[</span>
                    <span class="token punctuation">(</span><span class="token string">&quot;conv1&quot;</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token punctuation">(</span><span class="token string">&quot;relu1&quot;</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token punctuation">(</span><span class="token string">&quot;pool&quot;</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">]</span>
            <span class="token punctuation">)</span><span class="token punctuation">)</span>
 
        self<span class="token punctuation">.</span>dense_block <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span>
                <span class="token punctuation">(</span><span class="token string">&quot;dense1&quot;</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span><span class="token string">&quot;relu2&quot;</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span><span class="token string">&quot;dense2&quot;</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
 
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        conv_out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_block<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        res <span class="token operator">=</span> conv_out<span class="token punctuation">.</span>view<span class="token punctuation">(</span>conv_out<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        out <span class="token operator">=</span> self<span class="token punctuation">.</span>dense_block<span class="token punctuation">(</span>res<span class="token punctuation">)</span>
        <span class="token keyword">return</span> out
 
model <span class="token operator">=</span> MyNet<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;运行结果为：
MyNet(
  (conv_block): Sequential(
    (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu1): ReLU()
    (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (dense_block): Sequential(
    (dense1): Linear(in_features=288, out_features=128, bias=True)
    (relu2): ReLU()
    (dense2): Linear(in_features=128, out_features=10, bias=True)
  )
)
&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以及简洁一些：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn
<span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict
<span class="token keyword">class</span> <span class="token class-name">MyNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>MyNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv_block<span class="token operator">=</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv_block<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">&quot;conv1&quot;</span><span class="token punctuation">,</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv_block<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">&quot;relu1&quot;</span><span class="token punctuation">,</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv_block<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">&quot;pool1&quot;</span><span class="token punctuation">,</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 
        self<span class="token punctuation">.</span>dense_block <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>dense_block<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">&quot;dense1&quot;</span><span class="token punctuation">,</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>dense_block<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">&quot;relu2&quot;</span><span class="token punctuation">,</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>dense_block<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">&quot;dense2&quot;</span><span class="token punctuation">,</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        conv_out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_block<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        res <span class="token operator">=</span> conv_out<span class="token punctuation">.</span>view<span class="token punctuation">(</span>conv_out<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        out <span class="token operator">=</span> self<span class="token punctuation">.</span>dense_block<span class="token punctuation">(</span>res<span class="token punctuation">)</span>
        <span class="token keyword">return</span> out
 
model <span class="token operator">=</span> MyNet<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;运行结果为：
MyNet(
  (conv_block): Sequential(
    (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu1): ReLU()
    (pool1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (dense_block): Sequential(
    (dense1): Linear(in_features=288, out_features=128, bias=True)
    (relu2): ReLU()
    (dense2): Linear(in_features=128, out_features=10, bias=True)
  )
)
&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="保存和加载模型" tabindex="-1"><a class="header-anchor" href="#保存和加载模型"><span>保存和加载模型</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># Define model</span>
<span class="token keyword">class</span> <span class="token class-name">TheModelClass</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>TheModelClass<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pool <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x

<span class="token comment"># Initialize model</span>
model <span class="token operator">=</span> TheModelClass<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Initialize optimizer</span>
optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>

<span class="token comment"># Print model&#39;s state_dict</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Model&#39;s state_dict:&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> param_tensor <span class="token keyword">in</span> model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>param_tensor<span class="token punctuation">,</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">,</span> model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>param_tensor<span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Print optimizer&#39;s state_dict</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Optimizer&#39;s state_dict:&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> var_name <span class="token keyword">in</span> optimizer<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>var_name<span class="token punctuation">,</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">,</span> optimizer<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>var_name<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码先是简单定义一个 5 层的 CNN，然后分别打印模型的参数和优化器参数。</p><p>输出结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>Model&#39;s state_dict<span class="token punctuation">:</span>
conv1<span class="token punctuation">.</span>weight     torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
conv1<span class="token punctuation">.</span>bias   torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
conv2<span class="token punctuation">.</span>weight     torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
conv2<span class="token punctuation">.</span>bias   torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fc1<span class="token punctuation">.</span>weight   torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fc1<span class="token punctuation">.</span>bias     torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fc2<span class="token punctuation">.</span>weight   torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fc2<span class="token punctuation">.</span>bias     torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fc3<span class="token punctuation">.</span>weight   torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fc3<span class="token punctuation">.</span>bias     torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

Optimizer&#39;s state_dict<span class="token punctuation">:</span>
state    <span class="token punctuation">{</span><span class="token punctuation">}</span>
param_groups     <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&#39;lr&#39;</span><span class="token punctuation">:</span> <span class="token number">0.001</span><span class="token punctuation">,</span> <span class="token string">&#39;momentum&#39;</span><span class="token punctuation">:</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token string">&#39;dampening&#39;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;weight_decay&#39;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;nesterov&#39;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">&#39;params&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4675713712</span><span class="token punctuation">,</span> <span class="token number">4675713784</span><span class="token punctuation">,</span> <span class="token number">4675714000</span><span class="token punctuation">,</span> <span class="token number">4675714072</span><span class="token punctuation">,</span> <span class="token number">4675714216</span><span class="token punctuation">,</span> <span class="token number">4675714288</span><span class="token punctuation">,</span> <span class="token number">4675714432</span><span class="token punctuation">,</span> <span class="token number">4675714504</span><span class="token punctuation">,</span> <span class="token number">4675714648</span><span class="token punctuation">,</span> <span class="token number">4675714720</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看model各层输入输出" tabindex="-1"><a class="header-anchor" href="#查看model各层输入输出"><span>查看model各层输入输出</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>本内容将极大协助您接触一个新的模型。</p></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> timm
<span class="token keyword">import</span> torch
<span class="token keyword">from</span> torchinfo <span class="token keyword">import</span> summary

model <span class="token operator">=</span> timm<span class="token punctuation">.</span>create_model<span class="token punctuation">(</span>
    <span class="token string">&#39;efficientvit_b0.r224_in1k&#39;</span><span class="token punctuation">,</span>
    pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    features_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    pretrained_cfg_overlay<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span><span class="token string">&#39;/mnt/iag/user/daiyiheng/ckpt/backbones/efficientvit_b0/pytorch_model.bin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
model <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
model<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>

img_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span>
summary<span class="token punctuation">(</span>model<span class="token punctuation">,</span> img_size<span class="token punctuation">)</span>

x <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
x <span class="token operator">=</span> x<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> o <span class="token keyword">in</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
Layer <span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">:</span>depth<span class="token operator">-</span>idx<span class="token punctuation">)</span>                                  Output Shape              Param <span class="token comment">#</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
FeatureListNet                                    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">]</span>          <span class="token operator">-</span><span class="token operator">-</span>
├─ConvNormAct<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span>                                <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">]</span>          <span class="token operator">-</span><span class="token operator">-</span>
│    └─Dropout<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span>                               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">]</span>          <span class="token operator">-</span><span class="token operator">-</span>
│    └─Conv2d<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span>                                <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">]</span>          <span class="token number">216</span>
│    └─BatchNorm2d<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">-</span><span class="token number">3</span>                           <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">]</span>          <span class="token number">16</span>
│    └─Hardswish<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">-</span><span class="token number">4</span>                             <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">]</span>          <span class="token operator">-</span><span class="token operator">-</span>
├─ResidualBlock<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span>                              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">]</span>          <span class="token operator">-</span><span class="token operator">-</span>
│    └─Identity<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">-</span><span class="token number">5</span>                              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">]</span>          <span class="token operator">-</span><span class="token operator">-</span>
│    └─DSConv<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">-</span><span class="token number">6</span>                                <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">]</span>          <span class="token operator">-</span><span class="token operator">-</span>
│    │    └─ConvNormAct<span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span>                      <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">]</span>          <span class="token number">88</span>
│    │    └─ConvNormAct<span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">-</span><span class="token number">2</span>                      <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">]</span>          <span class="token number">80</span>
│    └─Identity<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">-</span><span class="token number">7</span>                              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">]</span>          <span class="token operator">-</span><span class="token operator">-</span>
├─EfficientVitStage<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">3</span>                          <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">]</span>          <span class="token operator">-</span><span class="token operator">-</span>
│    └─Sequential<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">-</span><span class="token number">8</span>                            <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">]</span>          <span class="token operator">-</span><span class="token operator">-</span>
│    │    └─ResidualBlock<span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">-</span><span class="token number">3</span>                    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">]</span>          <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">216</span>
│    │    └─ResidualBlock<span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">-</span><span class="token number">4</span>                    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">]</span>          <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">912</span>
├─EfficientVitStage<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">4</span>                          <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span>           <span class="token operator">-</span><span class="token operator">-</span>
│    └─Sequential<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">-</span><span class="token number">9</span>                            <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span>           <span class="token operator">-</span><span class="token operator">-</span>
│    │    └─ResidualBlock<span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">-</span><span class="token number">5</span>                    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span>           <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">968</span>
│    │    └─ResidualBlock<span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">-</span><span class="token number">6</span>                    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span>           <span class="token number">9</span><span class="token punctuation">,</span><span class="token number">920</span>
├─EfficientVitStage<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">5</span>                          <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>           <span class="token operator">-</span><span class="token operator">-</span>
│    └─Sequential<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">-</span><span class="token number">10</span>                           <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>           <span class="token operator">-</span><span class="token operator">-</span>
│    │    └─ResidualBlock<span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">-</span><span class="token number">7</span>                    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>           <span class="token number">13</span><span class="token punctuation">,</span><span class="token number">824</span>
│    │    └─EfficientVitBlock<span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">-</span><span class="token number">8</span>                <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>           <span class="token number">64</span><span class="token punctuation">,</span><span class="token number">192</span>
│    │    └─EfficientVitBlock<span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">-</span><span class="token number">9</span>                <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>           <span class="token number">64</span><span class="token punctuation">,</span><span class="token number">192</span>
├─EfficientVitStage<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">6</span>                          <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span>           <span class="token operator">-</span><span class="token operator">-</span>
│    └─Sequential<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">-</span><span class="token number">11</span>                           <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span>           <span class="token operator">-</span><span class="token operator">-</span>
│    │    └─ResidualBlock<span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">-</span><span class="token number">10</span>                   <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span>           <span class="token number">52</span><span class="token punctuation">,</span><span class="token number">224</span>
│    │    └─EfficientVitBlock<span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">-</span><span class="token number">11</span>               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span>           <span class="token number">234</span><span class="token punctuation">,</span><span class="token number">880</span>
│    │    └─EfficientVitBlock<span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">-</span><span class="token number">12</span>               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span>           <span class="token number">234</span><span class="token punctuation">,</span><span class="token number">880</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
Total params<span class="token punctuation">:</span> <span class="token number">682</span><span class="token punctuation">,</span><span class="token number">608</span>
Trainable params<span class="token punctuation">:</span> <span class="token number">682</span><span class="token punctuation">,</span><span class="token number">608</span>
Non<span class="token operator">-</span>trainable params<span class="token punctuation">:</span> <span class="token number">0</span>
Total mult<span class="token operator">-</span>adds <span class="token punctuation">(</span>Units<span class="token punctuation">.</span>MEGABYTES<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">764.16</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
Input size <span class="token punctuation">(</span>MB<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">5.16</span>
Forward<span class="token operator">/</span>backward <span class="token keyword">pass</span> size <span class="token punctuation">(</span>MB<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">317.40</span>
Params size <span class="token punctuation">(</span>MB<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">2.73</span>
Estimated Total Size <span class="token punctuation">(</span>MB<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">325.29</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以很直观的从返回的信息中看到：本网络是一个FeatureListNet，其中包括第一层级模块6个，分别是一个ConvNormAct、一个ResidualBlock和四个EfficientVitStage，但是四个EfficientVitStage略微有些区别。</p><p>而且我们还可以直观的看到各个层的参数数目、总参数数目以及可训练的参数数目。以及总站用的内存数量：325.29MB。</p><p>这里efficientvit_b0会是有四个输出，如输出内容的最下方显示，分别是：<code>torch.Size([4, 16, 56, 120])</code>、<code>torch.Size([4, 32, 28, 60])</code>、<code>torch.Size([4, 64, 14, 30])</code>、<code>torch.Size([4, 128, 7, 15])</code>。但是上方FeatureListNet的输出仅显示<code>torch.Size([4, 16, 56, 120])</code>，原因是多输出只显示最先输出的一个。</p><h3 id="预训练模型读取" tabindex="-1"><a class="header-anchor" href="#预训练模型读取"><span>预训练模型读取</span></a></h3><p>上面展示了用timm中读取预训练模型：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>model <span class="token operator">=</span> timm<span class="token punctuation">.</span>create_model<span class="token punctuation">(</span>
    <span class="token string">&#39;efficientvit_b0.r224_in1k&#39;</span><span class="token punctuation">,</span>
    pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    features_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    pretrained_cfg_overlay<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span><span class="token string">&#39;/mnt/iag/user/daiyiheng/ckpt/backbones/efficientvit_b0/pytorch_model.bin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是用torchvision读取：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>model <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>efficientnet_b4<span class="token punctuation">(</span><span class="token punctuation">)</span>
model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">&#39;/mnt/iag/user/daiyiheng/ckpt/backbones/efficientnet_b4_rwightman-23ab8bcd.pth&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nn操作层" tabindex="-1"><a class="header-anchor" href="#nn操作层"><span>nn操作层</span></a></h2><h3 id="上采样层nn-upsample" tabindex="-1"><a class="header-anchor" href="#上采样层nn-upsample"><span>上采样层nn.Upsample</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>CLASS <span class="token class-name">torch</span><span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Upsample<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> scale_factor<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;nearest&#39;</span><span class="token punctuation">,</span> align_corners<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,53),r={href:"https://blog.csdn.net/qq_36387683/article/details/108108660",target:"_blank",rel:"noopener noreferrer"},k=p(`<p>上采样一个给定的多通道的 1D (temporal,如向量数据), 2D (spatial，如jpg、png等图像数据) or 3D (volumetric，如点云数据)数据。</p><p>假设输入数据的格式为minibatch x channels x [optional depth] x [optional height] x width。因此对于一个空间spatial输入，我们期待着4D张量的输入，即minibatch x channels x height x width。而对于体积volumetric输入，我们则期待着5D张量的输入，即minibatch x channels x depth x height x width。</p><p>对于上采样有效的算法分别有对 3D, 4D和 5D 张量输入起作用的 最近邻、线性,、双线性, 双三次(bicubic)和三线性(trilinear)插值算法。</p><h3 id="恒等映射nn-identity" tabindex="-1"><a class="header-anchor" href="#恒等映射nn-identity"><span>恒等映射nn.Identity()</span></a></h3><p>nn.Identity()实际上是一个恒等映射，不对输入进行任何变换或操作，只是简单地将输入返回作为输出。</p><p>既然nn.Identity() 是 PyTorch 中的一个层（layer）。它实际上是一个恒等映射，不对输入进行任何变换或操作，只是简单地将输入返回作为输出。那为什么要写它呢？它存在的意义是什么？nn.Identity() 层在神经网络中可能看起来似乎没有实际用处，因为它不对输入进行任何操作或变换，只是简单地将输入返回作为输出。然而，它实际上在某些情况下是很有用的，其存在意义包括以下几点：</p><ul><li>连接路径或跳跃连接（Skip Connections）： 在一些网络架构中，特别是残差网络（Residual Networks）或者一些需要跨层连接的架构（比如 DenseNet），nn.Identity() 可以用于实现跳跃连接。通过跳跃连接，神经网络可以直接从一个层传递信息到后续层，这有助于解决梯度消失或梯度爆炸等问题，同时也有助于提高模型的性能和训练速度。</li><li>模型组合和特殊结构设计： 在设计复杂的神经网络结构时，nn.Identity() 可以用于在模型中创建一些特殊的连接或分支结构。通过使用恒等映射，可以更轻松地实现某些复杂模型的组合，或者通过条件语句动态地选择是否应用某些层。</li><li>代码一致性和灵活性： 在编写神经网络代码时，有时需要保持一致性，可能会需要一个占位符层来代表某些特定的操作。nn.Identity() 可以填补这个需求，即使不对输入进行任何更改，也能保持代码的一致性和清晰度。</li><li>简化模型和调试： 在一些情况下，为了简化模型或者调试网络结构，可以使用 nn.Identity() 层。它允许将某些部分固定为恒等映射，方便单独地测试网络的不同部分。</li></ul><h2 id="functional方法" tabindex="-1"><a class="header-anchor" href="#functional方法"><span>functional方法</span></a></h2><h3 id="数组归一化-f-normalize" tabindex="-1"><a class="header-anchor" href="#数组归一化-f-normalize"><span>数组归一化 F.normalize</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token number">2.0</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> eps<span class="token operator">=</span><span class="token number">1e-12</span><span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10),m=n("p",null,[s("功能：利用"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"L"),n("mi",null,"p")])]),n("annotation",{encoding:"application/x-tex"},"L_p")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.9694em","vertical-align":"-0.2861em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"L"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.1514em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"p")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.2861em"}},[n("span")])])])])])])])]),s("范数对输入的数组沿特定的维度进行归一化:")],-1),d=n("p",null,[s("对于尺寸为"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("msub",null,[n("mi",null,"n"),n("mn",null,"0")]),n("mo",{separator:"true"},","),n("mo",null,"…"),n("mo",{separator:"true"},","),n("msub",null,[n("mi",null,"n"),n("mrow",null,[n("mi",null,"d"),n("mi",null,"i"),n("mi",null,"m")])]),n("mo",{separator:"true"},","),n("mo",null,"…"),n("mo",{separator:"true"},","),n("msub",null,[n("mi",null,"n"),n("mi",null,"k")]),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"(n_0,…,n_{dim},…,n_k)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"0")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"minner"},"…"),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3361em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"d"),n("span",{class:"mord mathnormal mtight"},"im")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"minner"},"…"),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3361em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mclose"},")")])])]),s("的输入数组input，每个"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"n"),n("mrow",null,[n("mi",null,"d"),n("mi",null,"i"),n("mi",null,"m")])])]),n("annotation",{encoding:"application/x-tex"},"n_{dim}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3361em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"d"),n("span",{class:"mord mathnormal mtight"},"im")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])])])])]),s("上的元素向量"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"v")]),n("annotation",{encoding:"application/x-tex"},"v")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v")])])]),s("沿着维度dim进行转换，转换公式为：")],-1),v=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mi",null,"v"),n("mo",null,"="),n("mfrac",null,[n("mi",null,"v"),n("mrow",null,[n("mi",null,"max"),n("mo",null,"⁡"),n("mo",{stretchy:"false"},"("),n("mi",{mathvariant:"normal"},"∣"),n("mi",{mathvariant:"normal"},"∣"),n("mi",null,"v"),n("mi",{mathvariant:"normal"},"∣"),n("msub",null,[n("mi",{mathvariant:"normal"},"∣"),n("mi",null,"p")]),n("mo",{separator:"true"},","),n("mi",null,"ϵ"),n("mo",{stretchy:"false"},")")])])]),n("annotation",{encoding:"application/x-tex"}," v=\\frac{v}{\\max(||v||_p,\\epsilon)} ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"2.0797em","vertical-align":"-0.9721em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.1076em"}},[n("span",{style:{top:"-2.314em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mop"},"max"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"∣∣"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),n("span",{class:"mord"},"∣"),n("span",{class:"mord"},[n("span",{class:"mord"},"∣"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.1514em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"p")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.2861em"}},[n("span")])])])])]),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal"},"ϵ"),n("span",{class:"mclose"},")")])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.677em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.9721em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})])])])])])],-1),b=n("p",null,"范数计算公式",-1),h=n("p",null,[s("对于数据 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"x"),n("mo",null,"="),n("mo",{stretchy:"false"},"["),n("msub",null,[n("mi",null,"x"),n("mn",null,"1")]),n("mo",{separator:"true"},","),n("msub",null,[n("mi",null,"x"),n("mn",null,"2")]),n("mo",{separator:"true"},","),n("mo",null,"…"),n("mo",{separator:"true"},","),n("msub",null,[n("mi",null,"x"),n("mi",null,"n")]),n("msup",null,[n("mo",{stretchy:"false"},"]"),n("mi",null,"T")])]),n("annotation",{encoding:"application/x-tex"},"x=[x_1,x_2,\\dots,x_n]^T")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0913em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"["),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"1")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"minner"},"…"),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.1514em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"n")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mclose"},[n("span",{class:"mclose"},"]"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8413em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.13889em"}},"T")])])])])])])])])])]),s(":")],-1),g=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mtable",{rowspacing:"0.25em",columnalign:"right left",columnspacing:"0em"},[n("mtr",null,[n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"true"},[n("mrow")])]),n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"true"},[n("mrow",null,[n("mrow"),n("mo",null,"∙"),n("msub",null,[n("mi",null,"L"),n("mi",null,"p")]),n("mtext",null,"范数:"),n("mi",{mathvariant:"normal"},"∣"),n("mi",{mathvariant:"normal"},"∣"),n("mi",null,"x"),n("mi",{mathvariant:"normal"},"∣"),n("msub",null,[n("mi",{mathvariant:"normal"},"∣"),n("mi",null,"p")]),n("mo",null,"="),n("mo",{stretchy:"false"},"("),n("mi",{mathvariant:"normal"},"∣"),n("msub",null,[n("mi",null,"x"),n("mn",null,"1")]),n("msup",null,[n("mi",{mathvariant:"normal"},"∣"),n("mi",null,"p")]),n("mo",null,"+"),n("mi",{mathvariant:"normal"},"∣"),n("msub",null,[n("mi",null,"x"),n("mn",null,"2")]),n("msup",null,[n("mi",{mathvariant:"normal"},"∣"),n("mi",null,"p")]),n("mo",null,"+"),n("mo",null,"⋯"),n("mo",null,"+"),n("mi",{mathvariant:"normal"},"∣"),n("msub",null,[n("mi",null,"x"),n("mi",null,"n")]),n("msup",null,[n("mi",{mathvariant:"normal"},"∣"),n("mi",null,"p")]),n("msup",null,[n("mo",{stretchy:"false"},")"),n("mfrac",null,[n("mn",null,"1"),n("mi",null,"p")])])])])])]),n("mtr",null,[n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"true"},[n("mrow")])]),n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"true"},[n("mrow",null,[n("mrow"),n("mo",null,"∙"),n("msub",null,[n("mi",null,"L"),n("mn",null,"1")]),n("mtext",null,"范数:"),n("mi",{mathvariant:"normal"},"∣"),n("mi",{mathvariant:"normal"},"∣"),n("mi",null,"x"),n("mi",{mathvariant:"normal"},"∣"),n("msub",null,[n("mi",{mathvariant:"normal"},"∣"),n("mn",null,"1")]),n("mo",null,"="),n("mi",{mathvariant:"normal"},"∣"),n("msub",null,[n("mi",null,"x"),n("mn",null,"1")]),n("mi",{mathvariant:"normal"},"∣"),n("mo",null,"+"),n("mi",{mathvariant:"normal"},"∣"),n("msub",null,[n("mi",null,"x"),n("mn",null,"2")]),n("mi",{mathvariant:"normal"},"∣"),n("mo",null,"+"),n("mo",null,"⋯"),n("mo",null,"+"),n("mi",{mathvariant:"normal"},"∣"),n("msub",null,[n("mi",null,"x"),n("mi",null,"n")]),n("mi",{mathvariant:"normal"},"∣")])])])]),n("mtr",null,[n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"true"},[n("mrow")])]),n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"true"},[n("mrow",null,[n("mrow"),n("mo",null,"∙"),n("msub",null,[n("mi",null,"L"),n("mn",null,"2")]),n("mtext",null,"范数:"),n("mi",{mathvariant:"normal"},"∣"),n("mi",{mathvariant:"normal"},"∣"),n("mi",null,"x"),n("mi",{mathvariant:"normal"},"∣"),n("msub",null,[n("mi",{mathvariant:"normal"},"∣"),n("mn",null,"2")]),n("mo",null,"="),n("mo",{stretchy:"false"},"("),n("mi",{mathvariant:"normal"},"∣"),n("msub",null,[n("mi",null,"x"),n("mn",null,"1")]),n("msup",null,[n("mi",{mathvariant:"normal"},"∣"),n("mn",null,"2")]),n("mo",null,"+"),n("mi",{mathvariant:"normal"},"∣"),n("msub",null,[n("mi",null,"x"),n("mn",null,"2")]),n("msup",null,[n("mi",{mathvariant:"normal"},"∣"),n("mn",null,"2")]),n("mo",null,"+"),n("mo",null,"⋯"),n("mo",null,"+"),n("mi",{mathvariant:"normal"},"∣"),n("msub",null,[n("mi",null,"x"),n("mi",null,"n")]),n("msup",null,[n("mi",{mathvariant:"normal"},"∣"),n("mn",null,"2")]),n("msup",null,[n("mo",{stretchy:"false"},")"),n("mfrac",null,[n("mn",null,"1"),n("mn",null,"2")])])])])])])]),n("annotation",{encoding:"application/x-tex"}," \\begin{aligned}&\\bullet L_{p} \\text{范数:} ||x||_{p} = (|x_{1} |^{p}+|x_{2} |^{p}+\\cdots+|x_{n} |^{p})^{\\frac{1}{p}}\\\\&\\bullet L_{1} \\text{范数:} ||x||_{1} = |x_{1} |+|x_{2} |+\\cdots+|x_{n} |\\\\&\\bullet L_{2} \\text{范数:} ||x||_{2} = (|x_{1} |^{2}+|x_{2} |^{2}+\\cdots+|x_{n} |^{2})^{\\frac{1}{2}}\\end{aligned} ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"4.8608em","vertical-align":"-2.1804em"}}),n("span",{class:"mord"},[n("span",{class:"mtable"},[n("span",{class:"col-align-r"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"2.6804em"}},[n("span",{style:{top:"-4.6804em"}},[n("span",{class:"pstrut",style:{height:"3.0368em"}}),n("span",{class:"mord"})]),n("span",{style:{top:"-3.1804em"}},[n("span",{class:"pstrut",style:{height:"3.0368em"}}),n("span",{class:"mord"})]),n("span",{style:{top:"-1.5164em"}},[n("span",{class:"pstrut",style:{height:"3.0368em"}}),n("span",{class:"mord"})])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"2.1804em"}},[n("span")])])])]),n("span",{class:"col-align-l"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"2.6804em"}},[n("span",{style:{top:"-4.6804em"}},[n("span",{class:"pstrut",style:{height:"3.0368em"}}),n("span",{class:"mord"},[n("span",{class:"mord"}),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∙"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"L"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.1514em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"p")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.2861em"}},[n("span")])])])])]),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"范数"),n("span",{class:"mord"},":")]),n("span",{class:"mord"},"∣∣"),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mord"},"∣"),n("span",{class:"mord"},[n("span",{class:"mord"},"∣"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.1514em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"p")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.2861em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"∣"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"1")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mord"},[n("span",{class:"mord"},"∣"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.7144em"}},[n("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"p")])])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},"∣"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mord"},[n("span",{class:"mord"},"∣"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.7144em"}},[n("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"p")])])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"minner"},"⋯"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},"∣"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.1514em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"n")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mord"},[n("span",{class:"mord"},"∣"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.7144em"}},[n("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"p")])])])])])])])]),n("span",{class:"mclose"},[n("span",{class:"mclose"},")"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.0368em"}},[n("span",{style:{top:"-3.4458em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mopen nulldelimiter sizing reset-size3 size6"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8443em"}},[n("span",{style:{top:"-2.656em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size3 size1 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"p")])])]),n("span",{style:{top:"-3.2255em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line mtight",style:{"border-bottom-width":"0.049em"}})]),n("span",{style:{top:"-3.384em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size3 size1 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"1")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.4829em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter sizing reset-size3 size6"})])])])])])])])])])])]),n("span",{style:{top:"-3.1804em"}},[n("span",{class:"pstrut",style:{height:"3.0368em"}}),n("span",{class:"mord"},[n("span",{class:"mord"}),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∙"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"L"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"1")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"范数"),n("span",{class:"mord"},":")]),n("span",{class:"mord"},"∣∣"),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mord"},"∣"),n("span",{class:"mord"},[n("span",{class:"mord"},"∣"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"1")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mord"},"∣"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"1")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mord"},"∣"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},"∣"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mord"},"∣"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"minner"},"⋯"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},"∣"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.1514em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"n")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mord"},"∣")])]),n("span",{style:{top:"-1.5164em"}},[n("span",{class:"pstrut",style:{height:"3.0368em"}}),n("span",{class:"mord"},[n("span",{class:"mord"}),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∙"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"L"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mord text"},[n("span",{class:"mord cjk_fallback"},"范数"),n("span",{class:"mord"},":")]),n("span",{class:"mord"},"∣∣"),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mord"},"∣"),n("span",{class:"mord"},[n("span",{class:"mord"},"∣"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"∣"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"1")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mord"},[n("span",{class:"mord"},"∣"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8641em"}},[n("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},"∣"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mord"},[n("span",{class:"mord"},"∣"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8641em"}},[n("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"minner"},"⋯"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},"∣"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.1514em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"n")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mord"},[n("span",{class:"mord"},"∣"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8641em"}},[n("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])])]),n("span",{class:"mclose"},[n("span",{class:"mclose"},")"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.004em"}},[n("span",{style:{top:"-3.413em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mopen nulldelimiter sizing reset-size3 size6"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8443em"}},[n("span",{style:{top:"-2.656em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size3 size1 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{style:{top:"-3.2255em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line mtight",style:{"border-bottom-width":"0.049em"}})]),n("span",{style:{top:"-3.384em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size3 size1 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"1")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.344em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter sizing reset-size3 size6"})])])])])])])])])])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"2.1804em"}},[n("span")])])])])])])])])])])],-1),y=n("p",null,"输入：",-1),f=n("ul",null,[n("li",null,"input：输入的数组，数组数据类型为float"),n("li",null,"p：指定使用的范数，数据类型为float，默认2.0"),n("li",null,"dim：指定的维度，数据类型为int，默认1"),n("li",null,"eps：边界值，防止分母为0，默认1e-12")],-1),_={href:"https://blog.csdn.net/qq_50001789/article/details/128974286",target:"_blank",rel:"noopener noreferrer"},x=p(`<h2 id="debug相关方法" tabindex="-1"><a class="header-anchor" href="#debug相关方法"><span>debug相关方法</span></a></h2><h3 id="hooks方法" tabindex="-1"><a class="header-anchor" href="#hooks方法"><span>hooks方法</span></a></h3><p>为了节省显存（内存），pytorch在计算过程中不保存中间变量，包括中间层的特征图和非叶子张量的梯度等。有时对网络进行分析时需要查看或修改这些中间变量，此时就需要注册一个钩子（hook）来导出需要的中间变量。</p><p>hook方法有四种:</p><ul><li>torch.Tensor.register_hook()</li><li>torch.nn.Module.register_forward_hook()</li><li>torch.nn.Module.register_backward_hook()</li><li>torch.nn.Module.register_forward_pre_hook()</li></ul><h4 id="torch-tensor-register-hook-hook" tabindex="-1"><a class="header-anchor" href="#torch-tensor-register-hook-hook"><span>torch.Tensor.register_hook(hook)</span></a></h4><p>用来导出指定张量的梯度，或修改这个梯度值。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> torch
<span class="token keyword">def</span> <span class="token function">grad_hook</span><span class="token punctuation">(</span>grad<span class="token punctuation">)</span><span class="token punctuation">:</span>
    grad <span class="token operator">*=</span> <span class="token number">2</span>
x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
z <span class="token operator">=</span> torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>y<span class="token punctuation">)</span>
h <span class="token operator">=</span> x<span class="token punctuation">.</span>register_hook<span class="token punctuation">(</span>grad_hook<span class="token punctuation">)</span>
z<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>
h<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># removes the hook</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li><p>上述代码是有效的，但如果写成 grad = grad * 2就失效了，因为此时没有对grad进行本地操作，新的grad值没有传递给指定的梯度。保险起见，最好在def语句中写明return grad。即：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">grad_hook</span><span class="token punctuation">(</span>grad<span class="token punctuation">)</span><span class="token punctuation">:</span>
    grad <span class="token operator">=</span> grad <span class="token operator">*</span> <span class="token number">2</span>
    <span class="token keyword">return</span> grad
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可以用remove()方法取消hook。注意remove()必须在backward()之后，因为只有在执行backward()语句时，pytorch才开始计算梯度，而在x.register_hook(grad_hook)时它仅仅是&quot;注册&quot;了一个grad的钩子，此时并没有计算，而执行remove就取消了这个钩子，然后再backward()时钩子就不起作用了。</p></li></ul><h4 id="torch-nn-module-register-forward-hook-module-inp-out" tabindex="-1"><a class="header-anchor" href="#torch-nn-module-register-forward-hook-module-inp-out"><span>torch.nn.Module.register_forward_hook(module, inp, out)</span></a></h4><p>用来导出指定子模块（可以是层、模块等nn.Module类型）的输入输出张量，但只可修改输出，常用来导出或修改卷积特征图。</p><p>简单范例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>inps<span class="token punctuation">,</span> outs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token function">layer_hook</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> inp<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">:</span>
    inps<span class="token punctuation">.</span>append<span class="token punctuation">(</span>inp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    outs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>out<span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

hook <span class="token operator">=</span> net<span class="token punctuation">.</span>layer1<span class="token punctuation">.</span>register_forward_hook<span class="token punctuation">(</span>layer_hook<span class="token punctuation">)</span>
output <span class="token operator">=</span> net<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>
hook<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再具体些，比如有个LeNet：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> torch
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F
 
<span class="token keyword">class</span> <span class="token class-name">LeNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>LeNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
 
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        out <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>     
        out <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>      
        
        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>
        out <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>  
        out <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        
        out <span class="token operator">=</span> out<span class="token punctuation">.</span>view<span class="token punctuation">(</span>out<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        out <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>
        out <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>
        out <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>out<span class="token punctuation">)</span>
        <span class="token keyword">return</span> out
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们要获取conv2的输出，一种最直观的思路是直接修改forward部分的代码，将conv2的中间结果return即可：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    out <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>     
    out <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>      
    
    out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>
    out_conv2 <span class="token operator">=</span> out
    out <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>
    out <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    
    out <span class="token operator">=</span> out<span class="token punctuation">.</span>view<span class="token punctuation">(</span>out<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    out <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>
    out <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>
    out <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>out<span class="token punctuation">)</span>
    <span class="token keyword">return</span> out<span class="token punctuation">,</span> out_conv2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但很多时候，我们并没有办法去直接修改网络的源代码，比如在pytorch中已经封装好的网络，那么这个时候就可以利用hook从外部获取Module的中间输出结果了。即：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token function">hook</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">:</span> 
    <span class="token keyword">print</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">,</span>output<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
    features<span class="token punctuation">.</span>append<span class="token punctuation">(</span>output<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 
net <span class="token operator">=</span> LeNet<span class="token punctuation">(</span><span class="token punctuation">)</span> 
x <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>  
handle <span class="token operator">=</span> net<span class="token punctuation">.</span>conv2<span class="token punctuation">.</span>register_forward_hook<span class="token punctuation">(</span>hook<span class="token punctuation">)</span>
y <span class="token operator">=</span> net<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>features<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
handle<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>Conv2d<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">)</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>取出网络的相应层后，对该层调用register_forward_hook方法。这个方法需要传入一个hook方法：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>hook<span class="token punctuation">(</span>module<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span> <span class="token keyword">or</span> modified output
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>module：表示该层网络</li><li>input：该层网络的输入</li><li>output：该层网络的输出</li></ul><p>从这里可以发现hook甚至可以更改输入输出(不过并不会影响网络forward的实际结果)，不过在这里我们只是简单地将output给保存下来。</p><p>需要注意的是hook函数在使用后应及时删除，以避免每次都运行增加运行负载。</p>`,27),w={href:"https://blog.csdn.net/qq_58011370/article/details/136648507",target:"_blank",rel:"noopener noreferrer"},z=p(`<h4 id="torch-nn-module-register-forward-pre-hook-module-in" tabindex="-1"><a class="header-anchor" href="#torch-nn-module-register-forward-pre-hook-module-in"><span>torch.nn.Module.register_forward_pre_hook(module, in)</span></a></h4><p>用来导出或修改指定子模块的输入张量。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">pre_hook</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> inp<span class="token punctuation">)</span><span class="token punctuation">:</span>
    inp0 <span class="token operator">=</span> inp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    inp0 <span class="token operator">=</span> inp0 <span class="token operator">*</span> <span class="token number">2</span>
    inp <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">[</span>inp0<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> inp

hook <span class="token operator">=</span> net<span class="token punctuation">.</span>layer1<span class="token punctuation">.</span>register_forward_pre_hook<span class="token punctuation">(</span>pre_hook<span class="token punctuation">)</span>
output <span class="token operator">=</span> net<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>
hook<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li>inp值是个tuple类型，所以需要先把其中的张量提取出来，再做其他操作，然后还要再转化为tuple返回。</li><li>在执行output = net(input)时才会调用此句，remove()可放在调用后用来取消钩子。</li></ul><h4 id="torch-nn-module-register-backward-hook-module-grad-in-grad-out" tabindex="-1"><a class="header-anchor" href="#torch-nn-module-register-backward-hook-module-grad-in-grad-out"><span>torch.nn.Module.register_backward_hook(module, grad_in, grad_out)</span></a></h4><p>用来导出指定子模块的输入输出张量的梯度，但只可修改输入张量的梯度（即只能返回gin），输出张量梯度不可修改。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>gouts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token function">backward_hook</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> gin<span class="token punctuation">,</span> gout<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>gin<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>gout<span class="token punctuation">)</span><span class="token punctuation">)</span>
    gouts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>gout<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    gin0<span class="token punctuation">,</span>gin1<span class="token punctuation">,</span>gin2 <span class="token operator">=</span> gin
    gin1 <span class="token operator">=</span> gin1<span class="token operator">*</span><span class="token number">2</span>
    gin2 <span class="token operator">=</span> gin2<span class="token operator">*</span><span class="token number">3</span>
    gin <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">[</span>gin0<span class="token punctuation">,</span>gin1<span class="token punctuation">,</span>gin2<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> gin

hook <span class="token operator">=</span> net<span class="token punctuation">.</span>layer1<span class="token punctuation">.</span>register_backward_hook<span class="token punctuation">(</span>backward_hook<span class="token punctuation">)</span>
loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
hook<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li>其中的grad_in和grad_out都是tuple，必须要先解开，修改时执行操作后再重新放回tuple返回。</li><li>这个钩子函数在backward()语句中被调用，所以remove()要放在backward()之后用来取消钩子。</li></ul>`,10),q={href:"https://blog.csdn.net/Brikie/article/details/114255743",target:"_blank",rel:"noopener noreferrer"};function M(L,S){const a=o("ExternalLinkIcon");return l(),c("div",null,[u,n("blockquote",null,[n("p",null,[s("具体参数及用法："),n("a",r,[s("pytorch torch.nn 实现上采样——nn.Upsample"),t(a)])])]),k,m,d,v,b,h,g,y,f,n("blockquote",null,[n("p",null,[s("本内容参考自："),n("a",_,[s("PyTorch学习笔记：F.normalize——数组归一化运算"),t(a)])])]),x,n("blockquote",null,[n("p",null,[s("参考资料："),n("a",w,[s("【PyTorch】 register_forward_hook()简单用法"),t(a)])])]),z,n("blockquote",null,[n("p",null,[s("参考资料："),n("a",q,[s("【pytorch学习】四种钩子方法（register_forward_hook等）的用法和注意点"),t(a)])])])])}const F=e(i,[["render",M],["__file","torch.html.vue"]]),C=JSON.parse(`{"path":"/zsk/tech/python/torch.html","title":"Torch","lang":"zh-CN","frontmatter":{"date":"2024-05-10T00:00:00.000Z","title":"Torch","author":"Genhiy","order":3,"category":["Python"],"tag":["CodeBook"],"description":"tensor zeros()、ones() 创建全0、全1的tensor： item() 从只有一个数字的tensor中得到这个数字： grad、backward() 获取梯度与反向传播： unsqueeze() 升维，使用方法：input.unsqueeze(1)，1表示在张量的第二维中加括号，也即在一个torch.Size([8, 6, 224, ...","head":[["meta",{"property":"og:url","content":"https://github.com/Genhiy/Genhiy.github.io/zsk/tech/python/torch.html"}],["meta",{"property":"og:site_name","content":"Genhiy"}],["meta",{"property":"og:title","content":"Torch"}],["meta",{"property":"og:description","content":"tensor zeros()、ones() 创建全0、全1的tensor： item() 从只有一个数字的tensor中得到这个数字： grad、backward() 获取梯度与反向传播： unsqueeze() 升维，使用方法：input.unsqueeze(1)，1表示在张量的第二维中加括号，也即在一个torch.Size([8, 6, 224, ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Genhiy"}],["meta",{"property":"article:tag","content":"CodeBook"}],["meta",{"property":"article:published_time","content":"2024-05-10T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Torch\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-10T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Genhiy\\"}]}"]]},"headers":[{"level":3,"title":"tensor","slug":"tensor","link":"#tensor","children":[]},{"level":2,"title":"model","slug":"model","link":"#model","children":[{"level":3,"title":"nn.Module","slug":"nn-module","link":"#nn-module","children":[]},{"level":3,"title":"保存和加载模型","slug":"保存和加载模型","link":"#保存和加载模型","children":[]},{"level":3,"title":"查看model各层输入输出","slug":"查看model各层输入输出","link":"#查看model各层输入输出","children":[]},{"level":3,"title":"预训练模型读取","slug":"预训练模型读取","link":"#预训练模型读取","children":[]}]},{"level":2,"title":"nn操作层","slug":"nn操作层","link":"#nn操作层","children":[{"level":3,"title":"上采样层nn.Upsample","slug":"上采样层nn-upsample","link":"#上采样层nn-upsample","children":[]},{"level":3,"title":"恒等映射nn.Identity()","slug":"恒等映射nn-identity","link":"#恒等映射nn-identity","children":[]}]},{"level":2,"title":"functional方法","slug":"functional方法","link":"#functional方法","children":[{"level":3,"title":"数组归一化 F.normalize","slug":"数组归一化-f-normalize","link":"#数组归一化-f-normalize","children":[]}]},{"level":2,"title":"debug相关方法","slug":"debug相关方法","link":"#debug相关方法","children":[{"level":3,"title":"hooks方法","slug":"hooks方法","link":"#hooks方法","children":[]}]}],"git":{},"readingTime":{"minutes":14.68,"words":4405},"filePathRelative":"zsk/tech/python/torch.md","localizedDate":"2024年5月10日","excerpt":"<h3>tensor</h3>\\n<h4>zeros()、ones()</h4>\\n<p>创建全0、全1的tensor：</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> torch<span class=\\"token punctuation\\">.</span>zeros<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> dtype<span class=\\"token operator\\">=</span>torch<span class=\\"token punctuation\\">.</span>int32<span class=\\"token punctuation\\">)</span>\\ntensor<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">[</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>  <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>  <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>  <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">[</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>  <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>  <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>  <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> dtype<span class=\\"token operator\\">=</span>torch<span class=\\"token punctuation\\">.</span>int32<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> cuda0 <span class=\\"token operator\\">=</span> torch<span class=\\"token punctuation\\">.</span>device<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'cuda:0'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> torch<span class=\\"token punctuation\\">.</span>ones<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> dtype<span class=\\"token operator\\">=</span>torch<span class=\\"token punctuation\\">.</span>float64<span class=\\"token punctuation\\">,</span> device<span class=\\"token operator\\">=</span>cuda0<span class=\\"token punctuation\\">)</span>\\ntensor<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">[</span> <span class=\\"token number\\">1.0000</span><span class=\\"token punctuation\\">,</span>  <span class=\\"token number\\">1.0000</span><span class=\\"token punctuation\\">,</span>  <span class=\\"token number\\">1.0000</span><span class=\\"token punctuation\\">,</span>  <span class=\\"token number\\">1.0000</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">[</span> <span class=\\"token number\\">1.0000</span><span class=\\"token punctuation\\">,</span>  <span class=\\"token number\\">1.0000</span><span class=\\"token punctuation\\">,</span>  <span class=\\"token number\\">1.0000</span><span class=\\"token punctuation\\">,</span>  <span class=\\"token number\\">1.0000</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> dtype<span class=\\"token operator\\">=</span>torch<span class=\\"token punctuation\\">.</span>float64<span class=\\"token punctuation\\">,</span> device<span class=\\"token operator\\">=</span><span class=\\"token string\\">'cuda:0'</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}`);export{F as comp,C as data};
