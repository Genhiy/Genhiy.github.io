import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as i,c as o,a as n,d as s,b as t,e as p}from"./app-SD3SAAIy.js";const l={},u=p(`<p>所谓的“多路召回”策略，就是指采用不同的策略、特征或简单模型，分别召回一部分候选集，然后把候选集混合在一起供后续排序模型使用，可以明显的看出，“多路召回策略”是在“计算速度”和“召回率”之间进行权衡的结果。其中，各种简单策略保证候选集的快速召回，从不同角度设计的策略保证召回率接近理想的状态，不至于损伤排序效果。</p><p>如下图是多路召回的一个示意图，在多路召回中，每个策略之间毫不相关，所以一般可以写并发多线程同时进行，这样可以更加高效。</p><figure><img src="http://ryluo.oss-cn-chengdu.aliyuncs.com/abc/image-20201119132726873.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图只是一个多路召回的例子，也就是说可以使用多种不同的策略来获取用户排序的候选商品集合，而具体使用哪些召回策略其实是与业务强相关的 ，针对不同的任务就会有对于该业务真实场景下需要考虑的召回规则。例如新闻推荐，召回规则可以是“热门视频”、“导演召回”、“演员召回”、“最近上映“、”流行趋势“、”类型召回“等等。</p><h2 id="导包" tabindex="-1"><a class="header-anchor" href="#导包"><span>导包</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd  
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm  
<span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict  
<span class="token keyword">import</span> os<span class="token punctuation">,</span> math<span class="token punctuation">,</span> warnings<span class="token punctuation">,</span> math<span class="token punctuation">,</span> pickle
<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm
<span class="token keyword">import</span> faiss
<span class="token keyword">import</span> collections
<span class="token keyword">import</span> random
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> MinMaxScaler
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime
<span class="token keyword">from</span> deepctr<span class="token punctuation">.</span>feature_column <span class="token keyword">import</span> SparseFeat<span class="token punctuation">,</span> VarLenSparseFeat
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder
<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>python<span class="token punctuation">.</span>keras <span class="token keyword">import</span> backend <span class="token keyword">as</span> K
<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>python<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Model
<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>python<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>preprocessing<span class="token punctuation">.</span>sequence <span class="token keyword">import</span> pad_sequences

<span class="token keyword">from</span> deepmatch<span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> deepmatch<span class="token punctuation">.</span>utils <span class="token keyword">import</span> sampledsoftmaxloss
warnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">&#39;ignore&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>data_path <span class="token operator">=</span> <span class="token string">&#39;./data_raw/&#39;</span>
save_path <span class="token operator">=</span> <span class="token string">&#39;./temp_results/&#39;</span>
<span class="token comment"># 做召回评估的一个标志, 如果不进行评估就是直接使用全量数据进行召回</span>
metric_recall <span class="token operator">=</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="读取数据" tabindex="-1"><a class="header-anchor" href="#读取数据"><span>读取数据</span></a></h2><p>在一般的推荐系统比赛中读取数据部分主要分为三种模式， 不同的模式对应的不同的数据集：</p><ol><li>Debug模式： 这个的目的是帮助我们基于数据先搭建一个简易的baseline并跑通， 保证写的baseline代码没有什么问题。 由于推荐比赛的数据往往非常巨大， 如果一上来直接采用全部的数据进行分析，搭建baseline框架， 往往会带来时间和设备上的损耗， <strong>所以这时候我们往往需要从海量数据的训练集中随机抽取一部分样本来进行调试(train_click_log_sample)</strong>， 先跑通一个baseline。</li><li>线下验证模式： 这个的目的是帮助我们在线下基于已有的训练集数据， 来选择好合适的模型和一些超参数。 <strong>所以我们这一块只需要加载整个训练集(train_click_log)</strong>， 然后把整个训练集再分成训练集和验证集。 训练集是模型的训练数据， 验证集部分帮助我们调整模型的参数和其他的一些超参数。</li><li>线上模式： 我们用debug模式搭建起一个推荐系统比赛的baseline， 用线下验证模式选择好了模型和一些超参数， 这一部分就是真正的对于给定的测试集进行预测， 提交到线上， <strong>所以这一块使用的训练数据集是全量的数据集(train_click_log+test_click_log)</strong></li></ol><p>下面就分别对这三种不同的数据读取模式先建立不同的代导入函数， 方便后面针对不同的模式下导入数据。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># debug模式： 从训练集中划出一部分数据来调试代码</span>
<span class="token keyword">def</span> <span class="token function">get_all_click_sample</span><span class="token punctuation">(</span>data_path<span class="token punctuation">,</span> sample_nums<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
        训练集中采样一部分数据调试
        data_path: 原数据的存储路径
        sample_nums: 采样数目（这里由于机器的内存限制，可以采样用户做）
    &quot;&quot;&quot;</span>
    all_click <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>data_path <span class="token operator">+</span> <span class="token string">&#39;train_click_log.csv&#39;</span><span class="token punctuation">)</span>
    all_user_ids <span class="token operator">=</span> all_click<span class="token punctuation">.</span>user_id<span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span>

    sample_user_ids <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>all_user_ids<span class="token punctuation">,</span> size<span class="token operator">=</span>sample_nums<span class="token punctuation">,</span> replace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> 
    all_click <span class="token operator">=</span> all_click<span class="token punctuation">[</span>all_click<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>sample_user_ids<span class="token punctuation">)</span><span class="token punctuation">]</span>
    
    all_click <span class="token operator">=</span> all_click<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_timestamp&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> all_click

<span class="token comment"># 读取点击数据，这里分成线上和线下，如果是为了获取线上提交结果应该讲测试集中的点击数据合并到总的数据中</span>
<span class="token comment"># 如果是为了线下验证模型的有效性或者特征的有效性，可以只使用训练集</span>
<span class="token keyword">def</span> <span class="token function">get_all_click_df</span><span class="token punctuation">(</span>data_path<span class="token operator">=</span><span class="token string">&#39;./data_raw/&#39;</span><span class="token punctuation">,</span> offline<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> offline<span class="token punctuation">:</span>
        all_click <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>data_path <span class="token operator">+</span> <span class="token string">&#39;train_click_log.csv&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        trn_click <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>data_path <span class="token operator">+</span> <span class="token string">&#39;train_click_log.csv&#39;</span><span class="token punctuation">)</span>
        tst_click <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>data_path <span class="token operator">+</span> <span class="token string">&#39;testA_click_log.csv&#39;</span><span class="token punctuation">)</span>

        all_click <span class="token operator">=</span> trn_click<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tst_click<span class="token punctuation">)</span>
    
    all_click <span class="token operator">=</span> all_click<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_timestamp&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> all_click
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 读取文章的基本属性</span>
<span class="token keyword">def</span> <span class="token function">get_item_info_df</span><span class="token punctuation">(</span>data_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    item_info_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>data_path <span class="token operator">+</span> <span class="token string">&#39;articles.csv&#39;</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 为了方便与训练集中的click_article_id拼接，需要把article_id修改成click_article_id</span>
    item_info_df <span class="token operator">=</span> item_info_df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;article_id&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> item_info_df
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 读取文章的Embedding数据</span>
<span class="token keyword">def</span> <span class="token function">get_item_emb_dict</span><span class="token punctuation">(</span>data_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    item_emb_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>data_path <span class="token operator">+</span> <span class="token string">&#39;articles_emb.csv&#39;</span><span class="token punctuation">)</span>
    
    item_emb_cols <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> item_emb_df<span class="token punctuation">.</span>columns <span class="token keyword">if</span> <span class="token string">&#39;emb&#39;</span> <span class="token keyword">in</span> x<span class="token punctuation">]</span>
    item_emb_np <span class="token operator">=</span> np<span class="token punctuation">.</span>ascontiguousarray<span class="token punctuation">(</span>item_emb_df<span class="token punctuation">[</span>item_emb_cols<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># 进行归一化</span>
    item_emb_np <span class="token operator">=</span> item_emb_np <span class="token operator">/</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>item_emb_np<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    item_emb_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>item_emb_df<span class="token punctuation">[</span><span class="token string">&#39;article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item_emb_np<span class="token punctuation">)</span><span class="token punctuation">)</span>
    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>item_emb_dict<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;item_content_emb.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> item_emb_dict
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>max_min_scaler <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token operator">-</span>np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-</span>np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 采样数据</span>
<span class="token comment"># all_click_df = get_all_click_sample(data_path)</span>

<span class="token comment"># 全量训练集</span>
all_click_df <span class="token operator">=</span> get_all_click_df<span class="token punctuation">(</span>offline<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token comment"># 对时间戳进行归一化,用于在关联规则的时候计算权重</span>
all_click_df<span class="token punctuation">[</span><span class="token string">&#39;click_timestamp&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> all_click_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;click_timestamp&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>max_min_scaler<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>item_info_df <span class="token operator">=</span> get_item_info_df<span class="token punctuation">(</span>data_path<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>item_emb_dict <span class="token operator">=</span> get_item_emb_dict<span class="token punctuation">(</span>data_path<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="工具函数" tabindex="-1"><a class="header-anchor" href="#工具函数"><span>工具函数</span></a></h2><h3 id="获取用户-文章-时间函数" tabindex="-1"><a class="header-anchor" href="#获取用户-文章-时间函数"><span>获取用户-文章-时间函数</span></a></h3><p>这个在基于关联规则的用户协同过滤的时候会用到</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 根据点击时间获取用户的点击文章序列   {user1: {item1: time1, item2: time2..}...}</span>
<span class="token keyword">def</span> <span class="token function">get_user_item_time</span><span class="token punctuation">(</span>click_df<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    click_df <span class="token operator">=</span> click_df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">&#39;click_timestamp&#39;</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">make_item_time_pair</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">&#39;click_timestamp&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    user_item_time_df <span class="token operator">=</span> click_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_timestamp&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> make_item_time_pair<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>\\
                                                            <span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">&#39;item_time_list&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    user_item_time_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>user_item_time_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> user_item_time_df<span class="token punctuation">[</span><span class="token string">&#39;item_time_list&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> user_item_time_dict
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取文章-用户-时间函数" tabindex="-1"><a class="header-anchor" href="#获取文章-用户-时间函数"><span>获取文章-用户-时间函数</span></a></h3><p>这个在基于关联规则的文章协同过滤的时候会用到</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 根据时间获取商品被点击的用户序列  {item1: {user1: time1, user2: time2...}...}</span>
<span class="token comment"># 这里的时间是用户点击当前商品的时间，好像没有直接的关系。</span>
<span class="token keyword">def</span> <span class="token function">get_item_user_time_dict</span><span class="token punctuation">(</span>click_df<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">make_user_time_pair</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">&#39;click_timestamp&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    click_df <span class="token operator">=</span> click_df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">&#39;click_timestamp&#39;</span><span class="token punctuation">)</span>
    item_user_time_df <span class="token operator">=</span> click_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_timestamp&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> make_user_time_pair<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>\\
                                                            <span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">&#39;user_time_list&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    
    item_user_time_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>item_user_time_df<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item_user_time_df<span class="token punctuation">[</span><span class="token string">&#39;user_time_list&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> item_user_time_dict
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取历史和最后一次点击" tabindex="-1"><a class="header-anchor" href="#获取历史和最后一次点击"><span>获取历史和最后一次点击</span></a></h3><p>这个在评估召回结果， 特征工程和制作标签转成监督学习测试集的时候回用到</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 获取当前数据的历史点击和最后一次点击</span>
<span class="token keyword">def</span> <span class="token function">get_hist_and_last_click</span><span class="token punctuation">(</span>all_click<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    all_click <span class="token operator">=</span> all_click<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_timestamp&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    click_last_df <span class="token operator">=</span> all_click<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token comment"># 如果用户只有一个点击，hist为空了，会导致训练的时候这个用户不可见，此时默认泄露一下</span>
    <span class="token keyword">def</span> <span class="token function">hist_func</span><span class="token punctuation">(</span>user_df<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>user_df<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> user_df
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> user_df<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

    click_hist_df <span class="token operator">=</span> all_click<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>hist_func<span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> click_hist_df<span class="token punctuation">,</span> click_last_df
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取文章属性特征" tabindex="-1"><a class="header-anchor" href="#获取文章属性特征"><span>获取文章属性特征</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 获取文章id对应的基本属性，保存成字典的形式，方便后面召回阶段，冷启动阶段直接使用</span>
<span class="token keyword">def</span> <span class="token function">get_item_info_dict</span><span class="token punctuation">(</span>item_info_df<span class="token punctuation">)</span><span class="token punctuation">:</span>
    max_min_scaler <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token operator">-</span>np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-</span>np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
    item_info_df<span class="token punctuation">[</span><span class="token string">&#39;created_at_ts&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> item_info_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;created_at_ts&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>max_min_scaler<span class="token punctuation">)</span>
    
    item_type_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>item_info_df<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item_info_df<span class="token punctuation">[</span><span class="token string">&#39;category_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    item_words_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>item_info_df<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item_info_df<span class="token punctuation">[</span><span class="token string">&#39;words_count&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    item_created_time_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>item_info_df<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item_info_df<span class="token punctuation">[</span><span class="token string">&#39;created_at_ts&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> item_type_dict<span class="token punctuation">,</span> item_words_dict<span class="token punctuation">,</span> item_created_time_dict
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取用户历史点击的文章信息" tabindex="-1"><a class="header-anchor" href="#获取用户历史点击的文章信息"><span>获取用户历史点击的文章信息</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_user_hist_item_info_dict</span><span class="token punctuation">(</span>all_click<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    <span class="token comment"># 获取user_id对应的用户历史点击文章类型的集合字典</span>
    user_hist_item_typs <span class="token operator">=</span> all_click<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;category_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>
    user_hist_item_typs_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>user_hist_item_typs<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> user_hist_item_typs<span class="token punctuation">[</span><span class="token string">&#39;category_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 获取user_id对应的用户点击文章的集合</span>
    user_hist_item_ids_dict <span class="token operator">=</span> all_click<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>
    user_hist_item_ids_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>user_hist_item_ids_dict<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> user_hist_item_ids_dict<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 获取user_id对应的用户历史点击的文章的平均字数字典</span>
    user_hist_item_words <span class="token operator">=</span> all_click<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;words_count&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token string">&#39;mean&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>
    user_hist_item_words_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>user_hist_item_words<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> user_hist_item_words<span class="token punctuation">[</span><span class="token string">&#39;words_count&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 获取user_id对应的用户最后一次点击的文章的创建时间</span>
    all_click_ <span class="token operator">=</span> all_click<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">&#39;click_timestamp&#39;</span><span class="token punctuation">)</span>
    user_last_item_created_time <span class="token operator">=</span> all_click_<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;created_at_ts&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    max_min_scaler <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token operator">-</span>np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-</span>np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
    user_last_item_created_time<span class="token punctuation">[</span><span class="token string">&#39;created_at_ts&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> user_last_item_created_time<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;created_at_ts&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>max_min_scaler<span class="token punctuation">)</span>
    
    user_last_item_created_time_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>user_last_item_created_time<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \\
                                                user_last_item_created_time<span class="token punctuation">[</span><span class="token string">&#39;created_at_ts&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> user_hist_item_typs_dict<span class="token punctuation">,</span> user_hist_item_ids_dict<span class="token punctuation">,</span> user_hist_item_words_dict<span class="token punctuation">,</span> user_last_item_created_time_dict
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取点击次数最多的top-k个文章" tabindex="-1"><a class="header-anchor" href="#获取点击次数最多的top-k个文章"><span>获取点击次数最多的Top-k个文章</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 获取近期点击最多的文章</span>
<span class="token keyword">def</span> <span class="token function">get_item_topk_click</span><span class="token punctuation">(</span>click_df<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
    topk_click <span class="token operator">=</span> click_df<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span>
    <span class="token keyword">return</span> topk_click
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="定义多路召回字典" tabindex="-1"><a class="header-anchor" href="#定义多路召回字典"><span>定义多路召回字典</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 获取文章的属性信息，保存成字典的形式方便查询</span>
item_type_dict<span class="token punctuation">,</span> item_words_dict<span class="token punctuation">,</span> item_created_time_dict <span class="token operator">=</span> get_item_info_dict<span class="token punctuation">(</span>item_info_df<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 定义一个多路召回的字典，将各路召回的结果都保存在这个字典当中</span>
user_multi_recall_dict <span class="token operator">=</span>  <span class="token punctuation">{</span><span class="token string">&#39;itemcf_sim_itemcf_recall&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                           <span class="token string">&#39;embedding_sim_item_recall&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                           <span class="token string">&#39;youtubednn_recall&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                           <span class="token string">&#39;youtubednn_usercf_recall&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
                           <span class="token string">&#39;cold_start_recall&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 提取最后一次点击作为召回评估，如果不需要做召回评估直接使用全量的训练集进行召回(线下验证模型)</span>
<span class="token comment"># 如果不是召回评估，直接使用全量数据进行召回，不用将最后一次提取出来</span>
trn_hist_click_df<span class="token punctuation">,</span> trn_last_click_df <span class="token operator">=</span> get_hist_and_last_click<span class="token punctuation">(</span>all_click_df<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="召回效果评估" tabindex="-1"><a class="header-anchor" href="#召回效果评估"><span>召回效果评估</span></a></h3><p>做完了召回有时候也需要对当前的召回方法或者参数进行调整以达到更好的召回效果，因为召回的结果决定了最终排序的上限，下面也会提供一个召回评估的方法</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 依次评估召回的前10, 20, 30, 40, 50个文章中的击中率</span>
<span class="token keyword">def</span> <span class="token function">metrics_recall</span><span class="token punctuation">(</span>user_recall_items_dict<span class="token punctuation">,</span> trn_last_click_df<span class="token punctuation">,</span> topk<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    last_click_item_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>trn_last_click_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> trn_last_click_df<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    user_num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>user_recall_items_dict<span class="token punctuation">)</span>
    
    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> topk<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        hit_num <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> user<span class="token punctuation">,</span> item_list <span class="token keyword">in</span> user_recall_items_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 获取前k个召回的结果</span>
            tmp_recall_items <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> user_recall_items_dict<span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> last_click_item_dict<span class="token punctuation">[</span>user<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token builtin">set</span><span class="token punctuation">(</span>tmp_recall_items<span class="token punctuation">)</span><span class="token punctuation">:</span>
                hit_num <span class="token operator">+=</span> <span class="token number">1</span>
        
        hit_rate <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>hit_num <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> user_num<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39; topk: &#39;</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token string">&#39; : &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hit_num: &#39;</span><span class="token punctuation">,</span> hit_num<span class="token punctuation">,</span> <span class="token string">&#39;hit_rate: &#39;</span><span class="token punctuation">,</span> hit_rate<span class="token punctuation">,</span> <span class="token string">&#39;user_num : &#39;</span><span class="token punctuation">,</span> user_num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="计算相似性矩阵" tabindex="-1"><a class="header-anchor" href="#计算相似性矩阵"><span>计算相似性矩阵</span></a></h2><p>这一部分主要是通过协同过滤以及向量检索得到相似性矩阵，相似性矩阵主要分为user2user和item2item，下面依次获取基于itemCF的item2item的相似性矩阵。</p><h3 id="itemcf-i2i-sim" tabindex="-1"><a class="header-anchor" href="#itemcf-i2i-sim"><span>itemCF i2i_sim</span></a></h3><p>借鉴KDD2020的去偏商品推荐，在计算item2item相似性矩阵时，使用关联规则，使得计算的文章的相似性还考虑到了:</p><ol><li>用户点击的时间权重</li><li>用户点击的顺序权重</li><li>文章创建的时间权重</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">itemcf_sim</span><span class="token punctuation">(</span>df<span class="token punctuation">,</span> item_created_time_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
        文章与文章之间的相似性矩阵计算
        :param df: 数据表
        :item_created_time_dict:  文章创建时间的字典
        return : 文章与文章的相似性矩阵
        
        思路: 基于物品的协同过滤(详细请参考上一期推荐系统基础的组队学习) + 关联规则
    &quot;&quot;&quot;</span>
    
    user_item_time_dict <span class="token operator">=</span> get_user_item_time<span class="token punctuation">(</span>df<span class="token punctuation">)</span>
    
    <span class="token comment"># 计算物品相似度</span>
    i2i_sim <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    item_cnt <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> user<span class="token punctuation">,</span> item_time_list <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>user_item_time_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 在基于商品的协同过滤优化的时候可以考虑时间因素</span>
        <span class="token keyword">for</span> loc1<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> i_click_time<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>item_time_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
            item_cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
            i2i_sim<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> loc2<span class="token punctuation">,</span> <span class="token punctuation">(</span>j<span class="token punctuation">,</span> j_click_time<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>item_time_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">continue</span>
                    
                <span class="token comment"># 考虑文章的正向顺序点击和反向顺序点击    </span>
                loc_alpha <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token keyword">if</span> loc2 <span class="token operator">&gt;</span> loc1 <span class="token keyword">else</span> <span class="token number">0.7</span>
                <span class="token comment"># 位置信息权重，其中的参数可以调节</span>
                loc_weight <span class="token operator">=</span> loc_alpha <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0.9</span> <span class="token operator">**</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>loc2 <span class="token operator">-</span> loc1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment"># 点击时间权重，其中的参数可以调节</span>
                click_time_weight <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token number">0.7</span> <span class="token operator">**</span> np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>i_click_time <span class="token operator">-</span> j_click_time<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment"># 两篇文章创建时间的权重，其中的参数可以调节</span>
                created_time_weight <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token number">0.8</span> <span class="token operator">**</span> np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>item_created_time_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> item_created_time_dict<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                i2i_sim<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token comment"># 考虑多种因素的权重计算最终的文章之间的相似度</span>
                i2i_sim<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> loc_weight <span class="token operator">*</span> click_time_weight <span class="token operator">*</span> created_time_weight <span class="token operator">/</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>item_time_list<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
                
    i2i_sim_ <span class="token operator">=</span> i2i_sim<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> related_items <span class="token keyword">in</span> i2i_sim<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j<span class="token punctuation">,</span> wij <span class="token keyword">in</span> related_items<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            i2i_sim_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> wij <span class="token operator">/</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>item_cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> item_cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 将得到的相似性矩阵保存到本地</span>
    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>i2i_sim_<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;itemcf_i2i_sim.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> i2i_sim_
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>i2i_sim <span class="token operator">=</span> itemcf_sim<span class="token punctuation">(</span>all_click_df<span class="token punctuation">,</span> item_created_time_dict<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>100%|██████████| 250000/250000 [14:20&lt;00:00, 290.38it/s]
</code></pre><h3 id="usercf-u2u-sim" tabindex="-1"><a class="header-anchor" href="#usercf-u2u-sim"><span>userCF u2u_sim</span></a></h3><p>在计算用户之间的相似度的时候，也可以使用一些简单的关联规则，比如用户活跃度权重，这里将用户的点击次数作为用户活跃度的指标</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_user_activate_degree_dict</span><span class="token punctuation">(</span>all_click_df<span class="token punctuation">)</span><span class="token punctuation">:</span>
    all_click_df_ <span class="token operator">=</span> all_click_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 用户活跃度归一化</span>
    mm <span class="token operator">=</span> MinMaxScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>
    all_click_df_<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> mm<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>all_click_df_<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    user_activate_degree_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>all_click_df_<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> all_click_df_<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> user_activate_degree_dict
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">usercf_sim</span><span class="token punctuation">(</span>all_click_df<span class="token punctuation">,</span> user_activate_degree_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
        用户相似性矩阵计算
        :param all_click_df: 数据表
        :param user_activate_degree_dict: 用户活跃度的字典
        return 用户相似性矩阵
        
        思路: 基于用户的协同过滤(详细请参考上一期推荐系统基础的组队学习) + 关联规则
    &quot;&quot;&quot;</span>
    item_user_time_dict <span class="token operator">=</span> get_item_user_time_dict<span class="token punctuation">(</span>all_click_df<span class="token punctuation">)</span>
    
    u2u_sim <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    user_cnt <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> item<span class="token punctuation">,</span> user_time_list <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>item_user_time_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> u<span class="token punctuation">,</span> click_time <span class="token keyword">in</span> user_time_list<span class="token punctuation">:</span>
            user_cnt<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
            u2u_sim<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>u<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> v<span class="token punctuation">,</span> click_time <span class="token keyword">in</span> user_time_list<span class="token punctuation">:</span>
                u2u_sim<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> u <span class="token operator">==</span> v<span class="token punctuation">:</span>
                    <span class="token keyword">continue</span>
                <span class="token comment"># 用户平均活跃度作为活跃度的权重，这里的式子也可以改善</span>
                activate_weight <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">*</span> <span class="token punctuation">(</span>user_activate_degree_dict<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> user_activate_degree_dict<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>   
                u2u_sim<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+=</span> activate_weight <span class="token operator">/</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>user_time_list<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    
    u2u_sim_ <span class="token operator">=</span> u2u_sim<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> u<span class="token punctuation">,</span> related_users <span class="token keyword">in</span> u2u_sim<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> v<span class="token punctuation">,</span> wij <span class="token keyword">in</span> related_users<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            u2u_sim_<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> wij <span class="token operator">/</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>user_cnt<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">*</span> user_cnt<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 将得到的相似性矩阵保存到本地</span>
    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>u2u_sim_<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;usercf_u2u_sim.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> u2u_sim_
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 由于usercf计算时候太耗费内存了，这里就不直接运行了</span>
<span class="token comment"># 如果是采样的话，是可以运行的</span>
user_activate_degree_dict <span class="token operator">=</span> get_user_activate_degree_dict<span class="token punctuation">(</span>all_click_df<span class="token punctuation">)</span>
u2u_sim <span class="token operator">=</span> usercf_sim<span class="token punctuation">(</span>all_click_df<span class="token punctuation">,</span> user_activate_degree_dict<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="item-embedding-sim" tabindex="-1"><a class="header-anchor" href="#item-embedding-sim"><span>item embedding sim</span></a></h3><p>使用Embedding计算item之间的相似度是为了后续冷启动的时候可以获取未出现在点击数据中的文章，后面有对冷启动专门的介绍，这里简单的说一下faiss。</p><p>aiss是Facebook的AI团队开源的一套用于做聚类或者相似性搜索的软件库，底层是用C++实现。Faiss因为超级优越的性能，被广泛应用于推荐相关的业务当中.</p><p>faiss工具包一般使用在推荐系统中的向量召回部分。在做向量召回的时候要么是u2u,u2i或者i2i，这里的u和i指的是user和item.我们知道在实际的场景中user和item的数量都是海量的，我们最容易想到的基于向量相似度的召回就是使用两层循环遍历user列表或者item列表计算两个向量的相似度，但是这样做在面对海量数据是不切实际的，faiss就是用来加速计算某个查询向量最相似的topk个索引向量。</p><p><strong>faiss查询的原理：</strong></p><p>faiss使用了PCA和PQ(Product quantization乘积量化)两种技术进行向量压缩和编码，当然还使用了其他的技术进行优化，但是PCA和PQ是其中最核心部分。</p>`,60),k=n("br",null,null,-1),r={href:"https://www.cnblogs.com/pinard/p/6239403.html",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m={href:"http://www.fabwrite.com/productquantization",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,[n("strong",null,"faiss使用")],-1),v={href:"https://github.com/facebookresearch/faiss/wiki/Getting-started",target:"_blank",rel:"noopener noreferrer"},b=p(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 向量检索相似度计算</span>
<span class="token comment"># topk指的是每个item, faiss搜索后返回最相似的topk个item</span>
<span class="token keyword">def</span> <span class="token function">embdding_sim</span><span class="token punctuation">(</span>click_df<span class="token punctuation">,</span> item_emb_df<span class="token punctuation">,</span> save_path<span class="token punctuation">,</span> topk<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
        基于内容的文章embedding相似性矩阵计算
        :param click_df: 数据表
        :param item_emb_df: 文章的embedding
        :param save_path: 保存路径
        :patam topk: 找最相似的topk篇
        return 文章相似性矩阵
        
        思路: 对于每一篇文章， 基于embedding的相似性返回topk个与其最相似的文章， 只不过由于文章数量太多，这里用了faiss进行加速
    &quot;&quot;&quot;</span>
    
    <span class="token comment"># 文章索引与文章id的字典映射</span>
    item_idx_2_rawid_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>item_emb_df<span class="token punctuation">.</span>index<span class="token punctuation">,</span> item_emb_df<span class="token punctuation">[</span><span class="token string">&#39;article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    item_emb_cols <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> item_emb_df<span class="token punctuation">.</span>columns <span class="token keyword">if</span> <span class="token string">&#39;emb&#39;</span> <span class="token keyword">in</span> x<span class="token punctuation">]</span>
    item_emb_np <span class="token operator">=</span> np<span class="token punctuation">.</span>ascontiguousarray<span class="token punctuation">(</span>item_emb_df<span class="token punctuation">[</span>item_emb_cols<span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
    <span class="token comment"># 向量进行单位化</span>
    item_emb_np <span class="token operator">=</span> item_emb_np <span class="token operator">/</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>item_emb_np<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 建立faiss索引</span>
    item_index <span class="token operator">=</span> faiss<span class="token punctuation">.</span>IndexFlatIP<span class="token punctuation">(</span>item_emb_np<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    item_index<span class="token punctuation">.</span>add<span class="token punctuation">(</span>item_emb_np<span class="token punctuation">)</span>
    <span class="token comment"># 相似度查询，给每个索引位置上的向量返回topk个item以及相似度</span>
    sim<span class="token punctuation">,</span> idx <span class="token operator">=</span> item_index<span class="token punctuation">.</span>search<span class="token punctuation">(</span>item_emb_np<span class="token punctuation">,</span> topk<span class="token punctuation">)</span> <span class="token comment"># 返回的是列表</span>
    
    <span class="token comment"># 将向量检索的结果保存成原始id的对应关系</span>
    item_sim_dict <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> target_idx<span class="token punctuation">,</span> sim_value_list<span class="token punctuation">,</span> rele_idx_list <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>item_emb_np<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sim<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        target_raw_id <span class="token operator">=</span> item_idx_2_rawid_dict<span class="token punctuation">[</span>target_idx<span class="token punctuation">]</span>
        <span class="token comment"># 从1开始是为了去掉商品本身, 所以最终获得的相似商品只有topk-1</span>
        <span class="token keyword">for</span> rele_idx<span class="token punctuation">,</span> sim_value <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>rele_idx_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sim_value_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
            rele_raw_id <span class="token operator">=</span> item_idx_2_rawid_dict<span class="token punctuation">[</span>rele_idx<span class="token punctuation">]</span>
            item_sim_dict<span class="token punctuation">[</span>target_raw_id<span class="token punctuation">]</span><span class="token punctuation">[</span>rele_raw_id<span class="token punctuation">]</span> <span class="token operator">=</span> item_sim_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target_raw_id<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>rele_raw_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> sim_value
    
    <span class="token comment"># 保存i2i相似度矩阵</span>
    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>item_sim_dict<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;emb_i2i_sim.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   
    
    <span class="token keyword">return</span> item_sim_dict
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>item_emb_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>data_path <span class="token operator">+</span> <span class="token string">&#39;/articles_emb.csv&#39;</span><span class="token punctuation">)</span>
emb_i2i_sim <span class="token operator">=</span> embdding_sim<span class="token punctuation">(</span>all_click_df<span class="token punctuation">,</span> item_emb_df<span class="token punctuation">,</span> save_path<span class="token punctuation">,</span> topk<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># topk可以自行设置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>364047it [00:23, 15292.14it/s]
</code></pre><h2 id="召回" tabindex="-1"><a class="header-anchor" href="#召回"><span>召回</span></a></h2><p>这个就是我们开篇提到的那个问题， 面的36万篇文章， 20多万用户的推荐， 我们又有哪些策略来缩减问题的规模？ 我们就可以再召回阶段筛选出用户对于点击文章的候选集合， 从而降低问题的规模。召回常用的策略：</p><ul><li>Youtube DNN 召回</li><li>基于文章的召回 <ul><li>文章的协同过滤</li><li>基于文章embedding的召回</li></ul></li><li>基于用户的召回 <ul><li>用户的协同过滤</li><li>用户embedding</li></ul></li></ul><p>上面的各种召回方式一部分在基于用户已经看得文章的基础上去召回与这些文章相似的一些文章， 而这个相似性的计算方式不同， 就得到了不同的召回方式， 比如文章的协同过滤， 文章内容的embedding等。还有一部分是根据用户的相似性进行推荐，对于某用户推荐与其相似的其他用户看过的文章，比如用户的协同过滤和用户embedding。 还有一种思路是类似矩阵分解的思路，先计算出用户和文章的embedding之后，就可以直接算用户和文章的相似度， 根据这个相似度进行推荐， 比如YouTube DNN。 我们下面详细来看一下每一个召回方法：</p><h3 id="youtubednn召回" tabindex="-1"><a class="header-anchor" href="#youtubednn召回"><span>YoutubeDNN召回</span></a></h3><p><strong>(这一步是直接获取用户召回的候选文章列表)</strong></p>`,9),g={href:"https://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/45530.pdf",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,[n("strong",null,"Youtubednn召回架构")],-1),y=n("figure",null,[n("img",{src:"https://img-blog.csdnimg.cn/img_convert/59576beef26f07e6e94fd2a1d73929bd.png",alt:"image-20201111160516562",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20201111160516562")],-1),f=n("p",null,"关于YoutubeDNN原理和应用推荐看王喆的两篇博客：",-1),w={href:"https://zhuanlan.zhihu.com/p/52169807",target:"_blank",rel:"noopener noreferrer"},x={href:"https://zhuanlan.zhihu.com/p/52504407",target:"_blank",rel:"noopener noreferrer"},q=p(`<p><strong>参考文献:</strong></p><ol><li>https://zhuanlan.zhihu.com/p/52169807 (YouTubeDNN原理)</li><li>https://zhuanlan.zhihu.com/p/26306795 (Word2Vec知乎众赞文章) --- word2vec放到排序中的w2v的介绍部分</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 获取双塔召回时的训练验证数据</span>
<span class="token comment"># negsample指的是通过滑窗构建样本的时候，负样本的数量</span>
<span class="token keyword">def</span> <span class="token function">gen_data_set</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> negsample<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    data<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">&quot;click_timestamp&quot;</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    item_ids <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span>

    train_set <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    test_set <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> reviewerID<span class="token punctuation">,</span> hist <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>data<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        pos_list <span class="token operator">=</span> hist<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        <span class="token keyword">if</span> negsample <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            candidate_set <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>item_ids<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>pos_list<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 用户没看过的文章里面选择负样本</span>
            neg_list <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>candidate_set<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>pos_list<span class="token punctuation">)</span><span class="token operator">*</span>negsample<span class="token punctuation">,</span>replace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 对于每个正样本，选择n个负样本</span>
            
        <span class="token comment"># 长度只有一个的时候，需要把这条数据也放到训练集中，不然的话最终学到的embedding就会有缺失</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pos_list<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            train_set<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>reviewerID<span class="token punctuation">,</span> <span class="token punctuation">[</span>pos_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>pos_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            test_set<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>reviewerID<span class="token punctuation">,</span> <span class="token punctuation">[</span>pos_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>pos_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            
        <span class="token comment"># 滑窗构造正负样本</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pos_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            hist <span class="token operator">=</span> pos_list<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span>
            
            <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pos_list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
                train_set<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>reviewerID<span class="token punctuation">,</span> hist<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>hist<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 正样本 [user_id, his_item, pos_item, label, len(his_item)]</span>
                <span class="token keyword">for</span> negi <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>negsample<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    train_set<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>reviewerID<span class="token punctuation">,</span> hist<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> neg_list<span class="token punctuation">[</span>i<span class="token operator">*</span>negsample<span class="token operator">+</span>negi<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>hist<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 负样本 [user_id, his_item, neg_item, label, len(his_item)]</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token comment"># 将最长的那一个序列长度作为测试数据</span>
                test_set<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>reviewerID<span class="token punctuation">,</span> hist<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>hist<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                
    random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>train_set<span class="token punctuation">)</span>
    random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>test_set<span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> train_set<span class="token punctuation">,</span> test_set

<span class="token comment"># 将输入的数据进行padding，使得序列特征的长度都一致</span>
<span class="token keyword">def</span> <span class="token function">gen_model_input</span><span class="token punctuation">(</span>train_set<span class="token punctuation">,</span>user_profile<span class="token punctuation">,</span>seq_max_len<span class="token punctuation">)</span><span class="token punctuation">:</span>

    train_uid <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> train_set<span class="token punctuation">]</span><span class="token punctuation">)</span>
    train_seq <span class="token operator">=</span> <span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> train_set<span class="token punctuation">]</span>
    train_iid <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> train_set<span class="token punctuation">]</span><span class="token punctuation">)</span>
    train_label <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> train_set<span class="token punctuation">]</span><span class="token punctuation">)</span>
    train_hist_len <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> train_set<span class="token punctuation">]</span><span class="token punctuation">)</span>

    train_seq_pad <span class="token operator">=</span> pad_sequences<span class="token punctuation">(</span>train_seq<span class="token punctuation">,</span> maxlen<span class="token operator">=</span>seq_max_len<span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> truncating<span class="token operator">=</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
    train_model_input <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;user_id&quot;</span><span class="token punctuation">:</span> train_uid<span class="token punctuation">,</span> <span class="token string">&quot;click_article_id&quot;</span><span class="token punctuation">:</span> train_iid<span class="token punctuation">,</span> <span class="token string">&quot;hist_article_id&quot;</span><span class="token punctuation">:</span> train_seq_pad<span class="token punctuation">,</span>
                         <span class="token string">&quot;hist_len&quot;</span><span class="token punctuation">:</span> train_hist_len<span class="token punctuation">}</span>

    <span class="token keyword">return</span> train_model_input<span class="token punctuation">,</span> train_label
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">youtubednn_u2i_dict</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> topk<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    
    sparse_features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;click_article_id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user_id&quot;</span><span class="token punctuation">]</span>
    SEQ_LEN <span class="token operator">=</span> <span class="token number">30</span> <span class="token comment"># 用户点击序列的长度，短的填充，长的截断</span>
    
    user_profile_ <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;user_id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">)</span>
    item_profile_ <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;click_article_id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">)</span>  
    
    <span class="token comment"># 类别编码</span>
    features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;click_article_id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user_id&quot;</span><span class="token punctuation">]</span>
    feature_max_idx <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    
    <span class="token keyword">for</span> feature <span class="token keyword">in</span> features<span class="token punctuation">:</span>
        lbe <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>
        data<span class="token punctuation">[</span>feature<span class="token punctuation">]</span> <span class="token operator">=</span> lbe<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>data<span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">)</span>
        feature_max_idx<span class="token punctuation">[</span>feature<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
    
    <span class="token comment"># 提取user和item的画像，这里具体选择哪些特征还需要进一步的分析和考虑</span>
    user_profile <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;user_id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">)</span>
    item_profile <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;click_article_id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">)</span>  
    
    user_index_2_rawid <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>user_profile<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> user_profile_<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    item_index_2_rawid <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>item_profile<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item_profile_<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 划分训练和测试集</span>
    <span class="token comment"># 由于深度学习需要的数据量通常都是非常大的，所以为了保证召回的效果，往往会通过滑窗的形式扩充训练样本</span>
    train_set<span class="token punctuation">,</span> test_set <span class="token operator">=</span> gen_data_set<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token comment"># 整理输入数据，具体的操作可以看上面的函数</span>
    train_model_input<span class="token punctuation">,</span> train_label <span class="token operator">=</span> gen_model_input<span class="token punctuation">(</span>train_set<span class="token punctuation">,</span> user_profile<span class="token punctuation">,</span> SEQ_LEN<span class="token punctuation">)</span>
    test_model_input<span class="token punctuation">,</span> test_label <span class="token operator">=</span> gen_model_input<span class="token punctuation">(</span>test_set<span class="token punctuation">,</span> user_profile<span class="token punctuation">,</span> SEQ_LEN<span class="token punctuation">)</span>
    
    <span class="token comment"># 确定Embedding的维度</span>
    embedding_dim <span class="token operator">=</span> <span class="token number">16</span>
    
    <span class="token comment"># 将数据整理成模型可以直接输入的形式</span>
    user_feature_columns <span class="token operator">=</span> <span class="token punctuation">[</span>SparseFeat<span class="token punctuation">(</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> feature_max_idx<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> embedding_dim<span class="token punctuation">)</span><span class="token punctuation">,</span>
                            VarLenSparseFeat<span class="token punctuation">(</span>SparseFeat<span class="token punctuation">(</span><span class="token string">&#39;hist_article_id&#39;</span><span class="token punctuation">,</span> feature_max_idx<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> embedding_dim<span class="token punctuation">,</span>
                                                        embedding_name<span class="token operator">=</span><span class="token string">&quot;click_article_id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SEQ_LEN<span class="token punctuation">,</span> <span class="token string">&#39;mean&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hist_len&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span>
    item_feature_columns <span class="token operator">=</span> <span class="token punctuation">[</span>SparseFeat<span class="token punctuation">(</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> feature_max_idx<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> embedding_dim<span class="token punctuation">)</span><span class="token punctuation">]</span>
    
    <span class="token comment"># 模型的定义 </span>
    <span class="token comment"># num_sampled: 负采样时的样本数量</span>
    model <span class="token operator">=</span> YoutubeDNN<span class="token punctuation">(</span>user_feature_columns<span class="token punctuation">,</span> item_feature_columns<span class="token punctuation">,</span> num_sampled<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> user_dnn_hidden_units<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> embedding_dim<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 模型编译</span>
    model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">&quot;adam&quot;</span><span class="token punctuation">,</span> loss<span class="token operator">=</span>sampledsoftmaxloss<span class="token punctuation">)</span>  
    
    <span class="token comment"># 模型训练，这里可以定义验证集的比例，如果设置为0的话就是全量数据直接进行训练</span>
    history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_model_input<span class="token punctuation">,</span> train_label<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> validation_split<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 训练完模型之后,提取训练的Embedding，包括user端和item端</span>
    test_user_model_input <span class="token operator">=</span> test_model_input
    all_item_model_input <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;click_article_id&quot;</span><span class="token punctuation">:</span> item_profile<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">}</span>

    user_embedding_model <span class="token operator">=</span> Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span>model<span class="token punctuation">.</span>user_input<span class="token punctuation">,</span> outputs<span class="token operator">=</span>model<span class="token punctuation">.</span>user_embedding<span class="token punctuation">)</span>
    item_embedding_model <span class="token operator">=</span> Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span>model<span class="token punctuation">.</span>item_input<span class="token punctuation">,</span> outputs<span class="token operator">=</span>model<span class="token punctuation">.</span>item_embedding<span class="token punctuation">)</span>
    
    <span class="token comment"># 保存当前的item_embedding 和 user_embedding 排序的时候可能能够用到，但是需要注意保存的时候需要和原始的id对应</span>
    user_embs <span class="token operator">=</span> user_embedding_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_user_model_input<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">12</span><span class="token punctuation">)</span>
    item_embs <span class="token operator">=</span> item_embedding_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>all_item_model_input<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">12</span><span class="token punctuation">)</span>
    
    <span class="token comment"># embedding保存之前归一化一下</span>
    user_embs <span class="token operator">=</span> user_embs <span class="token operator">/</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>user_embs<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    item_embs <span class="token operator">=</span> item_embs <span class="token operator">/</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>item_embs<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 将Embedding转换成字典的形式方便查询</span>
    raw_user_id_emb_dict <span class="token operator">=</span> <span class="token punctuation">{</span>user_index_2_rawid<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span> \\
                                v <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>user_profile<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> user_embs<span class="token punctuation">)</span><span class="token punctuation">}</span>
    raw_item_id_emb_dict <span class="token operator">=</span> <span class="token punctuation">{</span>item_index_2_rawid<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span> \\
                                v <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>item_profile<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item_embs<span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token comment"># 将Embedding保存到本地</span>
    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>raw_user_id_emb_dict<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;user_youtube_emb.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>raw_item_id_emb_dict<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;item_youtube_emb.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token comment"># faiss紧邻搜索，通过user_embedding 搜索与其相似性最高的topk个item</span>
    index <span class="token operator">=</span> faiss<span class="token punctuation">.</span>IndexFlatIP<span class="token punctuation">(</span>embedding_dim<span class="token punctuation">)</span>
    <span class="token comment"># 上面已经进行了归一化，这里可以不进行归一化了</span>
<span class="token comment">#     faiss.normalize_L2(user_embs)</span>
<span class="token comment">#     faiss.normalize_L2(item_embs)</span>
    index<span class="token punctuation">.</span>add<span class="token punctuation">(</span>item_embs<span class="token punctuation">)</span> <span class="token comment"># 将item向量构建索引</span>
    sim<span class="token punctuation">,</span> idx <span class="token operator">=</span> index<span class="token punctuation">.</span>search<span class="token punctuation">(</span>np<span class="token punctuation">.</span>ascontiguousarray<span class="token punctuation">(</span>user_embs<span class="token punctuation">)</span><span class="token punctuation">,</span> topk<span class="token punctuation">)</span> <span class="token comment"># 通过user去查询最相似的topk个item</span>
    
    user_recall_items_dict <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> target_idx<span class="token punctuation">,</span> sim_value_list<span class="token punctuation">,</span> rele_idx_list <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>test_user_model_input<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sim<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        target_raw_id <span class="token operator">=</span> user_index_2_rawid<span class="token punctuation">[</span>target_idx<span class="token punctuation">]</span>
        <span class="token comment"># 从1开始是为了去掉商品本身, 所以最终获得的相似商品只有topk-1</span>
        <span class="token keyword">for</span> rele_idx<span class="token punctuation">,</span> sim_value <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>rele_idx_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sim_value_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
            rele_raw_id <span class="token operator">=</span> item_index_2_rawid<span class="token punctuation">[</span>rele_idx<span class="token punctuation">]</span>
            user_recall_items_dict<span class="token punctuation">[</span>target_raw_id<span class="token punctuation">]</span><span class="token punctuation">[</span>rele_raw_id<span class="token punctuation">]</span> <span class="token operator">=</span> user_recall_items_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target_raw_id<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\\
                                                                    <span class="token punctuation">.</span>get<span class="token punctuation">(</span>rele_raw_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> sim_value
            
    user_recall_items_dict <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> user_recall_items_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token comment"># 将召回的结果进行排序</span>
    
    <span class="token comment"># 保存召回的结果</span>
    <span class="token comment"># 这里是直接通过向量的方式得到了召回结果，相比于上面的召回方法，上面的只是得到了i2i及u2u的相似性矩阵，还需要进行协同过滤召回才能得到召回结果</span>
    <span class="token comment"># 可以直接对这个召回结果进行评估，为了方便可以统一写一个评估函数对所有的召回结果进行评估</span>
    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>user_recall_items_dict<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;youtube_u2i_dict.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> user_recall_items_dict
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 由于这里需要做召回评估，所以讲训练集中的最后一次点击都提取了出来</span>
<span class="token keyword">if</span> <span class="token keyword">not</span> metric_recall<span class="token punctuation">:</span>
    user_multi_recall_dict<span class="token punctuation">[</span><span class="token string">&#39;youtubednn_recall&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> youtubednn_u2i_dict<span class="token punctuation">(</span>all_click_df<span class="token punctuation">,</span> topk<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    trn_hist_click_df<span class="token punctuation">,</span> trn_last_click_df <span class="token operator">=</span> get_hist_and_last_click<span class="token punctuation">(</span>all_click_df<span class="token punctuation">)</span>
    user_multi_recall_dict<span class="token punctuation">[</span><span class="token string">&#39;youtubednn_recall&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> youtubednn_u2i_dict<span class="token punctuation">(</span>trn_hist_click_df<span class="token punctuation">,</span> topk<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>
    <span class="token comment"># 召回效果评估</span>
    metrics_recall<span class="token punctuation">(</span>user_multi_recall_dict<span class="token punctuation">[</span><span class="token string">&#39;youtubednn_recall&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> trn_last_click_df<span class="token punctuation">,</span> topk<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>100%|██████████| 250000/250000 [02:02&lt;00:00, 2038.57it/s]


WARNING:tensorflow:From /home/ryluo/anaconda3/lib/python3.6/site-packages/tensorflow/python/keras/initializers.py:143: calling RandomNormal.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.
Instructions for updating:
Call initializer instance with the dtype argument instead of passing it to the constructor
WARNING:tensorflow:From /home/ryluo/anaconda3/lib/python3.6/site-packages/tensorflow/python/autograph/impl/api.py:253: calling reduce_sum_v1 (from tensorflow.python.ops.math_ops) with keep_dims is deprecated and will be removed in a future version.
Instructions for updating:
keep_dims is deprecated, use keepdims instead
WARNING:tensorflow:From /home/ryluo/anaconda3/lib/python3.6/site-packages/tensorflow/python/autograph/impl/api.py:253: div (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Deprecated in favor of operator or tf.math.divide.
WARNING:tensorflow:From /home/ryluo/anaconda3/lib/python3.6/site-packages/tensorflow/python/ops/init_ops.py:1288: calling VarianceScaling.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.
Instructions for updating:
Call initializer instance with the dtype argument instead of passing it to the constructor
1149673/1149673 [==============================] - 216s 188us/sample - loss: 0.1326


250000it [00:32, 7720.75it/s]
</code></pre><h3 id="itemcf-recall" tabindex="-1"><a class="header-anchor" href="#itemcf-recall"><span>itemCF recall</span></a></h3><p>上面已经通过协同过滤，Embedding检索的方式得到了文章的相似度矩阵，下面使用协同过滤的思想，给用户召回与其历史文章相似的文章。 这里在召回的时候，也是用了关联规则的方式：</p><ol><li>考虑相似文章与历史点击文章顺序的权重(细节看代码)</li><li>考虑文章创建时间的权重，也就是考虑相似文章与历史点击文章创建时间差的权重</li><li>考虑文章内容相似度权重(使用Embedding计算相似文章相似度，但是这里需要注意，在Embedding的时候并没有计算所有商品两两之间的相似度，所以相似的文章与历史点击文章不存在相似度，需要做特殊处理)</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 基于商品的召回i2i</span>
<span class="token keyword">def</span> <span class="token function">item_based_recommend</span><span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> user_item_time_dict<span class="token punctuation">,</span> i2i_sim<span class="token punctuation">,</span> sim_item_topk<span class="token punctuation">,</span> recall_item_num<span class="token punctuation">,</span> item_topk_click<span class="token punctuation">,</span> item_created_time_dict<span class="token punctuation">,</span> emb_i2i_sim<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
        基于文章协同过滤的召回
        :param user_id: 用户id
        :param user_item_time_dict: 字典, 根据点击时间获取用户的点击文章序列   {user1: {item1: time1, item2: time2..}...}
        :param i2i_sim: 字典，文章相似性矩阵
        :param sim_item_topk: 整数， 选择与当前文章最相似的前k篇文章
        :param recall_item_num: 整数， 最后的召回文章数量
        :param item_topk_click: 列表，点击次数最多的文章列表，用户召回补全
        :param emb_i2i_sim: 字典基于内容embedding算的文章相似矩阵
        
        return: 召回的文章列表 {item1:score1, item2: score2...}
        
    &quot;&quot;&quot;</span>
    <span class="token comment"># 获取用户历史交互的文章</span>
    user_hist_items <span class="token operator">=</span> user_item_time_dict<span class="token punctuation">[</span>user_id<span class="token punctuation">]</span>
    
    item_rank <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> loc<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> click_time<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>user_hist_items<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j<span class="token punctuation">,</span> wij <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>i2i_sim<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>sim_item_topk<span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> j <span class="token keyword">in</span> user_hist_items<span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            
            <span class="token comment"># 文章创建时间差权重</span>
            created_time_weight <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token number">0.8</span> <span class="token operator">**</span> np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>item_created_time_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> item_created_time_dict<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment"># 相似文章和历史点击文章序列中历史文章所在的位置权重</span>
            loc_weight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.9</span> <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>user_hist_items<span class="token punctuation">)</span> <span class="token operator">-</span> loc<span class="token punctuation">)</span><span class="token punctuation">)</span>
            
            content_weight <span class="token operator">=</span> <span class="token number">1.0</span>
            <span class="token keyword">if</span> emb_i2i_sim<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                content_weight <span class="token operator">+=</span> emb_i2i_sim<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            <span class="token keyword">if</span> emb_i2i_sim<span class="token punctuation">.</span>get<span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                content_weight <span class="token operator">+=</span> emb_i2i_sim<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                
            item_rank<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            item_rank<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> created_time_weight <span class="token operator">*</span> loc_weight <span class="token operator">*</span> content_weight <span class="token operator">*</span> wij
    
    <span class="token comment"># 不足10个，用热门商品补全</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>item_rank<span class="token punctuation">)</span> <span class="token operator">&lt;</span> recall_item_num<span class="token punctuation">:</span>
        <span class="token keyword">for</span> i<span class="token punctuation">,</span> item <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>item_topk_click<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> item <span class="token keyword">in</span> item_rank<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 填充的item应该不在原来的列表中</span>
                <span class="token keyword">continue</span>
            item_rank<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">100</span> <span class="token comment"># 随便给个负数就行</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>item_rank<span class="token punctuation">)</span> <span class="token operator">==</span> recall_item_num<span class="token punctuation">:</span>
                <span class="token keyword">break</span>
    
    item_rank <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>item_rank<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>recall_item_num<span class="token punctuation">]</span>
        
    <span class="token keyword">return</span> item_rank
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="itemcf-sim召回" tabindex="-1"><a class="header-anchor" href="#itemcf-sim召回"><span>itemCF sim召回</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 先进行itemcf召回, 为了召回评估，所以提取最后一次点击</span>

<span class="token keyword">if</span> metric_recall<span class="token punctuation">:</span>
    trn_hist_click_df<span class="token punctuation">,</span> trn_last_click_df <span class="token operator">=</span> get_hist_and_last_click<span class="token punctuation">(</span>all_click_df<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    trn_hist_click_df <span class="token operator">=</span> all_click_df

user_recall_items_dict <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>
user_item_time_dict <span class="token operator">=</span> get_user_item_time<span class="token punctuation">(</span>trn_hist_click_df<span class="token punctuation">)</span>

i2i_sim <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;itemcf_i2i_sim.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
emb_i2i_sim <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;emb_i2i_sim.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

sim_item_topk <span class="token operator">=</span> <span class="token number">20</span>
recall_item_num <span class="token operator">=</span> <span class="token number">10</span>
item_topk_click <span class="token operator">=</span> get_item_topk_click<span class="token punctuation">(</span>trn_hist_click_df<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> user <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>trn_hist_click_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    user_recall_items_dict<span class="token punctuation">[</span>user<span class="token punctuation">]</span> <span class="token operator">=</span> item_based_recommend<span class="token punctuation">(</span>user<span class="token punctuation">,</span> user_item_time_dict<span class="token punctuation">,</span> \\
                                                        i2i_sim<span class="token punctuation">,</span> sim_item_topk<span class="token punctuation">,</span> recall_item_num<span class="token punctuation">,</span> \\
                                                        item_topk_click<span class="token punctuation">,</span> item_created_time_dict<span class="token punctuation">,</span> emb_i2i_sim<span class="token punctuation">)</span>

user_multi_recall_dict<span class="token punctuation">[</span><span class="token string">&#39;itemcf_sim_itemcf_recall&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> user_recall_items_dict
pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>user_multi_recall_dict<span class="token punctuation">[</span><span class="token string">&#39;itemcf_sim_itemcf_recall&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;itemcf_recall_dict.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> metric_recall<span class="token punctuation">:</span>
    <span class="token comment"># 召回效果评估</span>
    metrics_recall<span class="token punctuation">(</span>user_multi_recall_dict<span class="token punctuation">[</span><span class="token string">&#39;itemcf_sim_itemcf_recall&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> trn_last_click_df<span class="token punctuation">,</span> topk<span class="token operator">=</span>recall_item_num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>100%|██████████| 250000/250000 [2:51:13&lt;00:00, 24.33it/s]  
</code></pre><h4 id="embedding-sim-召回" tabindex="-1"><a class="header-anchor" href="#embedding-sim-召回"><span>embedding sim 召回</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 这里是为了召回评估，所以提取最后一次点击</span>
<span class="token keyword">if</span> metric_recall<span class="token punctuation">:</span>
    trn_hist_click_df<span class="token punctuation">,</span> trn_last_click_df <span class="token operator">=</span> get_hist_and_last_click<span class="token punctuation">(</span>all_click_df<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    trn_hist_click_df <span class="token operator">=</span> all_click_df

user_recall_items_dict <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>
user_item_time_dict <span class="token operator">=</span> get_user_item_time<span class="token punctuation">(</span>trn_hist_click_df<span class="token punctuation">)</span>
i2i_sim <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;emb_i2i_sim.pkl&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

sim_item_topk <span class="token operator">=</span> <span class="token number">20</span>
recall_item_num <span class="token operator">=</span> <span class="token number">10</span>

item_topk_click <span class="token operator">=</span> get_item_topk_click<span class="token punctuation">(</span>trn_hist_click_df<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> user <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>trn_hist_click_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    user_recall_items_dict<span class="token punctuation">[</span>user<span class="token punctuation">]</span> <span class="token operator">=</span> item_based_recommend<span class="token punctuation">(</span>user<span class="token punctuation">,</span> user_item_time_dict<span class="token punctuation">,</span> i2i_sim<span class="token punctuation">,</span> sim_item_topk<span class="token punctuation">,</span> 
                                                        recall_item_num<span class="token punctuation">,</span> item_topk_click<span class="token punctuation">,</span> item_created_time_dict<span class="token punctuation">,</span> emb_i2i_sim<span class="token punctuation">)</span>
    
user_multi_recall_dict<span class="token punctuation">[</span><span class="token string">&#39;embedding_sim_item_recall&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> user_recall_items_dict
pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>user_multi_recall_dict<span class="token punctuation">[</span><span class="token string">&#39;embedding_sim_item_recall&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;embedding_sim_item_recall.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> metric_recall<span class="token punctuation">:</span>
    <span class="token comment"># 召回效果评估</span>
    metrics_recall<span class="token punctuation">(</span>user_multi_recall_dict<span class="token punctuation">[</span><span class="token string">&#39;embedding_sim_item_recall&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> trn_last_click_df<span class="token punctuation">,</span> topk<span class="token operator">=</span>recall_item_num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>100%|██████████| 250000/250000 [04:35&lt;00:00, 905.85it/s] 
</code></pre><h3 id="usercf召回" tabindex="-1"><a class="header-anchor" href="#usercf召回"><span>userCF召回</span></a></h3><p>基于用户协同过滤，核心思想是给用户推荐与其相似的用户历史点击文章，因为这里涉及到了相似用户的历史文章，这里仍然可以加上一些关联规则来给用户可能点击的文章进行加权，这里使用的关联规则主要是考虑相似用户的历史点击文章与被推荐用户历史点击商品的关系权重，而这里的关系就可以直接借鉴基于物品的协同过滤相似的做法，只不过这里是对被推荐物品关系的一个累加的过程，下面是使用的一些关系权重，及相关的代码：</p><ol><li>计算被推荐用户历史点击文章与相似用户历史点击文章的相似度，文章创建时间差，相对位置的总和，作为各自的权重</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 基于用户的召回 u2u2i</span>
<span class="token keyword">def</span> <span class="token function">user_based_recommend</span><span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> user_item_time_dict<span class="token punctuation">,</span> u2u_sim<span class="token punctuation">,</span> sim_user_topk<span class="token punctuation">,</span> recall_item_num<span class="token punctuation">,</span> 
                         item_topk_click<span class="token punctuation">,</span> item_created_time_dict<span class="token punctuation">,</span> emb_i2i_sim<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
        基于文章协同过滤的召回
        :param user_id: 用户id
        :param user_item_time_dict: 字典, 根据点击时间获取用户的点击文章序列   {user1: {item1: time1, item2: time2..}...}
        :param u2u_sim: 字典，文章相似性矩阵
        :param sim_user_topk: 整数， 选择与当前用户最相似的前k个用户
        :param recall_item_num: 整数， 最后的召回文章数量
        :param item_topk_click: 列表，点击次数最多的文章列表，用户召回补全
        :param item_created_time_dict: 文章创建时间列表
        :param emb_i2i_sim: 字典基于内容embedding算的文章相似矩阵
        
        return: 召回的文章列表 {item1:score1, item2: score2...}
    &quot;&quot;&quot;</span>
    <span class="token comment"># 历史交互</span>
    user_item_time_list <span class="token operator">=</span> user_item_time_dict<span class="token punctuation">[</span>user_id<span class="token punctuation">]</span>    <span class="token comment"># {item1: time1, item2: time2...}</span>
    user_hist_items <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i<span class="token punctuation">,</span> t <span class="token keyword">in</span> user_item_time_list<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 存在一个用户与某篇文章的多次交互， 这里得去重</span>
    
    items_rank <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> sim_u<span class="token punctuation">,</span> wuv <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>u2u_sim<span class="token punctuation">[</span>user_id<span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>sim_user_topk<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i<span class="token punctuation">,</span> click_time <span class="token keyword">in</span> user_item_time_dict<span class="token punctuation">[</span>sim_u<span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> i <span class="token keyword">in</span> user_hist_items<span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            items_rank<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            
            loc_weight <span class="token operator">=</span> <span class="token number">1.0</span>
            content_weight <span class="token operator">=</span> <span class="token number">1.0</span>
            created_time_weight <span class="token operator">=</span> <span class="token number">1.0</span>
            
            <span class="token comment"># 当前文章与该用户看的历史文章进行一个权重交互</span>
            <span class="token keyword">for</span> loc<span class="token punctuation">,</span> <span class="token punctuation">(</span>j<span class="token punctuation">,</span> click_time<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>user_item_time_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token comment"># 点击时的相对位置权重</span>
                loc_weight <span class="token operator">+=</span> <span class="token number">0.9</span> <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>user_item_time_list<span class="token punctuation">)</span> <span class="token operator">-</span> loc<span class="token punctuation">)</span>
                <span class="token comment"># 内容相似性权重</span>
                <span class="token keyword">if</span> emb_i2i_sim<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                    content_weight <span class="token operator">+=</span> emb_i2i_sim<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                <span class="token keyword">if</span> emb_i2i_sim<span class="token punctuation">.</span>get<span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                    content_weight <span class="token operator">+=</span> emb_i2i_sim<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                
                <span class="token comment"># 创建时间差权重</span>
                created_time_weight <span class="token operator">+=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token number">0.8</span> <span class="token operator">*</span> np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>item_created_time_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> item_created_time_dict<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                
            items_rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> loc_weight <span class="token operator">*</span> content_weight <span class="token operator">*</span> created_time_weight <span class="token operator">*</span> wuv
        
    <span class="token comment"># 热度补全</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>items_rank<span class="token punctuation">)</span> <span class="token operator">&lt;</span> recall_item_num<span class="token punctuation">:</span>
        <span class="token keyword">for</span> i<span class="token punctuation">,</span> item <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>item_topk_click<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> item <span class="token keyword">in</span> items_rank<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 填充的item应该不在原来的列表中</span>
                <span class="token keyword">continue</span>
            items_rank<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">100</span> <span class="token comment"># 随便给个复数就行</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>items_rank<span class="token punctuation">)</span> <span class="token operator">==</span> recall_item_num<span class="token punctuation">:</span>
                <span class="token keyword">break</span>
        
    items_rank <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>items_rank<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>recall_item_num<span class="token punctuation">]</span>    
    
    <span class="token keyword">return</span> items_rank
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="usercf-sim召回" tabindex="-1"><a class="header-anchor" href="#usercf-sim召回"><span>userCF sim召回</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 这里是为了召回评估，所以提取最后一次点击</span>
<span class="token comment"># 由于usercf中计算user之间的相似度的过程太费内存了，全量数据这里就没有跑，跑了一个采样之后的数据</span>
<span class="token keyword">if</span> metric_recall<span class="token punctuation">:</span>
    trn_hist_click_df<span class="token punctuation">,</span> trn_last_click_df <span class="token operator">=</span> get_hist_and_last_click<span class="token punctuation">(</span>all_click_df<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    trn_hist_click_df <span class="token operator">=</span> all_click_df
    
user_recall_items_dict <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>
user_item_time_dict <span class="token operator">=</span> get_user_item_time<span class="token punctuation">(</span>trn_hist_click_df<span class="token punctuation">)</span>

u2u_sim <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;usercf_u2u_sim.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

sim_user_topk <span class="token operator">=</span> <span class="token number">20</span>
recall_item_num <span class="token operator">=</span> <span class="token number">10</span>
item_topk_click <span class="token operator">=</span> get_item_topk_click<span class="token punctuation">(</span>trn_hist_click_df<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> user <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>trn_hist_click_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    user_recall_items_dict<span class="token punctuation">[</span>user<span class="token punctuation">]</span> <span class="token operator">=</span> user_based_recommend<span class="token punctuation">(</span>user<span class="token punctuation">,</span> user_item_time_dict<span class="token punctuation">,</span> u2u_sim<span class="token punctuation">,</span> sim_user_topk<span class="token punctuation">,</span> \\
                                                        recall_item_num<span class="token punctuation">,</span> item_topk_click<span class="token punctuation">,</span> item_created_time_dict<span class="token punctuation">,</span> emb_i2i_sim<span class="token punctuation">)</span>    

pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>user_recall_items_dict<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;usercf_u2u2i_recall.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> metric_recall<span class="token punctuation">:</span>
    <span class="token comment"># 召回效果评估</span>
    metrics_recall<span class="token punctuation">(</span>user_recall_items_dict<span class="token punctuation">,</span> trn_last_click_df<span class="token punctuation">,</span> topk<span class="token operator">=</span>recall_item_num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="user-embedding-sim召回" tabindex="-1"><a class="header-anchor" href="#user-embedding-sim召回"><span>user embedding sim召回</span></a></h4><p>虽然没有直接跑usercf的计算用户之间的相似度，为了验证上述基于用户的协同过滤的代码，下面使用了YoutubeDNN过程中产生的user embedding来进行向量检索每个user最相似的topk个user，在使用这里得到的u2u的相似性矩阵，使用usercf进行召回，具体代码如下</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 使用Embedding的方式获取u2u的相似性矩阵</span>
<span class="token comment"># topk指的是每个user, faiss搜索后返回最相似的topk个user</span>
<span class="token keyword">def</span> <span class="token function">u2u_embdding_sim</span><span class="token punctuation">(</span>click_df<span class="token punctuation">,</span> user_emb_dict<span class="token punctuation">,</span> save_path<span class="token punctuation">,</span> topk<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    user_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    user_emb_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> user_id<span class="token punctuation">,</span> user_emb <span class="token keyword">in</span> user_emb_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        user_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>user_id<span class="token punctuation">)</span>
        user_emb_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>user_emb<span class="token punctuation">)</span>
        
    user_index_2_rawid_dict <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span> v <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>user_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user_list<span class="token punctuation">)</span><span class="token punctuation">}</span>    
    
    user_emb_np <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>user_emb_list<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
    
    <span class="token comment"># 建立faiss索引</span>
    user_index <span class="token operator">=</span> faiss<span class="token punctuation">.</span>IndexFlatIP<span class="token punctuation">(</span>user_emb_np<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    user_index<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user_emb_np<span class="token punctuation">)</span>
    <span class="token comment"># 相似度查询，给每个索引位置上的向量返回topk个item以及相似度</span>
    sim<span class="token punctuation">,</span> idx <span class="token operator">=</span> user_index<span class="token punctuation">.</span>search<span class="token punctuation">(</span>user_emb_np<span class="token punctuation">,</span> topk<span class="token punctuation">)</span> <span class="token comment"># 返回的是列表</span>
   
    <span class="token comment"># 将向量检索的结果保存成原始id的对应关系</span>
    user_sim_dict <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> target_idx<span class="token punctuation">,</span> sim_value_list<span class="token punctuation">,</span> rele_idx_list <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>user_emb_np<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sim<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        target_raw_id <span class="token operator">=</span> user_index_2_rawid_dict<span class="token punctuation">[</span>target_idx<span class="token punctuation">]</span>
        <span class="token comment"># 从1开始是为了去掉商品本身, 所以最终获得的相似商品只有topk-1</span>
        <span class="token keyword">for</span> rele_idx<span class="token punctuation">,</span> sim_value <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>rele_idx_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sim_value_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
            rele_raw_id <span class="token operator">=</span> user_index_2_rawid_dict<span class="token punctuation">[</span>rele_idx<span class="token punctuation">]</span>
            user_sim_dict<span class="token punctuation">[</span>target_raw_id<span class="token punctuation">]</span><span class="token punctuation">[</span>rele_raw_id<span class="token punctuation">]</span> <span class="token operator">=</span> user_sim_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target_raw_id<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>rele_raw_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> sim_value
    
    <span class="token comment"># 保存i2i相似度矩阵</span>
    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>user_sim_dict<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;youtube_u2u_sim.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   
    <span class="token keyword">return</span> user_sim_dict
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 读取YoutubeDNN过程中产生的user embedding, 然后使用faiss计算用户之间的相似度</span>
<span class="token comment"># 这里需要注意，这里得到的user embedding其实并不是很好，因为YoutubeDNN中使用的是用户点击序列来训练的user embedding,</span>
<span class="token comment"># 如果序列普遍都比较短的话，其实效果并不是很好</span>
user_emb_dict <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;user_youtube_emb.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
u2u_sim <span class="token operator">=</span> u2u_embdding_sim<span class="token punctuation">(</span>all_click_df<span class="token punctuation">,</span> user_emb_dict<span class="token punctuation">,</span> save_path<span class="token punctuation">,</span> topk<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>250000it [00:23, 10507.45it/s]
</code></pre><p>通过YoutubeDNN得到的user_embedding</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 使用召回评估函数验证当前召回方式的效果</span>
<span class="token keyword">if</span> metric_recall<span class="token punctuation">:</span>
    trn_hist_click_df<span class="token punctuation">,</span> trn_last_click_df <span class="token operator">=</span> get_hist_and_last_click<span class="token punctuation">(</span>all_click_df<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    trn_hist_click_df <span class="token operator">=</span> all_click_df

user_recall_items_dict <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>
user_item_time_dict <span class="token operator">=</span> get_user_item_time<span class="token punctuation">(</span>trn_hist_click_df<span class="token punctuation">)</span>
u2u_sim <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;youtube_u2u_sim.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

sim_user_topk <span class="token operator">=</span> <span class="token number">20</span>
recall_item_num <span class="token operator">=</span> <span class="token number">10</span>

item_topk_click <span class="token operator">=</span> get_item_topk_click<span class="token punctuation">(</span>trn_hist_click_df<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> user <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>trn_hist_click_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    user_recall_items_dict<span class="token punctuation">[</span>user<span class="token punctuation">]</span> <span class="token operator">=</span> user_based_recommend<span class="token punctuation">(</span>user<span class="token punctuation">,</span> user_item_time_dict<span class="token punctuation">,</span> u2u_sim<span class="token punctuation">,</span> sim_user_topk<span class="token punctuation">,</span> \\
                                                        recall_item_num<span class="token punctuation">,</span> item_topk_click<span class="token punctuation">,</span> item_created_time_dict<span class="token punctuation">,</span> emb_i2i_sim<span class="token punctuation">)</span>
    
user_multi_recall_dict<span class="token punctuation">[</span><span class="token string">&#39;youtubednn_usercf_recall&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> user_recall_items_dict
pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>user_multi_recall_dict<span class="token punctuation">[</span><span class="token string">&#39;youtubednn_usercf_recall&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;youtubednn_usercf_recall.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> metric_recall<span class="token punctuation">:</span>
    <span class="token comment"># 召回效果评估</span>
    metrics_recall<span class="token punctuation">(</span>user_multi_recall_dict<span class="token punctuation">[</span><span class="token string">&#39;youtubednn_usercf_recall&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> trn_last_click_df<span class="token punctuation">,</span> topk<span class="token operator">=</span>recall_item_num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>100%|██████████| 250000/250000 [19:43&lt;00:00, 211.22it/s]
</code></pre><h2 id="冷启动问题" tabindex="-1"><a class="header-anchor" href="#冷启动问题"><span>冷启动问题</span></a></h2><p><strong>冷启动问题可以分成三类：文章冷启动，用户冷启动，系统冷启动。</strong></p><ul><li>文章冷启动：对于一个平台系统新加入的文章，该文章没有任何的交互记录，如何推荐给用户的问题。(对于我们场景可以认为是，日志数据中没有出现过的文章都可以认为是冷启动的文章)</li><li>用户冷启动：对于一个平台系统新来的用户，该用户还没有文章的交互信息，如何给该用户进行推荐。(对于我们场景就是，测试集中的用户是否在测试集对应的log数据中出现过，如果没有出现过，那么可以认为该用户是冷启动用户。但是有时候并没有这么严格，我们也可以自己设定某些指标来判别哪些用户是冷启动用户，比如通过使用时长，点击率，留存率等等)</li><li>系统冷启动：就是对于一个平台刚上线，还没有任何的相关历史数据，此时就是系统冷启动，其实也就是前面两种的一个综合。</li></ul><p><strong>当前场景下冷启动问题的分析：</strong></p><p>对当前的数据进行分析会发现，日志中所有出现过的点击文章只有3w多个，而整个文章库中却有30多万，那么测试集中的用户最后一次点击是否会点击没有出现在日志中的文章呢？如果存在这种情况，说明用户点击的文章之前没有任何的交互信息，这也就是我们所说的文章冷启动。通过数据分析还可以发现，测试集用户只有一次点击的数据占得比例还不少，其实仅仅通过用户的一次点击就给用户推荐文章使用模型的方式也是比较难的，这里其实也可以考虑用户冷启动的问题，但是这里只给出物品冷启动的一些解决方案及代码，关于用户冷启动的话提一些可行性的做法。</p><ol><li>文章冷启动(没有冷启动的探索问题)<br> 其实我们这里不是为了做文章的冷启动而做冷启动，而是猜测用户可能会点击一些没有在log数据中出现的文章，我们要做的就是如何从将近27万的文章中选择一些文章作为用户冷启动的文章，这里其实也可以看成是一种召回策略，我们这里就采用简单的比较好理解的基于规则的召回策略来获取用户可能点击的未出现在log数据中的文章。 现在的问题变成了：如何给每个用户考虑从27万个商品中获取一小部分商品？随机选一些可能是一种方案。下面给出一些参考的方案。 <ol><li>首先基于Embedding召回一部分与用户历史相似的文章</li><li>从基于Embedding召回的文章中通过一些规则过滤掉一些文章，使得留下的文章用户更可能点击。我们这里的规则，可以是，留下那些与用户历史点击文章主题相同的文章，或者字数相差不大的文章。并且留下的文章尽量是与测试集用户最后一次点击时间更接近的文章，或者是当天的文章也行。</li></ol></li><li>用户冷启动<br> 这里对测试集中的用户点击数据进行分析会发现，测试集中有百分之20的用户只有一次点击，那么这些点击特别少的用户的召回是不是可以单独做一些策略上的补充呢？或者是在排序后直接基于规则加上一些文章呢？这些都可以去尝试，这里没有提供具体的做法。</li></ol><p><strong>注意：</strong></p><p>这里看似和基于embedding计算的item之间相似度然后做itemcf是一致的，但是现在我们的目的不一样，我们这里的目的是找到相似的向量，并且还没有出现在log日志中的商品，再加上一些其他的冷启动的策略，这里需要找回的数量会偏多一点，不然被筛选完之后可能都没有文章了</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 先进行itemcf召回，这里不需要做召回评估，这里只是一种策略</span>
trn_hist_click_df <span class="token operator">=</span> all_click_df

user_recall_items_dict <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>
user_item_time_dict <span class="token operator">=</span> get_user_item_time<span class="token punctuation">(</span>trn_hist_click_df<span class="token punctuation">)</span>
i2i_sim <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;emb_i2i_sim.pkl&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

sim_item_topk <span class="token operator">=</span> <span class="token number">150</span>
recall_item_num <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment"># 稍微召回多一点文章，便于后续的规则筛选</span>

item_topk_click <span class="token operator">=</span> get_item_topk_click<span class="token punctuation">(</span>trn_hist_click_df<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> user <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>trn_hist_click_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    user_recall_items_dict<span class="token punctuation">[</span>user<span class="token punctuation">]</span> <span class="token operator">=</span> item_based_recommend<span class="token punctuation">(</span>user<span class="token punctuation">,</span> user_item_time_dict<span class="token punctuation">,</span> i2i_sim<span class="token punctuation">,</span> sim_item_topk<span class="token punctuation">,</span> 
                                                        recall_item_num<span class="token punctuation">,</span> item_topk_click<span class="token punctuation">,</span>item_created_time_dict<span class="token punctuation">,</span> emb_i2i_sim<span class="token punctuation">)</span>
pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>user_recall_items_dict<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;cold_start_items_raw_dict.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>100%|██████████| 250000/250000 [05:01&lt;00:00, 828.60it/s] 
</code></pre><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 基于规则进行文章过滤</span>
<span class="token comment"># 保留文章主题与用户历史浏览主题相似的文章</span>
<span class="token comment"># 保留文章字数与用户历史浏览文章字数相差不大的文章</span>
<span class="token comment"># 保留最后一次点击当天的文章</span>
<span class="token comment"># 按照相似度返回最终的结果</span>

<span class="token keyword">def</span> <span class="token function">get_click_article_ids_set</span><span class="token punctuation">(</span>all_click_df<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">set</span><span class="token punctuation">(</span>all_click_df<span class="token punctuation">.</span>click_article_id<span class="token punctuation">.</span>values<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">cold_start_items</span><span class="token punctuation">(</span>user_recall_items_dict<span class="token punctuation">,</span> user_hist_item_typs_dict<span class="token punctuation">,</span> user_hist_item_words_dict<span class="token punctuation">,</span> \\
                     user_last_item_created_time_dict<span class="token punctuation">,</span> item_type_dict<span class="token punctuation">,</span> item_words_dict<span class="token punctuation">,</span> 
                     item_created_time_dict<span class="token punctuation">,</span> click_article_ids_set<span class="token punctuation">,</span> recall_item_num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
        冷启动的情况下召回一些文章
        :param user_recall_items_dict: 基于内容embedding相似性召回来的很多文章， 字典， {user1: [item1, item2, ..], }
        :param user_hist_item_typs_dict: 字典， 用户点击的文章的主题映射
        :param user_hist_item_words_dict: 字典， 用户点击的历史文章的字数映射
        :param user_last_item_created_time_idct: 字典，用户点击的历史文章创建时间映射
        :param item_tpye_idct: 字典，文章主题映射
        :param item_words_dict: 字典，文章字数映射
        :param item_created_time_dict: 字典， 文章创建时间映射
        :param click_article_ids_set: 集合，用户点击过得文章, 也就是日志里面出现过的文章
        :param recall_item_num: 召回文章的数量， 这个指的是没有出现在日志里面的文章数量
    &quot;&quot;&quot;</span>
    
    cold_start_user_items_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> user<span class="token punctuation">,</span> item_list <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>user_recall_items_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        cold_start_user_items_dict<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> item<span class="token punctuation">,</span> score <span class="token keyword">in</span> item_list<span class="token punctuation">:</span>
            <span class="token comment"># 获取历史文章信息</span>
            hist_item_type_set <span class="token operator">=</span> user_hist_item_typs_dict<span class="token punctuation">[</span>user<span class="token punctuation">]</span>
            hist_mean_words <span class="token operator">=</span> user_hist_item_words_dict<span class="token punctuation">[</span>user<span class="token punctuation">]</span>
            hist_last_item_created_time <span class="token operator">=</span> user_last_item_created_time_dict<span class="token punctuation">[</span>user<span class="token punctuation">]</span>
            hist_last_item_created_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span>hist_last_item_created_time<span class="token punctuation">)</span>
            
            <span class="token comment"># 获取当前召回文章的信息</span>
            curr_item_type <span class="token operator">=</span> item_type_dict<span class="token punctuation">[</span>item<span class="token punctuation">]</span>
            curr_item_words <span class="token operator">=</span> item_words_dict<span class="token punctuation">[</span>item<span class="token punctuation">]</span>
            curr_item_created_time <span class="token operator">=</span> item_created_time_dict<span class="token punctuation">[</span>item<span class="token punctuation">]</span>
            curr_item_created_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span>curr_item_created_time<span class="token punctuation">)</span>

            <span class="token comment"># 首先，文章不能出现在用户的历史点击中， 然后根据文章主题，文章单词数，文章创建时间进行筛选</span>
            <span class="token keyword">if</span> curr_item_type <span class="token keyword">not</span> <span class="token keyword">in</span> hist_item_type_set <span class="token keyword">or</span> \\
                item <span class="token keyword">in</span> click_article_ids_set <span class="token keyword">or</span> \\
                <span class="token builtin">abs</span><span class="token punctuation">(</span>curr_item_words <span class="token operator">-</span> hist_mean_words<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">200</span> <span class="token keyword">or</span> \\
                <span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span>curr_item_created_time <span class="token operator">-</span> hist_last_item_created_time<span class="token punctuation">)</span><span class="token punctuation">.</span>days<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">90</span><span class="token punctuation">:</span> 
                <span class="token keyword">continue</span>
                
            cold_start_user_items_dict<span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># {user1: [(item1, score1), (item2, score2)..]...}</span>
    
    <span class="token comment"># 需要控制一下冷启动召回的数量</span>
    cold_start_user_items_dict <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>recall_item_num<span class="token punctuation">]</span> \\
                                  <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> cold_start_user_items_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    
    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>cold_start_user_items_dict<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;cold_start_user_items_dict.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> cold_start_user_items_dict
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>all_click_df_ <span class="token operator">=</span> all_click_df<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
all_click_df_ <span class="token operator">=</span> all_click_df_<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>item_info_df<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">)</span>
user_hist_item_typs_dict<span class="token punctuation">,</span> user_hist_item_ids_dict<span class="token punctuation">,</span> user_hist_item_words_dict<span class="token punctuation">,</span> user_last_item_created_time_dict <span class="token operator">=</span> get_user_hist_item_info_dict<span class="token punctuation">(</span>all_click_df_<span class="token punctuation">)</span>
click_article_ids_set <span class="token operator">=</span> get_click_article_ids_set<span class="token punctuation">(</span>all_click_df<span class="token punctuation">)</span>
<span class="token comment"># 需要注意的是</span>
<span class="token comment"># 这里使用了很多规则来筛选冷启动的文章，所以前面再召回的阶段就应该尽可能的多召回一些文章，否则很容易被删掉</span>
cold_start_user_items_dict <span class="token operator">=</span> cold_start_items<span class="token punctuation">(</span>user_recall_items_dict<span class="token punctuation">,</span> user_hist_item_typs_dict<span class="token punctuation">,</span> user_hist_item_words_dict<span class="token punctuation">,</span> \\
                                              user_last_item_created_time_dict<span class="token punctuation">,</span> item_type_dict<span class="token punctuation">,</span> item_words_dict<span class="token punctuation">,</span> \\
                                              item_created_time_dict<span class="token punctuation">,</span> click_article_ids_set<span class="token punctuation">,</span> recall_item_num<span class="token punctuation">)</span>

user_multi_recall_dict<span class="token punctuation">[</span><span class="token string">&#39;cold_start_recall&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> cold_start_user_items_dict
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>100%|██████████| 250000/250000 [01:49&lt;00:00, 2293.37it/s]
</code></pre><h2 id="多路召回合并" tabindex="-1"><a class="header-anchor" href="#多路召回合并"><span>多路召回合并</span></a></h2><p>多路召回合并就是将前面所有的召回策略得到的用户文章列表合并起来，下面是对前面所有召回结果的汇总</p><ol><li>基于itemcf计算的item之间的相似度sim进行的召回</li><li>基于embedding搜索得到的item之间的相似度进行的召回</li><li>YoutubeDNN召回</li><li>YoutubeDNN得到的user之间的相似度进行的召回</li><li>基于冷启动策略的召回</li></ol><p><strong>注意：</strong><br> 在做召回评估的时候就会发现有些召回的效果不错有些召回的效果很差，所以对每一路召回的结果，我们可以认为的定义一些权重，来做最终的相似度融合</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">combine_recall_results</span><span class="token punctuation">(</span>user_multi_recall_dict<span class="token punctuation">,</span> weight_dict<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> topk<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    final_recall_items_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    
    <span class="token comment"># 对每一种召回结果按照用户进行归一化，方便后面多种召回结果，相同用户的物品之间权重相加</span>
    <span class="token keyword">def</span> <span class="token function">norm_user_recall_items_sim</span><span class="token punctuation">(</span>sorted_item_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 如果冷启动中没有文章或者只有一篇文章，直接返回，出现这种情况的原因可能是冷启动召回的文章数量太少了，</span>
        <span class="token comment"># 基于规则筛选之后就没有文章了, 这里还可以做一些其他的策略性的筛选</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sorted_item_list<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> sorted_item_list
        
        min_sim <span class="token operator">=</span> sorted_item_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        max_sim <span class="token operator">=</span> sorted_item_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        
        norm_sorted_item_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> item<span class="token punctuation">,</span> score <span class="token keyword">in</span> sorted_item_list<span class="token punctuation">:</span>
            <span class="token keyword">if</span> max_sim <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                norm_score <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>score <span class="token operator">-</span> min_sim<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>max_sim <span class="token operator">-</span> min_sim<span class="token punctuation">)</span> <span class="token keyword">if</span> max_sim <span class="token operator">&gt;</span> min_sim <span class="token keyword">else</span> <span class="token number">1.0</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                norm_score <span class="token operator">=</span> <span class="token number">0.0</span>
            norm_sorted_item_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> norm_score<span class="token punctuation">)</span><span class="token punctuation">)</span>
            
        <span class="token keyword">return</span> norm_sorted_item_list
    
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;多路召回合并...&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> method<span class="token punctuation">,</span> user_recall_items <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>user_multi_recall_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>method <span class="token operator">+</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">)</span>
        <span class="token comment"># 在计算最终召回结果的时候，也可以为每一种召回结果设置一个权重</span>
        <span class="token keyword">if</span> weight_dict <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            recall_method_weight <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            recall_method_weight <span class="token operator">=</span> weight_dict<span class="token punctuation">[</span>method<span class="token punctuation">]</span>
        
        <span class="token keyword">for</span> user_id<span class="token punctuation">,</span> sorted_item_list <span class="token keyword">in</span> user_recall_items<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 进行归一化</span>
            user_recall_items<span class="token punctuation">[</span>user_id<span class="token punctuation">]</span> <span class="token operator">=</span> norm_user_recall_items_sim<span class="token punctuation">(</span>sorted_item_list<span class="token punctuation">)</span>
        
        <span class="token keyword">for</span> user_id<span class="token punctuation">,</span> sorted_item_list <span class="token keyword">in</span> user_recall_items<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># print(&#39;user_id&#39;)</span>
            final_recall_items_dict<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> item<span class="token punctuation">,</span> score <span class="token keyword">in</span> sorted_item_list<span class="token punctuation">:</span>
                final_recall_items_dict<span class="token punctuation">[</span>user_id<span class="token punctuation">]</span><span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
                final_recall_items_dict<span class="token punctuation">[</span>user_id<span class="token punctuation">]</span><span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">+=</span> recall_method_weight <span class="token operator">*</span> score  
    
    final_recall_items_dict_rank <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment"># 多路召回时也可以控制最终的召回数量</span>
    <span class="token keyword">for</span> user<span class="token punctuation">,</span> recall_item_dict <span class="token keyword">in</span> final_recall_items_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        final_recall_items_dict_rank<span class="token punctuation">[</span>user<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>recall_item_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>topk<span class="token punctuation">]</span>

    <span class="token comment"># 将多路召回后的最终结果字典保存到本地</span>
    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>final_recall_items_dict<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>save_path<span class="token punctuation">,</span> <span class="token string">&#39;final_recall_items_dict.pkl&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> final_recall_items_dict_rank
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 这里直接对多路召回的权重给了一个相同的值，其实可以根据前面召回的情况来调整参数的值</span>
weight_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;itemcf_sim_itemcf_recall&#39;</span><span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>
               <span class="token string">&#39;embedding_sim_item_recall&#39;</span><span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>
               <span class="token string">&#39;youtubednn_recall&#39;</span><span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>
               <span class="token string">&#39;youtubednn_usercf_recall&#39;</span><span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span> 
               <span class="token string">&#39;cold_start_recall&#39;</span><span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 最终合并之后每个用户召回150个商品进行排序</span>
final_recall_items_dict_rank <span class="token operator">=</span> combine_recall_results<span class="token punctuation">(</span>user_multi_recall_dict<span class="token punctuation">,</span> weight_dict<span class="token punctuation">,</span> topk<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>  0%|          | 0/5 [00:00&lt;?, ?it/s]

多路召回合并...
itemcf_sim_itemcf_recall...


 20%|██        | 1/5 [00:08&lt;00:34,  8.66s/it]

embedding_sim_item_recall...


 40%|████      | 2/5 [00:16&lt;00:24,  8.29s/it]

youtubednn_recall...
youtubednn_usercf_recall...


 80%|████████  | 4/5 [00:23&lt;00:06,  6.98s/it]

cold_start_recall...


100%|██████████| 5/5 [00:42&lt;00:00,  8.40s/it]
</code></pre><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>上述实现了如下召回策略：</p><ol><li>基于关联规则的itemcf</li><li>基于关联规则的usercf</li><li>youtubednn召回</li><li>冷启动召回</li></ol><p>对于上述实现的召回策略其实都不是最优的结果，我们只是做了个简单的尝试，其中还有很多地方可以优化，包括已经实现的这些召回策略的参数或者新加一些，修改一些关联规则都可以。当然还可以尝试更多的召回策略，比如对新闻进行热度召回等等。</p>`,55);function N(z,j){const a=c("ExternalLinkIcon");return i(),o("div",null,[u,n("ol",null,[n("li",null,[n("p",null,[s("PCA降维算法细节参考下面这个链接进行学习"),k,n("a",r,[s("主成分分析（PCA）原理总结"),t(a)])])]),n("li",null,[n("p",null,[s("PQ编码的细节下面这个链接进行学习"),d,n("a",m,[s("实例理解product quantization算法"),t(a)])])])]),_,n("p",null,[n("a",v,[s("faiss官方教程"),t(a)])]),b,n("p",null,[n("a",g,[s("论文下载地址"),t(a)])]),h,y,f,n("ol",null,[n("li",null,[n("a",w,[s("重读Youtube深度学习推荐系统论文，字字珠玑，惊为神文"),t(a)])]),n("li",null,[n("a",x,[s("YouTube深度学习推荐系统的十大工程问题"),t(a)])])]),q])}const D=e(l,[["render",N],["__file","ch4.1.3_retr.html.vue"]]),I=JSON.parse('{"path":"/rcmd/ch04/ch4.1/ch4.1.3_retr.html","title":"多路召回","lang":"zh-CN","frontmatter":{"date":"2024-07-06T00:00:00.000Z","title":"多路召回","author":"Genhiy","order":3,"category":["推荐系统"],"tag":["无标签"],"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"导包","slug":"导包","link":"#导包","children":[]},{"level":2,"title":"读取数据","slug":"读取数据","link":"#读取数据","children":[]},{"level":2,"title":"工具函数","slug":"工具函数","link":"#工具函数","children":[{"level":3,"title":"获取用户-文章-时间函数","slug":"获取用户-文章-时间函数","link":"#获取用户-文章-时间函数","children":[]},{"level":3,"title":"获取文章-用户-时间函数","slug":"获取文章-用户-时间函数","link":"#获取文章-用户-时间函数","children":[]},{"level":3,"title":"获取历史和最后一次点击","slug":"获取历史和最后一次点击","link":"#获取历史和最后一次点击","children":[]},{"level":3,"title":"获取文章属性特征","slug":"获取文章属性特征","link":"#获取文章属性特征","children":[]},{"level":3,"title":"获取用户历史点击的文章信息","slug":"获取用户历史点击的文章信息","link":"#获取用户历史点击的文章信息","children":[]},{"level":3,"title":"获取点击次数最多的Top-k个文章","slug":"获取点击次数最多的top-k个文章","link":"#获取点击次数最多的top-k个文章","children":[]},{"level":3,"title":"定义多路召回字典","slug":"定义多路召回字典","link":"#定义多路召回字典","children":[]},{"level":3,"title":"召回效果评估","slug":"召回效果评估","link":"#召回效果评估","children":[]}]},{"level":2,"title":"计算相似性矩阵","slug":"计算相似性矩阵","link":"#计算相似性矩阵","children":[{"level":3,"title":"itemCF i2i_sim","slug":"itemcf-i2i-sim","link":"#itemcf-i2i-sim","children":[]},{"level":3,"title":"userCF u2u_sim","slug":"usercf-u2u-sim","link":"#usercf-u2u-sim","children":[]},{"level":3,"title":"item embedding sim","slug":"item-embedding-sim","link":"#item-embedding-sim","children":[]}]},{"level":2,"title":"召回","slug":"召回","link":"#召回","children":[{"level":3,"title":"YoutubeDNN召回","slug":"youtubednn召回","link":"#youtubednn召回","children":[]},{"level":3,"title":"itemCF recall","slug":"itemcf-recall","link":"#itemcf-recall","children":[]},{"level":3,"title":"userCF召回","slug":"usercf召回","link":"#usercf召回","children":[]}]},{"level":2,"title":"冷启动问题","slug":"冷启动问题","link":"#冷启动问题","children":[]},{"level":2,"title":"多路召回合并","slug":"多路召回合并","link":"#多路召回合并","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"readingTime":{"minutes":34.53,"words":10360},"filePathRelative":"rcmd/ch04/ch4.1/ch4.1.3_retr.md","localizedDate":"2024年7月6日"}');export{D as comp,I as data};
