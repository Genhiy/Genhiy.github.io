import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c,a as n,d as s,b as i,e as a}from"./app-SD3SAAIy.js";const l={},u=n("h2",{id:"赛题理解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#赛题理解"},[n("span",null,"赛题理解")])],-1),k=n("p",null,"赛题理解是切入一道赛题的基础，会影响后续特征工程和模型构建等各种工作，也影响着后续发展工作的方向，正确了解赛题背后的思想以及赛题业务逻辑的清晰，有利于花费更少时间构建更为有效的特征模型， 在各种比赛中， 赛题理解都是极其重要且必须走好的第一步， 今天我们就从赛题的理解出发， 首先了解一下这次赛题的概况和数据，从中分析赛题以及大致的处理方式， 其次我们了解模型评测的指标，最后对赛题的理解整理一些经验。",-1),r=n("h3",{id:"赛题简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#赛题简介"},[n("span",null,"赛题简介")])],-1),d={href:"https://tianchi.aliyun.com/competition/entrance/531842/introduction",target:"_blank",rel:"noopener noreferrer"},m=a('<p>此次比赛是新闻推荐场景下的用户行为预测挑战赛， 该赛题是以新闻APP中的新闻推荐为背景， 目的是<strong>要求我们根据用户历史浏览点击新闻文章的数据信息预测用户未来的点击行为， 即用户的最后一次点击的新闻文章</strong>， 这道赛题的设计初衷是引导大家了解推荐系统中的一些业务背景， 解决实际问题。</p><h3 id="数据概况" tabindex="-1"><a class="header-anchor" href="#数据概况"><span>数据概况</span></a></h3><p>该数据来自某新闻APP平台的用户交互数据，包括30万用户，近300万次点击，共36万多篇不同的新闻文章，同时每篇新闻文章有对应的embedding向量表示。为了保证比赛的公平性，从中抽取20万用户的点击日志数据作为训练集，5万用户的点击日志数据作为测试集A，5万用户的点击日志数据作为测试集B。具体数据表和参数， 大家可以参考赛题说明。下面说一下拿到这样的数据如何进行理解， 来有效的开展下一步的工作。</p><h3 id="评价方式理解" tabindex="-1"><a class="header-anchor" href="#评价方式理解"><span>评价方式理解</span></a></h3><p>理解评价方式， 我们需要结合着最后的提交文件来看， 根据sample.submit.csv， 我们最后提交的格式是针对每个用户， 我们都会给出五篇文章的推荐结果，按照点击概率从前往后排序。 而真实的每个用户最后一次点击的文章只会有一篇的真实答案， 所以我们就看我们推荐的这五篇里面是否有命中真实答案的。比如对于user1来说， 我们的提交会是：</p><blockquote><p>user1, article1, article2, article3, article4, article5.</p></blockquote><p>评价指标的公式如下：</p>',7),v=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mi",null,"s"),n("mi",null,"c"),n("mi",null,"o"),n("mi",null,"r"),n("mi",null,"e"),n("mo",{stretchy:"false"},"("),n("mi",null,"u"),n("mi",null,"s"),n("mi",null,"e"),n("mi",null,"r"),n("mo",{stretchy:"false"},")"),n("mo",null,"="),n("munderover",null,[n("mo",null,"∑"),n("mrow",null,[n("mi",null,"k"),n("mo",null,"="),n("mn",null,"1")]),n("mn",null,"5")]),n("mfrac",null,[n("mrow",null,[n("mi",null,"s"),n("mo",{stretchy:"false"},"("),n("mi",null,"u"),n("mi",null,"s"),n("mi",null,"e"),n("mi",null,"r"),n("mo",{separator:"true"},","),n("mi",null,"k"),n("mo",{stretchy:"false"},")")]),n("mi",null,"k")])]),n("annotation",{encoding:"application/x-tex"}," score(user) = \\sum_{k=1}^5 \\frac{s(user, k)}{k} ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"score"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"ser"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"3.1032em","vertical-align":"-1.3021em"}}),n("span",{class:"mop op-limits"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.8011em"}},[n("span",{style:{top:"-1.8479em","margin-left":"0em"}},[n("span",{class:"pstrut",style:{height:"3.05em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k"),n("span",{class:"mrel mtight"},"="),n("span",{class:"mord mtight"},"1")])])]),n("span",{style:{top:"-3.05em"}},[n("span",{class:"pstrut",style:{height:"3.05em"}}),n("span",null,[n("span",{class:"mop op-symbol large-op"},"∑")])]),n("span",{style:{top:"-4.3em","margin-left":"0em"}},[n("span",{class:"pstrut",style:{height:"3.05em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"5")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.3021em"}},[n("span")])])])]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.427em"}},[n("span",{style:{top:"-2.314em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k")])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.677em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"ser"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),n("span",{class:"mclose"},")")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.686em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})])])])])])],-1),_=a(`<p>假如article1就是真实的用户点击文章，也就是article1命中， 则s(user1,1)=1, s(user1,2-4)都是0， 如果article2是用户点击的文章， 则s(user,2)=1/2,s(user,1,3,4,5)都是0。也就是score(user)=命中第几条的倒数。如果都没中， 则score(user1)=0。 这个是合理的， 因为我们希望的就是命中的结果尽量靠前， 而此时分数正好比较高。</p><h3 id="赛题理解-1" tabindex="-1"><a class="header-anchor" href="#赛题理解-1"><span>赛题理解</span></a></h3><p>根据赛题简介，我们首先要明确我们此次比赛的目标： 根据用户历史浏览点击新闻的数据信息预测用户最后一次点击的新闻文章。从这个目标上看， 会发现此次比赛和我们之前遇到的普通的结构化比赛不太一样， 主要有两点：</p><ul><li>首先是目标上， 要预测最后一次点击的新闻文章，也就是我们给用户推荐的是新闻文章， 并不是像之前那种预测一个数或者预测数据哪一类那样的问题。</li><li>数据上， 通过给出的数据我们会发现， 这种数据也不是我们之前遇到的那种特征+标签的数据，而是基于了真实的业务场景， 拿到的用户的点击日志。</li></ul><p>所以拿到这个题目，我们的思考方向就是结合我们的目标，<strong>把该预测问题转成一个监督学习的问题(特征+标签)，然后我们才能进行ML，DL等建模预测</strong>。那么我们自然而然的就应该在心里会有这么几个问题：如何转成一个监督学习问题呢？转成一个什么样的监督学习问题呢？我们能利用的特征又有哪些呢？又有哪些模型可以尝试呢？此次面对数万级别的文章推荐，我们又有哪些策略呢？</p><p>当然这些问题不会在我们刚看到赛题之后就一下出来答案，但是只要有了问题之后，我们就能想办法解决问题了，比如上面的第二个问题，转成一个什么样的监督学习问题？</p><p>由于我们是预测用户最后一次点击的新闻文章，从36万篇文章中预测某一篇的话我们首先可能会想到这可能是一个多分类的问题(36万类里面选1)，但是如此庞大的分类问题，我们做起来可能比较困难，那么能不能转化一下？</p><p>既然是要预测最后一次点击的文章，那么如果我们能预测出某个用户最后一次对于某一篇文章会进行点击的概率，是不是就间接性的解决了这个问题呢？概率最大的那篇文章不就是用户最后一次可能点击的新闻文章吗？</p><p>这样就把原问题变成了一个点击率预测的问题(用户,文章)--&gt;点击的概率(软分类)，而这个问题，就是我们所熟悉的监督学习领域分类问题了，这样我们后面建模的时候，对于模型的选择就基本上有大致方向了，比如最简单的逻辑回归模型。</p><p>这样，我们对于该赛题的解决方案应该有了一个大致的解决思路，要先转成一个分类问题来做，而分类的标签就是用户是否会点击某篇文章，分类问题的特征中会有用户和文章，我们要训练一个分类模型，对某用户最后一次点击某篇文章的概率进行预测。</p><p>那么又会有几个问题：如何转成监督学习问题？训练集和测试集怎么制作？我们又能利用哪些特征？我们又可以尝试哪些模型？面对36万篇文章，20多万用户的推荐，我们又有哪些策略来缩减问题的规模？如何进行最后的预测？</p><h2 id="baseline" tabindex="-1"><a class="header-anchor" href="#baseline"><span>Baseline</span></a></h2><h3 id="导包" tabindex="-1"><a class="header-anchor" href="#导包"><span>导包</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># import packages</span>
<span class="token keyword">import</span> time<span class="token punctuation">,</span> math<span class="token punctuation">,</span> os
<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm
<span class="token keyword">import</span> gc
<span class="token keyword">import</span> pickle
<span class="token keyword">import</span> random
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime
<span class="token keyword">from</span> operator <span class="token keyword">import</span> itemgetter
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> warnings
<span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict
warnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">&#39;ignore&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>data_path <span class="token operator">=</span> <span class="token string">&#39;./data_raw/&#39;</span>
save_path <span class="token operator">=</span> <span class="token string">&#39;./tmp_results/&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="df节省内存函数" tabindex="-1"><a class="header-anchor" href="#df节省内存函数"><span>df节省内存函数</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 节约内存的一个标配函数</span>
<span class="token keyword">def</span> <span class="token function">reduce_mem</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>
    starttime <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    numerics <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;int16&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;int32&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;int64&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;float16&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;float32&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;float64&#39;</span><span class="token punctuation">]</span>
    start_mem <span class="token operator">=</span> df<span class="token punctuation">.</span>memory_usage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token operator">**</span><span class="token number">2</span>
    <span class="token keyword">for</span> col <span class="token keyword">in</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>
        col_type <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>dtypes
        <span class="token keyword">if</span> col_type <span class="token keyword">in</span> numerics<span class="token punctuation">:</span>
            c_min <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            c_max <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> pd<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span>c_min<span class="token punctuation">)</span> <span class="token keyword">or</span> pd<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span>c_max<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>col_type<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;int&#39;</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> c_min <span class="token operator">&gt;</span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int8<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token keyword">and</span> c_max <span class="token operator">&lt;</span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int8<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span>
                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int8<span class="token punctuation">)</span>
                <span class="token keyword">elif</span> c_min <span class="token operator">&gt;</span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int16<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token keyword">and</span> c_max <span class="token operator">&lt;</span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int16<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span>
                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int16<span class="token punctuation">)</span>
                <span class="token keyword">elif</span> c_min <span class="token operator">&gt;</span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token keyword">and</span> c_max <span class="token operator">&lt;</span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span>
                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>
                <span class="token keyword">elif</span> c_min <span class="token operator">&gt;</span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token keyword">and</span> c_max <span class="token operator">&lt;</span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span>
                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> c_min <span class="token operator">&gt;</span> np<span class="token punctuation">.</span>finfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float16<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token keyword">and</span> c_max <span class="token operator">&lt;</span> np<span class="token punctuation">.</span>finfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float16<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span>
                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float16<span class="token punctuation">)</span>
                <span class="token keyword">elif</span> c_min <span class="token operator">&gt;</span> np<span class="token punctuation">.</span>finfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token keyword">and</span> c_max <span class="token operator">&lt;</span> np<span class="token punctuation">.</span>finfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span>
                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span>
    end_mem <span class="token operator">=</span> df<span class="token punctuation">.</span>memory_usage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token operator">**</span><span class="token number">2</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;-- Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction),time spend:{:2.2f} min&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>end_mem<span class="token punctuation">,</span>
                                                                                                           <span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span>start_mem<span class="token operator">-</span>end_mem<span class="token punctuation">)</span><span class="token operator">/</span>start_mem<span class="token punctuation">,</span>
                                                                                                           <span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>starttime<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> df
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读取采样或全量数据" tabindex="-1"><a class="header-anchor" href="#读取采样或全量数据"><span>读取采样或全量数据</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># debug模式：从训练集中划出一部分数据来调试代码</span>
<span class="token keyword">def</span> <span class="token function">get_all_click_sample</span><span class="token punctuation">(</span>data_path<span class="token punctuation">,</span> sample_nums<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
        训练集中采样一部分数据调试
        data_path: 原数据的存储路径
        sample_nums: 采样数目（这里由于机器的内存限制，可以采样用户做）
    &quot;&quot;&quot;</span>
    all_click <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>data_path <span class="token operator">+</span> <span class="token string">&#39;train_click_log.csv&#39;</span><span class="token punctuation">)</span>
    all_user_ids <span class="token operator">=</span> all_click<span class="token punctuation">.</span>user_id<span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span>

    sample_user_ids <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>all_user_ids<span class="token punctuation">,</span> size<span class="token operator">=</span>sample_nums<span class="token punctuation">,</span> replace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> 
    all_click <span class="token operator">=</span> all_click<span class="token punctuation">[</span>all_click<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>sample_user_ids<span class="token punctuation">)</span><span class="token punctuation">]</span>
    
    all_click <span class="token operator">=</span> all_click<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_timestamp&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> all_click

<span class="token comment"># 读取点击数据，这里分成线上和线下，如果是为了获取线上提交结果应该讲测试集中的点击数据合并到总的数据中</span>
<span class="token comment"># 如果是为了线下验证模型的有效性或者特征的有效性，可以只使用训练集</span>
<span class="token keyword">def</span> <span class="token function">get_all_click_df</span><span class="token punctuation">(</span>data_path<span class="token operator">=</span><span class="token string">&#39;./data_raw/&#39;</span><span class="token punctuation">,</span> offline<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> offline<span class="token punctuation">:</span>
        all_click <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>data_path <span class="token operator">+</span> <span class="token string">&#39;train_click_log.csv&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        trn_click <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>data_path <span class="token operator">+</span> <span class="token string">&#39;train_click_log.csv&#39;</span><span class="token punctuation">)</span>
        tst_click <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>data_path <span class="token operator">+</span> <span class="token string">&#39;testA_click_log.csv&#39;</span><span class="token punctuation">)</span>

        all_click <span class="token operator">=</span> trn_click<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tst_click<span class="token punctuation">)</span>
    
    all_click <span class="token operator">=</span> all_click<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_timestamp&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> all_click
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 全量训练集</span>
all_click_df <span class="token operator">=</span> get_all_click_df<span class="token punctuation">(</span>offline<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取-用户-文章-点击时间字典" tabindex="-1"><a class="header-anchor" href="#获取-用户-文章-点击时间字典"><span>获取 用户 - 文章 - 点击时间字典</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 根据点击时间获取用户的点击文章序列   {user1: {item1: time1, item2: time2..}...}</span>
<span class="token keyword">def</span> <span class="token function">get_user_item_time</span><span class="token punctuation">(</span>click_df<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    click_df <span class="token operator">=</span> click_df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">&#39;click_timestamp&#39;</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">make_item_time_pair</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">&#39;click_timestamp&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    user_item_time_df <span class="token operator">=</span> click_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_timestamp&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> make_item_time_pair<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>\\
                                                            <span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">&#39;item_time_list&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    user_item_time_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>user_item_time_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> user_item_time_df<span class="token punctuation">[</span><span class="token string">&#39;item_time_list&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> user_item_time_dict
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取点击最多的topk个文章" tabindex="-1"><a class="header-anchor" href="#获取点击最多的topk个文章"><span>获取点击最多的Topk个文章</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 获取近期点击最多的文章</span>
<span class="token keyword">def</span> <span class="token function">get_item_topk_click</span><span class="token punctuation">(</span>click_df<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
    topk_click <span class="token operator">=</span> click_df<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span>
    <span class="token keyword">return</span> topk_click
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="itemcf的物品相似度计算" tabindex="-1"><a class="header-anchor" href="#itemcf的物品相似度计算"><span>itemCF的物品相似度计算</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">itemcf_sim</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
        文章与文章之间的相似性矩阵计算
        :param df: 数据表
        :item_created_time_dict:  文章创建时间的字典
        return : 文章与文章的相似性矩阵
        思路: 基于物品的协同过滤(详细请参考上一期推荐系统基础的组队学习)， 在多路召回部分会加上关联规则的召回策略
    &quot;&quot;&quot;</span>
    
    user_item_time_dict <span class="token operator">=</span> get_user_item_time<span class="token punctuation">(</span>df<span class="token punctuation">)</span>
    
    <span class="token comment"># 计算物品相似度</span>
    i2i_sim <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    item_cnt <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> user<span class="token punctuation">,</span> item_time_list <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>user_item_time_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 在基于商品的协同过滤优化的时候可以考虑时间因素</span>
        <span class="token keyword">for</span> i<span class="token punctuation">,</span> i_click_time <span class="token keyword">in</span> item_time_list<span class="token punctuation">:</span>
            item_cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
            i2i_sim<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> j<span class="token punctuation">,</span> j_click_time <span class="token keyword">in</span> item_time_list<span class="token punctuation">:</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">continue</span>
                i2i_sim<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
                
                i2i_sim<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span> <span class="token operator">/</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>item_time_list<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
                
    i2i_sim_ <span class="token operator">=</span> i2i_sim<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> related_items <span class="token keyword">in</span> i2i_sim<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j<span class="token punctuation">,</span> wij <span class="token keyword">in</span> related_items<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            i2i_sim_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> wij <span class="token operator">/</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>item_cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> item_cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 将得到的相似性矩阵保存到本地</span>
    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>i2i_sim_<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;itemcf_i2i_sim.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> i2i_sim_
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>i2i_sim <span class="token operator">=</span> itemcf_sim<span class="token punctuation">(</span>all_click_df<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="itemcf-的文章推荐" tabindex="-1"><a class="header-anchor" href="#itemcf-的文章推荐"><span>itemCF 的文章推荐</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 基于商品的召回i2i</span>
<span class="token keyword">def</span> <span class="token function">item_based_recommend</span><span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> user_item_time_dict<span class="token punctuation">,</span> i2i_sim<span class="token punctuation">,</span> sim_item_topk<span class="token punctuation">,</span> recall_item_num<span class="token punctuation">,</span> item_topk_click<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
        基于文章协同过滤的召回
        :param user_id: 用户id
        :param user_item_time_dict: 字典, 根据点击时间获取用户的点击文章序列   {user1: {item1: time1, item2: time2..}...}
        :param i2i_sim: 字典，文章相似性矩阵
        :param sim_item_topk: 整数， 选择与当前文章最相似的前k篇文章
        :param recall_item_num: 整数， 最后的召回文章数量
        :param item_topk_click: 列表，点击次数最多的文章列表，用户召回补全        
        return: 召回的文章列表 {item1:score1, item2: score2...}
        注意: 基于物品的协同过滤(详细请参考上一期推荐系统基础的组队学习)， 在多路召回部分会加上关联规则的召回策略
    &quot;&quot;&quot;</span>
    
    <span class="token comment"># 获取用户历史交互的文章</span>
    user_hist_items <span class="token operator">=</span> user_item_time_dict<span class="token punctuation">[</span>user_id<span class="token punctuation">]</span>
    
    item_rank <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> loc<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> click_time<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>user_hist_items<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j<span class="token punctuation">,</span> wij <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>i2i_sim<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>sim_item_topk<span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> j <span class="token keyword">in</span> user_hist_items<span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
                
            item_rank<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            item_rank<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span>  wij
    
    <span class="token comment"># 不足10个，用热门商品补全</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>item_rank<span class="token punctuation">)</span> <span class="token operator">&lt;</span> recall_item_num<span class="token punctuation">:</span>
        <span class="token keyword">for</span> i<span class="token punctuation">,</span> item <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>item_topk_click<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> item <span class="token keyword">in</span> item_rank<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 填充的item应该不在原来的列表中</span>
                <span class="token keyword">continue</span>
            item_rank<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">100</span> <span class="token comment"># 随便给个负数就行</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>item_rank<span class="token punctuation">)</span> <span class="token operator">==</span> recall_item_num<span class="token punctuation">:</span>
                <span class="token keyword">break</span>
    
    item_rank <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>item_rank<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>recall_item_num<span class="token punctuation">]</span>
        
    <span class="token keyword">return</span> item_rank
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="给每个用户根据物品的协同过滤推荐文章" tabindex="-1"><a class="header-anchor" href="#给每个用户根据物品的协同过滤推荐文章"><span>给每个用户根据物品的协同过滤推荐文章</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 定义</span>
user_recall_items_dict <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>

<span class="token comment"># 获取 用户 - 文章 - 点击时间的字典</span>
user_item_time_dict <span class="token operator">=</span> get_user_item_time<span class="token punctuation">(</span>all_click_df<span class="token punctuation">)</span>

<span class="token comment"># 去取文章相似度</span>
i2i_sim <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;itemcf_i2i_sim.pkl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 相似文章的数量</span>
sim_item_topk <span class="token operator">=</span> <span class="token number">10</span>

<span class="token comment"># 召回文章数量</span>
recall_item_num <span class="token operator">=</span> <span class="token number">10</span>

<span class="token comment"># 用户热度补全</span>
item_topk_click <span class="token operator">=</span> get_item_topk_click<span class="token punctuation">(</span>all_click_df<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> user <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>all_click_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    user_recall_items_dict<span class="token punctuation">[</span>user<span class="token punctuation">]</span> <span class="token operator">=</span> item_based_recommend<span class="token punctuation">(</span>user<span class="token punctuation">,</span> user_item_time_dict<span class="token punctuation">,</span> i2i_sim<span class="token punctuation">,</span> 
                                                        sim_item_topk<span class="token punctuation">,</span> recall_item_num<span class="token punctuation">,</span> item_topk_click<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="召回字典转换成df" tabindex="-1"><a class="header-anchor" href="#召回字典转换成df"><span>召回字典转换成df</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 将字典的形式转换成df</span>
user_item_score_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> user<span class="token punctuation">,</span> items <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>user_recall_items_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> item<span class="token punctuation">,</span> score <span class="token keyword">in</span> items<span class="token punctuation">:</span>
        user_item_score_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>user<span class="token punctuation">,</span> item<span class="token punctuation">,</span> score<span class="token punctuation">]</span><span class="token punctuation">)</span>

recall_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>user_item_score_list<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成提交文件" tabindex="-1"><a class="header-anchor" href="#生成提交文件"><span>生成提交文件</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 生成提交文件</span>
<span class="token keyword">def</span> <span class="token function">submit</span><span class="token punctuation">(</span>recall_df<span class="token punctuation">,</span> topk<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> model_name<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    recall_df <span class="token operator">=</span> recall_df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    recall_df<span class="token punctuation">[</span><span class="token string">&#39;rank&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> recall_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 判断是不是每个用户都有5篇文章及以上</span>
    tmp <span class="token operator">=</span> recall_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">&#39;rank&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> tmp<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> topk
    
    <span class="token keyword">del</span> recall_df<span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span>
    submit <span class="token operator">=</span> recall_df<span class="token punctuation">[</span>recall_df<span class="token punctuation">[</span><span class="token string">&#39;rank&#39;</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> topk<span class="token punctuation">]</span><span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rank&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    submit<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">else</span> col <span class="token keyword">for</span> col <span class="token keyword">in</span> submit<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>droplevel<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token comment"># 按照提交格式定义列名</span>
    submit <span class="token operator">=</span> submit<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">&#39;article_1&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">&#39;article_2&#39;</span><span class="token punctuation">,</span> 
                                                  <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">&#39;article_3&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">&#39;article_4&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">&#39;article_5&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    
    save_name <span class="token operator">=</span> save_path <span class="token operator">+</span> model_name <span class="token operator">+</span> <span class="token string">&#39;_&#39;</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%m-%d&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;.csv&#39;</span>
    submit<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>save_name<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 获取测试集</span>
tst_click <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>data_path <span class="token operator">+</span> <span class="token string">&#39;testA_click_log.csv&#39;</span><span class="token punctuation">)</span>
tst_users <span class="token operator">=</span> tst_click<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 从所有的召回数据中将测试集中的用户选出来</span>
tst_recall <span class="token operator">=</span> recall_df<span class="token punctuation">[</span>recall_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>tst_users<span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment"># 生成提交文件</span>
submit<span class="token punctuation">(</span>tst_recall<span class="token punctuation">,</span> topk<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> model_name<span class="token operator">=</span><span class="token string">&#39;itemcf_baseline&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本节内容主要包括赛题简介，数据概况，评价方式以及对该赛题进行了一个总体上的思路分析，作为竞赛前的预热，旨在帮助学习者们能够更好切入该赛题，为后面的学习内容打下一个良好的基础。最后我们给出了关于本赛题的一个简易Baseline， 帮助学习者们先了解一下新闻推荐比赛的一个整理流程， 接下来我们就对于流程中的每个步骤进行详细的介绍。</p><p>今天的学习比较简单，下面整理一下关于赛题理解的一些经验：</p><ul><li>赛题理解究竟是在理解什么?</li></ul><blockquote><p><strong>理解赛题</strong>：从直观上对问题进行梳理， 分析问题的目标，到底要让做什么事情, <strong>这个非常重要</strong></p><p><strong>理解数据</strong>：对赛题数据有一个初步了解，知道和任务相关的数据字段和数据字段的类型， 数据之间的内在关联等，大体梳理一下哪些数据会对我们解决问题非常有用，方便后面我们的数据分析和特征工程。</p><p><strong>理解评估指标</strong>：评估指标是检验我们提出的方法，我们给出结果好坏的标准，只有正确的理解了评估指标，我们才能进行更好的训练模型，更好的进行预测。此外，很多情况下，线上验证是有一定的时间和次数限制的，<strong>所以在比赛中构建一个合理的本地的验证集和验证的评价指标是很关键的步骤，能有效的节省很多时间</strong>。 不同的指标对于同样的预测结果是具有误差敏感的差异性的所以不同的评价指标会影响后续一些预测的侧重点。</p></blockquote><ul><li><p>有了赛题理解之后，我们该做什么？</p><blockquote><p>在对于赛题有了一定的了解后，分析清楚了问题的类型性质和对于数据理解 的这一基础上，我们可以梳理一个解决赛题的一个大题思路和框架。</p><p>我们至少要有一些相应的理解分析，比如<strong>这题的难点可能在哪里，关键点可能在哪里，哪些地方可以挖掘更好的特征</strong>.</p><p>用什么样得线下验证方式更为稳定，<strong>出现了过拟合或者其他问题，估摸可以用什么方法去解决这些问题</strong></p></blockquote><p>这时是在一个宏观的大体下分析的，有助于摸清整个题的思路脉络，以及后续的分析方向。</p></li></ul>`,42);function b(h,g){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,k,r,n("blockquote",null,[n("p",null,[s("赛题页面："),n("a",d,[s("https://tianchi.aliyun.com/competition/entrance/531842/introduction"),i(t)])])]),m,v,_])}const w=p(l,[["render",b],["__file","ch4.1.1_new_reco.html.vue"]]),x=JSON.parse('{"path":"/rcmd/ch04/ch4.1/ch4.1.1_new_reco.html","title":"赛题理解&Baseline","lang":"zh-CN","frontmatter":{"date":"2024-06-29T00:00:00.000Z","title":"赛题理解&Baseline","author":"Genhiy","order":1,"category":["推荐系统"],"tag":["无标签"],"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"赛题理解","slug":"赛题理解","link":"#赛题理解","children":[{"level":3,"title":"赛题简介","slug":"赛题简介","link":"#赛题简介","children":[]},{"level":3,"title":"数据概况","slug":"数据概况","link":"#数据概况","children":[]},{"level":3,"title":"评价方式理解","slug":"评价方式理解","link":"#评价方式理解","children":[]},{"level":3,"title":"赛题理解","slug":"赛题理解-1","link":"#赛题理解-1","children":[]}]},{"level":2,"title":"Baseline","slug":"baseline","link":"#baseline","children":[{"level":3,"title":"导包","slug":"导包","link":"#导包","children":[]},{"level":3,"title":"df节省内存函数","slug":"df节省内存函数","link":"#df节省内存函数","children":[]},{"level":3,"title":"读取采样或全量数据","slug":"读取采样或全量数据","link":"#读取采样或全量数据","children":[]},{"level":3,"title":"获取 用户 - 文章 - 点击时间字典","slug":"获取-用户-文章-点击时间字典","link":"#获取-用户-文章-点击时间字典","children":[]},{"level":3,"title":"获取点击最多的Topk个文章","slug":"获取点击最多的topk个文章","link":"#获取点击最多的topk个文章","children":[]},{"level":3,"title":"itemCF的物品相似度计算","slug":"itemcf的物品相似度计算","link":"#itemcf的物品相似度计算","children":[]},{"level":3,"title":"itemCF 的文章推荐","slug":"itemcf-的文章推荐","link":"#itemcf-的文章推荐","children":[]},{"level":3,"title":"给每个用户根据物品的协同过滤推荐文章","slug":"给每个用户根据物品的协同过滤推荐文章","link":"#给每个用户根据物品的协同过滤推荐文章","children":[]},{"level":3,"title":"召回字典转换成df","slug":"召回字典转换成df","link":"#召回字典转换成df","children":[]},{"level":3,"title":"生成提交文件","slug":"生成提交文件","link":"#生成提交文件","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"readingTime":{"minutes":12.89,"words":3868},"filePathRelative":"rcmd/ch04/ch4.1/ch4.1.1_new_reco.md","localizedDate":"2024年6月29日"}');export{w as comp,x as data};
