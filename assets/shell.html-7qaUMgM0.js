import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as h,o as i,c as a,a as e,d as l,b as n,e as s}from"./app-SD3SAAIy.js";const c={},r={class:"hint-container tip"},p=e("p",{class:"hint-container-title"},"提示",-1),d={href:"https://zhuanlan.zhihu.com/p/452686607",target:"_blank",rel:"noopener noreferrer"},m=s('<h2 id="基础内容" tabindex="-1"><a class="header-anchor" href="#基础内容"><span>基础内容</span></a></h2><ul><li>shell脚本都是以#!开头，告知系统该文件的执行需要一个解释器。 一般是<code>#!/bin/sh</code>和<code>#!/bin/bash</code>。</li><li>执行脚本：<code>sh helloworld.sh</code>或者<code>bash helloworld.sh</code>。</li><li>echo：Shell 的 echo 指令与 PHP 的 echo 指令类似，都是用于字符串的输出。注意，字符串可以不加双引号直接跟在echo后面。echo -n 表示不换行输出。显示日期：echo `date`。</li><li>read：从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量。</li><li>自变量命名：变量名=变量值，等号两侧不能有空格（与其它语言可设空格的区别之处）。变量名一般习惯使用大写。使用变量：$变量名。</li></ul><h2 id="部分语句作用" tabindex="-1"><a class="header-anchor" href="#部分语句作用"><span>部分语句作用</span></a></h2><h3 id="set-x-e-o-pipefail" tabindex="-1"><a class="header-anchor" href="#set-x-e-o-pipefail"><span>set -x -e -o pipefail</span></a></h3><p>在Shell脚本（通常以.sh为文件扩展名）中，set命令用于改变shell的选项，这些选项可以控制shell的行为。下面是set -x -e -o pipefail中各个选项的解释：</p><ul><li><p>-x：这个选项会启用shell的调试模式。当你在脚本中使用set -x时，shell会打印出它执行的每条命令和它们的参数，这有助于调试脚本，因为你可以清楚地看到哪些命令正在被执行。</p></li><li><p>-e：这个选项会让shell在任何语句的执行结果不是true（即退出状态不是0）时立即退出。也就是说，如果脚本中的某个命令失败了（通常是由于错误），脚本会停止执行，不会继续执行后续的命令。这有助于避免错误继续传播，导致更复杂的问题。</p></li><li><p>-o pipefail：这个选项是Bash特有的，它会影响管道操作中的错误处理。默认情况下，如果一个管道命令中的某个部分失败，整个管道命令的退出状态是最后一个命令的退出状态。启用pipefail后，如果管道命令中的任何部分失败，整个管道命令都会失败，并且其退出状态将反映失败部分的退出状态。这使得错误更容易被检测到。</p></li></ul><p>综合来看，set -x -e -o pipefail通常用于编写健壮和易于调试的脚本，因为它提供了详细的执行输出，确保了命令失败时脚本能够立即停止，并且能够更准确地捕捉到管道操作中的错误。</p>',7);function u(f,b){const t=h("ExternalLinkIcon");return i(),a("div",null,[e("div",r,[p,e("p",null,[l("主要内容可以参考："),e("a",d,[l("一文掌握shell脚本的基本语法"),n(t)]),l("，本文仅作以补充。")])]),m])}const x=o(c,[["render",u],["__file","shell.html.vue"]]),y=JSON.parse('{"path":"/zsk/tech/code/shell.html","title":"shell脚本基本语法","lang":"zh-CN","frontmatter":{"date":"2024-04-24T00:00:00.000Z","title":"shell脚本基本语法","author":"Genhiy","order":6,"category":["Coding"],"tag":["Shell"],"description":"提示 主要内容可以参考：一文掌握shell脚本的基本语法，本文仅作以补充。 基础内容 shell脚本都是以#!开头，告知系统该文件的执行需要一个解释器。 一般是#!/bin/sh和#!/bin/bash。 执行脚本：sh helloworld.sh或者bash helloworld.sh。 echo：Shell 的 echo 指令与 PHP 的 ech...","head":[["meta",{"property":"og:url","content":"https://github.com/Genhiy/Genhiy.github.io/zsk/tech/code/shell.html"}],["meta",{"property":"og:site_name","content":"Genhiy"}],["meta",{"property":"og:title","content":"shell脚本基本语法"}],["meta",{"property":"og:description","content":"提示 主要内容可以参考：一文掌握shell脚本的基本语法，本文仅作以补充。 基础内容 shell脚本都是以#!开头，告知系统该文件的执行需要一个解释器。 一般是#!/bin/sh和#!/bin/bash。 执行脚本：sh helloworld.sh或者bash helloworld.sh。 echo：Shell 的 echo 指令与 PHP 的 ech..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Genhiy"}],["meta",{"property":"article:tag","content":"Shell"}],["meta",{"property":"article:published_time","content":"2024-04-24T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"shell脚本基本语法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-24T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Genhiy\\"}]}"]]},"headers":[{"level":2,"title":"基础内容","slug":"基础内容","link":"#基础内容","children":[]},{"level":2,"title":"部分语句作用","slug":"部分语句作用","link":"#部分语句作用","children":[{"level":3,"title":"set -x -e -o pipefail","slug":"set-x-e-o-pipefail","link":"#set-x-e-o-pipefail","children":[]}]}],"git":{},"readingTime":{"minutes":2.23,"words":669},"filePathRelative":"zsk/tech/code/shell.md","localizedDate":"2024年4月24日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>主要内容可以参考：<a href=\\"https://zhuanlan.zhihu.com/p/452686607\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">一文掌握shell脚本的基本语法</a>，本文仅作以补充。</p>\\n</div>\\n<h2>基础内容</h2>\\n<ul>\\n<li>shell脚本都是以#!开头，告知系统该文件的执行需要一个解释器。 一般是<code>#!/bin/sh</code>和<code>#!/bin/bash</code>。</li>\\n<li>执行脚本：<code>sh helloworld.sh</code>或者<code>bash helloworld.sh</code>。</li>\\n<li>echo：Shell 的 echo 指令与 PHP 的 echo 指令类似，都是用于字符串的输出。注意，字符串可以不加双引号直接跟在echo后面。echo -n 表示不换行输出。显示日期：echo `date`。</li>\\n<li>read：从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量。</li>\\n<li>自变量命名：变量名=变量值，等号两侧不能有空格（与其它语言可设空格的区别之处）。变量名一般习惯使用大写。使用变量：$变量名。</li>\\n</ul>","autoDesc":true}');export{x as comp,y as data};
