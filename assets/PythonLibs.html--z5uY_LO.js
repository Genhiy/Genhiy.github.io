import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,d as s,b as p,e as t}from"./app-SD3SAAIy.js";const i={},u=t(`<h1 id="pythonlibs" tabindex="-1"><a class="header-anchor" href="#pythonlibs"><span>PythonLibs</span></a></h1><p>pip提供了一个选项 --no-dependencies ，用于指定不安装包的依赖项。 通过使用这个选项，我们可以强制pip只安装指定的包，而不检查和安装依赖关系。</p><h2 id="调试相关库" tabindex="-1"><a class="header-anchor" href="#调试相关库"><span>调试相关库</span></a></h2><h3 id="pdb库" tabindex="-1"><a class="header-anchor" href="#pdb库"><span>pdb库</span></a></h3><p>使用方法：在代码中添加&#39;import pdb;pdb.set_trace()&#39;，当你在命令行看到(Pdb)时，说明已经正确打开了pdb，然后就可以开始输入pdb命令了。</p><p>常用命令：</p><ul><li>l (list): 查看当前位置前后11行源代码（多次会翻页）； ll: 查看当前函数或框架内的所有代码。</li><li>s (step): 执行下一行（能进入函数体）； n (next): 执行下一行（不进入函数体）； r (return): 执行下一行（在函数体中时会直接执行到函数返回处）。</li><li>p: 后跟变量，表示打印该变量值。</li><li>cl: 不带参数用于清除所有断点，带参数则清除指定行或当前文件制定序号的断点。</li><li>b (break): 不带参数表示查看断点位置，带lineno（行号）表示把断点添加到该行，带filename:lineno表示把断点添加到filename中的第lineno行，带functionname（函数名）表示把断点添加到该函数执行的第一行。tbreak的使用同b，只不过其执行一次后自动删除，故被称为临时断点。</li><li>c (continue): 持续执行下去直到遇到断点。unt lineno: 持续执行直到运行到指定行。</li><li>a: 在函数中时打印函数的参数和参数的值。</li><li>whatis expression: 打印表达式的类型，常用来打印变量值。</li><li>interact: 启动一个python的交互式解释器，使用当前代码的全局命名空间（使用ctrl+d返回pdb）。</li><li>w: 打印堆栈信息，最新的帧在最底部。箭头表示当前帧。</li><li>q: 退出pdb。</li></ul><p><strong>pdb.pm():</strong></p><p>前面所述都是在程序开始运行时就插入断点，用pdb进行调试，即事前调试。其实 pdb 还可以进行事后调试，即在程序有bug运行奔溃后用python调试器进行查看。比如 test.py 显然是有 bug 的：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># test.py</span>
<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> n<span class="token operator">+</span><span class="token number">1</span>
add<span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接运行程序会崩溃，这样我们是无法进行调试的。那么当程序崩溃后，我们该怎样去调试呢？我们可以用<code>python -i test.py</code>进行简单调试，-i 选项可以让程序结束后打开一个交互式shell，在程序结束后出现 &gt;&gt;&gt; 符号后，我们输入：<code>import pdb; pdb.pm()</code>，其中 pdb.pm() 用于程序发生异常导致奔溃后的事后调试，可以跟踪异常程序最后的堆在信息。</p><h3 id="ipdb库" tabindex="-1"><a class="header-anchor" href="#ipdb库"><span>ipdb库</span></a></h3><p>pdb 是 Python 的标准库，无需安装直接使用，ipdb 为第三方库，需要使用 pip 安装后使用。</p><p>ipdb 之于 pdb，就像 ipython 之于 python，实现的功能相同，但 ipdb 具有语法高亮、 tab 补全、更友好的堆栈信息等优势。</p><ul><li>j(jump): j line_number，跳过代码片段，直接执行指定行号所在的代码</li><li>q(quit): 推出调试，清除所有信息</li><li>bt / w(where) : 打印堆栈轨迹</li></ul><h3 id="pytest库" tabindex="-1"><a class="header-anchor" href="#pytest库"><span>pytest库</span></a></h3><p>pytest是一个非常成熟的全功能的Python测试框架，简单灵活容易上手，支持参数化，能够支持简单的单元测试和复杂的功能测试，pytest具有很多第三方插件，并且可以自定义扩展。</p><p>在pytest框架中，有如下约束：</p><ul><li>所有的单测文件名都需要满足test_.py格式或_test.py格式。</li><li>在单测文件中，测试类以Test开头，并且不能带有 init 方法(注意：定义class时，需要以T开头，不然pytest是不会去运行该class的)。</li><li>在单测类中，可以包含一个或多个test_开头的函数。</li></ul><p>此时，在执行pytest命令时，会自动从当前目录及子目录中寻找符合上述约束的测试函数来执行。</p><h4 id="创建测试用例" tabindex="-1"><a class="header-anchor" href="#创建测试用例"><span>创建测试用例</span></a></h4><ul><li>创建test_开头的文件，测试文件以 test_xx.py 命名需要以 test_开头（或_test 结尾）</li><li>若是新建类，测试类需要以 Test_开头，并且不能带有 init 方法（Test开头的类，这个类也叫做测试套件，类下面的是函数才是测试用例）</li><li>测试用例（方法）需要以 test_开头</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> pytest  <span class="token comment">#导入pytest模块</span>


<span class="token keyword">def</span> <span class="token function">test_beifan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#测试用例</span>
    <span class="token keyword">pass</span>
    
<span class="token keyword">class</span> <span class="token class-name">TestBaili</span><span class="token punctuation">:</span>  <span class="token comment">#测试套件</span>
    <span class="token keyword">def</span> <span class="token function">test_a</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#测试用例，第一个测试方法</span>
        <span class="token keyword">pass</span>
        
    <span class="token keyword">def</span> <span class="token function">test_b</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#测试用例，第二个测试方法</span>
        <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后命令行输入<code>pytest ./test_tt.py</code>即可执行。</p>`,24),r=n("code",null,"@pytest.fixture",-1),d={href:"https://zhuanlan.zhihu.com/p/87775743",target:"_blank",rel:"noopener noreferrer"},k=t(`<h3 id="line-profiler库" tabindex="-1"><a class="header-anchor" href="#line-profiler库"><span>line_profiler库</span></a></h3><p>profile和line_profiler两个模块都是性能分析工具。有时候需要找到代码中运行速度较慢处或瓶颈，可以通过这两模块实现，而不再使用time计时。 line_profiler模块可以记录每行代码的运行时间和耗时百分比。</p><h2 id="参数管理库" tabindex="-1"><a class="header-anchor" href="#参数管理库"><span>参数管理库</span></a></h2><h3 id="argparse库" tabindex="-1"><a class="header-anchor" href="#argparse库"><span>argparse库</span></a></h3><p>https://docs.python.org/zh-cn/3/howto/argparse.html</p><p>示例argparse库读取代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">&#39;PyTorch Point Cloud Semantic Segmentation&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--config&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&#39;/home/dyh/models/SphereFormer-master/config/my_data/my_nuscenes_spherical_transformer.yaml&#39;</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;config file&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;opts&#39;</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;see my_nuscenes_spherical_transformer.yaml for all options&#39;</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span>argparse<span class="token punctuation">.</span>REMAINDER<span class="token punctuation">)</span>
    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> args<span class="token punctuation">.</span>config <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span>
    cfg <span class="token operator">=</span> config<span class="token punctuation">.</span>load_cfg_from_cfg_file<span class="token punctuation">(</span>args<span class="token punctuation">.</span>config<span class="token punctuation">)</span>
    <span class="token keyword">if</span> args<span class="token punctuation">.</span>opts <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        cfg <span class="token operator">=</span> config<span class="token punctuation">.</span>merge_cfg_from_list<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> args<span class="token punctuation">.</span>opts<span class="token punctuation">)</span>
    <span class="token keyword">return</span> cfg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),m={href:"https://blog.csdn.net/lllxxq141592654/article/details/81288741",target:"_blank",rel:"noopener noreferrer"},b=n("h3",{id:"hydra库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#hydra库"},[n("span",null,"hydra库")])],-1),h={href:"https://zhuanlan.zhihu.com/p/662221581",target:"_blank",rel:"noopener noreferrer"},v=n("h2",{id:"终端及数据可视化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#终端及数据可视化"},[n("span",null,"终端及数据可视化")])],-1),g=n("h3",{id:"rich库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rich库"},[n("span",null,"rich库")])],-1),y={href:"https://zhuanlan.zhihu.com/p/394105084",target:"_blank",rel:"noopener noreferrer"},f=n("h3",{id:"wandb库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#wandb库"},[n("span",null,"wandb库")])],-1),_={href:"https://docs.wandb.ai/guides/hosting",target:"_blank",rel:"noopener noreferrer"},w=t(`<p>在加入wandb对训练/推理进行可视化时，由于网络等原因，设置<code>wandb.mode=offline</code>使得代码正常运行。但是W&amp;B网站上却不能同步看到可视化结果，需要手动同步数据。</p><p>解决方案：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>cd your<span class="token operator">-</span>wandb<span class="token operator">-</span>log<span class="token operator">-</span>folder <span class="token comment"># 需更改路径</span>
wandb sync wandb<span class="token operator">/</span>offline<span class="token operator">-</span>run<span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span><span class="token operator">*</span> <span class="token comment"># 无需更改</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>范例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> wandb
<span class="token keyword">import</span> random

<span class="token comment"># start a new wandb run to track this script</span>
wandb<span class="token punctuation">.</span>init<span class="token punctuation">(</span>
    <span class="token comment"># set the wandb project where this run will be logged</span>
    project<span class="token operator">=</span><span class="token string">&quot;my-awesome-project&quot;</span><span class="token punctuation">,</span>
    <span class="token comment"># track hyperparameters and run metadata</span>
    config<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;learning_rate&quot;</span><span class="token punctuation">:</span> <span class="token number">0.02</span><span class="token punctuation">,</span> <span class="token string">&quot;architecture&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;CNN&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dataset&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;CIFAR-100&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;epochs&quot;</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token comment"># simulate training</span>
epochs <span class="token operator">=</span> <span class="token number">10</span>
offset <span class="token operator">=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">5</span>
<span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    acc <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token operator">-</span>epoch <span class="token operator">-</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> epoch <span class="token operator">-</span> offset
    loss <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token operator">-</span>epoch <span class="token operator">+</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> epoch <span class="token operator">+</span> offset
    <span class="token comment"># log metrics to wandb</span>
    wandb<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;acc&quot;</span><span class="token punctuation">:</span> acc<span class="token punctuation">,</span> <span class="token string">&quot;loss&quot;</span><span class="token punctuation">:</span> loss<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># [optional] finish the wandb run, necessary in notebooks</span>
wandb<span class="token punctuation">.</span>finish<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="logging库" tabindex="-1"><a class="header-anchor" href="#logging库"><span>logging库</span></a></h3><p>https://zhuanlan.zhihu.com/p/166671955</p><p>在部署项目时，不可能直接将所有的信息都输出到控制台中，我们可以将这些信息记录到日志文件中，这样不仅方便我们查看程序运行时的情况，也可以在项目出现故障时根据程序运行时产生的日志快速定位问题出现的位置。</p><p>示例代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> logging
<span class="token comment"># 设置打印日志的级别，level级别以上的日志会打印出</span>
<span class="token comment"># level=logging.DEBUG 、INFO 、WARNING、ERROR、CRITICAL</span>
<span class="token keyword">def</span> <span class="token function">log_testing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 此处进行Logging.basicConfig() 设置，后面设置无效</span>
    logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">&#39;log.txt&#39;</span><span class="token punctuation">,</span>
                     <span class="token builtin">format</span> <span class="token operator">=</span> <span class="token string">&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s-%(funcName)s&#39;</span><span class="token punctuation">,</span>
                     level<span class="token operator">=</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>
    logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&#39;debug，用来打印一些调试信息，级别最低&#39;</span><span class="token punctuation">)</span>
    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&#39;info，用来打印一些正常的操作信息&#39;</span><span class="token punctuation">)</span>
    logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">&#39;waring，用来用来打印警告信息&#39;</span><span class="token punctuation">)</span>
    logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">&#39;error，一般用来打印一些错误信息&#39;</span><span class="token punctuation">)</span>
    logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">&#39;critical，用来打印一些致命的错误信息，等级最高&#39;</span><span class="token punctuation">)</span>

log_testing<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tqdm库" tabindex="-1"><a class="header-anchor" href="#tqdm库"><span>tqdm库</span></a></h3><p>显示循环的进度条的库。tqdm可以在长循环中添加一个进度提示信息，用户只需要封装任意的迭代器 tqdm(iterator)，是一个快速、扩展性强的进度条工具库。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> time
<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">.01</span><span class="token punctuation">)</span>    <span class="token comment">#进度条每0.1s前进一次，总时间为1000*0.1=100s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pkg-resources" tabindex="-1"><a class="header-anchor" href="#pkg-resources"><span>pkg_resources</span></a></h3>`,14),x={href:"https://geek-docs.com/python/python-ask-answer/102_python_how_to_list_all_installed_packages_and_their_versions_in_python.html",target:"_blank",rel:"noopener noreferrer"},P=t(`<p>可以使用python内置的pkg_resources模块来动态获取已安装软件包的版本信息。此模块提供了许多有用的函数和方法来处理软件包。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> pkg_resources

installed_packages <span class="token operator">=</span> pkg_resources<span class="token punctuation">.</span>working_set

<span class="token keyword">for</span> package <span class="token keyword">in</span> installed_packages<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>package<span class="token punctuation">.</span>key<span class="token punctuation">,</span> package<span class="token punctuation">.</span>version<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="python深度学习相关库" tabindex="-1"><a class="header-anchor" href="#python深度学习相关库"><span>python深度学习相关库</span></a></h2><h3 id="catalyst" tabindex="-1"><a class="header-anchor" href="#catalyst"><span>catalyst</span></a></h3><p>官方文档：https://catalyst-team.github.io/catalyst/</p><p>catalyst是一个用于深度学习研发的PyTorch框架。专注于可重现性、快速实验和代码库重用。打破循环-使用催化剂！</p><p>Catalyst帮助您在几行代码中编写紧凑但功能齐全的深度学习管道。您将获得一个带有指标、早期停止、模型检查点和其他功能的训练循环，而无需样板。</p><h3 id="torch-nn-module" tabindex="-1"><a class="header-anchor" href="#torch-nn-module"><span>torch.nn.Module</span></a></h3><p>源码解析：https://zhuanlan.zhihu.com/p/340453841</p><p>继承 nn.Module 的模块主要重载 init、 forward、 和 extra_repr 函数，含有 parameters 的模块还会实现 reset_parameters 函数来初始化参数</p><p>继承 nn.Module 的神经网络模块在实现自己的 <strong>init</strong> 函数时，一定要先调用 super().<strong>init</strong>()。只有这样才能正确地初始化自定义的神经网络模块，否则会缺少成员变量而导致模块被调用时出错。实际上，如果没有提前调用 super().<strong>init</strong>()，在增加模块的 parameter 或者 buffer 的时候，被调用的 <strong>setattr</strong> 函数也会检查出父类 nn.Module 没被正确地初始化并报错。</p><p>[PyTorch 学习笔记] 3.1 模型创建步骤与 nn.Module https://zhuanlan.zhihu.com/p/203405689</p><p>创建模型有 2 个要素：构建子模块和拼接子模块。如 LeNet 里包含很多卷积层、池化层、全连接层，当我们构建好所有的子模块之后，按照一定的顺序拼接起来。</p><p>这里以 LeNet 为例，继承<code>nn.Module</code>，必须实现<code>__init__()</code> 方法和<code>forward()</code>方法。其中<code>__init__()</code> 方法里创建子模块，在<code>forward()</code>方法里拼接子模块。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">LeNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
 <span class="token comment"># 子模块创建</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> classes<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>LeNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> classes<span class="token punctuation">)</span>
 <span class="token comment"># 子模块拼接</span>
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        out <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        out <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        out <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>
        out <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        out <span class="token operator">=</span> out<span class="token punctuation">.</span>view<span class="token punctuation">(</span>out<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        out <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>
        out <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>
        out <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>out<span class="token punctuation">)</span>
        <span class="token keyword">return</span> out
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们调用<code>net = LeNet(classes=2)</code>创建模型时，会调用<code>__init__()</code>方法创建模型的子模块。</p><p>当我们在训练时调用<code>outputs = net(inputs)</code>时，会进入<code>module.py</code>的<code>call()</code>函数中：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token builtin">input</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> hook <span class="token keyword">in</span> self<span class="token punctuation">.</span>_forward_pre_hooks<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            result <span class="token operator">=</span> hook<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> result <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    result <span class="token operator">=</span> <span class="token punctuation">(</span>result<span class="token punctuation">,</span><span class="token punctuation">)</span>
                <span class="token builtin">input</span> <span class="token operator">=</span> result
        <span class="token keyword">if</span> torch<span class="token punctuation">.</span>_C<span class="token punctuation">.</span>_get_tracing_state<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            result <span class="token operator">=</span> self<span class="token punctuation">.</span>_slow_forward<span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">input</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            result <span class="token operator">=</span> self<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">input</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终会调用<code>result = self.forward(*input, **kwargs)</code>函数，该函数会进入模型的<code>forward()</code>函数中，进行前向传播。</p><h3 id="mmcv" tabindex="-1"><a class="header-anchor" href="#mmcv"><span>mmcv</span></a></h3><p>官方文档：https://mmcv.readthedocs.io/zh_CN/latest/</p><p>MMCV 是一个面向计算机视觉的基础库，它提供了以下功能：图像和视频处理、图像和标注结果可视化、图像变换、多种 CNN 网络结构、高质量实现的常见 CUDA 算子。</p><h2 id="python文件处理库" tabindex="-1"><a class="header-anchor" href="#python文件处理库"><span>python文件处理库</span></a></h2><h3 id="io-bytesio" tabindex="-1"><a class="header-anchor" href="#io-bytesio"><span>io.BytesIO</span></a></h3><p>使用cv2、io.BytesIO处理图片二进制数据:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token number">1</span>、使用cv2
<span class="token keyword">import</span> cv2
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
img_url <span class="token operator">=</span> <span class="token string">r&#39;C:\\Users\\xxc\\Desktop\\capture.png&#39;</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>img_url<span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    a <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
 
<span class="token comment"># 二进制数据流转np.ndarray [np.uint8: 8位像素]</span>
img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imdecode<span class="token punctuation">(</span>np<span class="token punctuation">.</span>frombuffer<span class="token punctuation">(</span>a<span class="token punctuation">,</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>IMREAD_COLOR<span class="token punctuation">)</span>
<span class="token comment"># # 将bgr转为rbg</span>
rgb_img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_RGB2BGR<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>rgb_img<span class="token punctuation">)</span>
<span class="token comment"># np.ndarray转IMAGE</span>
a <span class="token operator">=</span> Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>rgb_img<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token comment"># 显示图片</span>
a<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
 
<span class="token number">2</span>、使用io<span class="token punctuation">.</span>BytesIO
<span class="token keyword">import</span> io
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
img_url <span class="token operator">=</span> <span class="token string">r&#39;C:\\Users\\xxc\\Desktop\\capture.png&#39;</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>img_url<span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    a <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 将字节对象转为Byte字节流数据,供Image.open使用</span>
byte_stream <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>byte_stream<span class="token punctuation">)</span><span class="token punctuation">)</span>
roiImg <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>byte_stream<span class="token punctuation">)</span>  
<span class="token comment"># 图片保存 </span>
roiImg<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">r&#39;C:\\Users\\xxc\\Desktop\\save.png&#39;</span><span class="token punctuation">)</span>
 
小结：cv2和io<span class="token punctuation">.</span>BytesIO相比，多了一步bgr转rbg，可能使用io<span class="token punctuation">.</span>BytesIO更加方便。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="glob库" tabindex="-1"><a class="header-anchor" href="#glob库"><span>glob库</span></a></h3><p>glob模块用于快速获取一定格式的文件夹或文件路径的列表，但匹配模式较少，一共有三种通配符：*、?、[]，属于轻量级。路径分隔符（Unix的/，Windows的\\）都不会被匹配。</p><ol><li>glob.glob 方法，根据传入的匹配模式，返回对应的文件夹和文件名列表</li><li>glob.iglob 方法，根据传入的匹配模式，返回对应的文件夹和文件名的迭代器</li><li>glob.escape 方法，如果文件路径中本身带有通配符，会返回推荐使用的匹配模式</li></ol><h3 id="pickle库" tabindex="-1"><a class="header-anchor" href="#pickle库"><span>pickle库</span></a></h3><p>pickle模块是python专用的持久化模块，可以持久化包括自定义类在内的各种数据，比较适合python本身复杂数据的存贮。但是持久化后的字串是不可认读的，并且只能用于python环境，不能用作与其它语言进行数据交换。</p><p>作用：把 python 对象直接保存到文件里，而不需要先把它们转化为字符串再保存，也不需要用底层的文件访问操作，直接把它们写入到一个二进制文件里。pickle 模块会创建一个 python 语言专用的二进制格式，不需要使用者考虑任何文件细节，它会帮你完成读写对象操作。用pickle比你打开文件、转换数据格式并写入这样的操作要节省不少代码行。</p><h2 id="python专业领域处理库" tabindex="-1"><a class="header-anchor" href="#python专业领域处理库"><span>python专业领域处理库</span></a></h2><h3 id="albumentations库" tabindex="-1"><a class="header-anchor" href="#albumentations库"><span>albumentations库</span></a></h3>`,34),I={href:"https://blog.csdn.net/u014264373/article/details/114144303",target:"_blank",rel:"noopener noreferrer"},L=t(`<p>负责处理图像的一个库，可用于所有数据类型：图像（RBG图像，灰度图像，多光谱图像），分割mask，边界框和关键点；大概有70多种不同的图像处理方法,相比torch自带的，这个库函数有更多的对图像的预处理的办法；特点就是快：在相同的对图像的处理下，我的速度就是比其他处理方式更快。</p><h3 id="pil库" tabindex="-1"><a class="header-anchor" href="#pil库"><span>PIL库</span></a></h3><p>PIL，全称 python Imaging Library，是 python 平台一个功能非常强大而且简单易用的图像处理库。但是，由于 PIL 仅支持到python 2.7，加上年久失修，于是一群志愿者在 PIL 的基础上创建了兼容 python 3 的版本，名字叫 Pillow ，我们可以通过安装 Pillow 来使用 PIL。</p><p>安装：在 Ubuntu 下通过一个简单的命令<code>sudo pip3 install pillow</code>即可成功安装库。</p><h4 id="打开、保存、显示图片" tabindex="-1"><a class="header-anchor" href="#打开、保存、显示图片"><span>打开、保存、显示图片</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image

image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;2092.jpg&#39;</span><span class="token punctuation">)</span>
image<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
image<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">&#39;1.jpg&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>mode<span class="token punctuation">,</span> image<span class="token punctuation">.</span>size<span class="token punctuation">,</span> image<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">)</span>
<span class="token comment"># RGB (481, 321) JPEG</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>· mode 属性为图片的模式，RGB 代表彩色图像，L 代表光照图像也即灰度图像等</p><p>· size 属性为图片的大小(宽度，长度)</p><p>· format 属性为图片的格式，如常见的 PNG、JPEG 等</p><h4 id="转换图片格式" tabindex="-1"><a class="header-anchor" href="#转换图片格式"><span>转换图片格式</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>image<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
grey_image <span class="token operator">=</span> image<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">&#39;L&#39;</span><span class="token punctuation">)</span>
grey_image<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任何支持的图片模式都可以直接转为彩色模式或者灰度模式，但是，若是想转化为其他模式，则需要借助一个中间模式（通常是彩色）来进行转换。</p><h4 id="通道分离合并" tabindex="-1"><a class="header-anchor" href="#通道分离合并"><span>通道分离合并</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b <span class="token operator">=</span> image<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
im <span class="token operator">=</span> Image<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token string">&#39;RGB&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> g<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>彩色图像可以分离出 R、G、B 通道，但若是灰度图像，则返回灰度图像本身。然后，可以将 R、G、B 通道按照一定的顺序再合并成彩色图像。</p><h4 id="图像裁剪、旋转、改变大小" tabindex="-1"><a class="header-anchor" href="#图像裁剪、旋转、改变大小"><span>图像裁剪、旋转、改变大小</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>box <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>
region <span class="token operator">=</span> image<span class="token punctuation">.</span>crop<span class="token punctuation">(</span>box<span class="token punctuation">)</span>
region <span class="token operator">=</span> region<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>ROTATE_180<span class="token punctuation">)</span>
image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>region<span class="token punctuation">,</span> box<span class="token punctuation">)</span>
image<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过定义一个 4 元组，依次为左上角 X 坐标、Y 坐标，右下角 X 坐标、Y 坐标，可以対原图片的某一区域进行裁剪，然后进行一定处理后可以在原位置粘贴回去。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>im <span class="token operator">=</span> image<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
im <span class="token operator">=</span> image<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span>  <span class="token comment"># 逆时针旋转 45 度</span>
im <span class="token operator">=</span> image<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>FLIP_LEFT_RIGHT<span class="token punctuation">)</span> <span class="token comment"># 左右翻转</span>
im <span class="token operator">=</span> im<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>FLIP_TOP_BOTTOM<span class="token punctuation">)</span><span class="token comment"># 上下翻转</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="像素值操作" tabindex="-1"><a class="header-anchor" href="#像素值操作"><span>像素值操作</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>out <span class="token operator">=</span> image<span class="token punctuation">.</span>point<span class="token punctuation">(</span><span class="token keyword">lambda</span> i<span class="token punctuation">:</span> i <span class="token operator">*</span> <span class="token number">1.2</span><span class="token punctuation">)</span> <span class="token comment"># 对每个像素值乘以 1.2</span>

source <span class="token operator">=</span> image<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
out <span class="token operator">=</span> source<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>point<span class="token punctuation">(</span><span class="token keyword">lambda</span> i<span class="token punctuation">:</span> i <span class="token operator">&gt;</span> <span class="token number">128</span> <span class="token keyword">and</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token comment"># 对 R 通道进行二值化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>i &gt; 128 and 255，当 i &lt;= 128 时，返回 False 也即 0,；反之返回 255 。</p><h4 id="和numpy数组之间的转化" tabindex="-1"><a class="header-anchor" href="#和numpy数组之间的转化"><span>和Numpy数组之间的转化</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>image<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token comment">#(321, 481, 3)</span>
out <span class="token operator">=</span> Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>array<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他常用内容" tabindex="-1"><a class="header-anchor" href="#其他常用内容"><span>其他常用内容</span></a></h2>`,25),q={href:"https://zhuanlan.zhihu.com/p/369917525",target:"_blank",rel:"noopener noreferrer"},N={href:"https://zhuanlan.zhihu.com/p/370656578",target:"_blank",rel:"noopener noreferrer"},z=t(`<h2 id="其他不常见库" tabindex="-1"><a class="header-anchor" href="#其他不常见库"><span>其他不常见库</span></a></h2><h3 id="copy库" tabindex="-1"><a class="header-anchor" href="#copy库"><span>copy库</span></a></h3><p>python 的赋值语句不复制对象，而是创建目标和对象的绑定关系。对于自身可变，或包含可变项的集合，有时要生成副本用于改变操作，而不必改变原始对象。本模块提供了通用的浅层复制和深层复制操作。</p><p>copy.copy(x)：返回 x 的浅层复制。</p><p>copy.deepcopy(x[, memo])：返回 x 的深层复制。</p><p>示例代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> copy <span class="token keyword">as</span> cp
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;hedeniu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xiaoniuniu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xiaoxiaoniu&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
b <span class="token operator">=</span> a <span class="token comment">#赋值，传对象的引用</span>
c <span class="token operator">=</span> cp<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">#对象拷贝，浅拷贝</span>
d <span class="token operator">=</span> cp<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">#对象拷贝，深拷贝</span>

a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">#修改对象a</span>
a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">#修改对象a中的数组对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>a<span class="token operator">=</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;hedeniu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xiaoniuniu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xiaoxiaoniu&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>
b<span class="token operator">=</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;hedeniu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xiaoniuniu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xiaoxiaoniu&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>
c<span class="token operator">=</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;hedeniu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xiaoniuniu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xiaoxiaoniu&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
d<span class="token operator">=</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;hedeniu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xiaoniuniu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xiaoxiaoniu&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gc库" tabindex="-1"><a class="header-anchor" href="#gc库"><span>gc库</span></a></h3><p>python中，主要依靠gc（garbage collector）模块的引用计数技术来进行垃圾回收。所谓引用计数，就是考虑到python中变量的本质不是内存中一块存储数据的区域，而是对一块内存数据区域的引用。所以python可以给所有的对象（内存中的区域）维护一个引用计数的属性，在一个引用被创建或复制的时候，让python,把相关对象的引用计数+1；相反当引用被销毁的时候就把相关对象的引用计数-1。当对象的引用计数减到0时，自然就可以认为整个python中不会再有变量引用这个对象，所以就可以把这个对象所占据的内存空间释放出来了。</p><p>用法：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>    <span class="token keyword">import</span> gc
    gc<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function C(R,B){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[n("p",null,[s("关于pytest中的"),r,s("语法糖详见："),n("a",d,[s("【pytest】（三）pytest中的fixture"),p(a)])])]),k,n("p",null,[n("a",m,[s("python中*args和**kwargs的理解"),p(a)])]),b,n("blockquote",null,[n("p",null,[s("本段内容参考自：知乎："),n("a",h,[s("一文看懂如何使用 Hydra 框架高效地跑各种超参数配置的深度学习实验"),p(a)])])]),v,g,n("blockquote",null,[n("p",null,[s("本段内容参考自：知乎："),n("a",y,[s("Rich：Python开发者的完美终端工具！"),p(a)])])]),f,n("p",null,[s("替代tensorboard，官网："),n("a",_,[s("https://docs.wandb.ai/guides/hosting"),p(a)]),s("。")]),w,n("p",null,[s("python "),n("a",x,[s("如何列出python中所有已安装的软件包及其版本"),p(a)])]),P,n("p",null,[s("CSDN："),n("a",I,[s("最快最好用的数据增强库「albumentations」 一文看懂用法"),p(a)])]),L,n("p",null,[s("pip："),n("a",q,[s("python pip 用法，看这一篇文章就够了"),p(a)])]),n("p",null,[s("Plotly: "),n("a",N,[s("一文爱上高级可视化神器Plotly"),p(a)])]),z])}const O=e(i,[["render",C],["__file","PythonLibs.html.vue"]]),M=JSON.parse(`{"path":"/zsk/tech/python/PythonLibs.html","title":"PythonLibs","lang":"zh-CN","frontmatter":{"date":"2024-04-16T00:00:00.000Z","title":"PythonLibs","author":"Genhiy","order":4,"category":["Python"],"tag":["CodeBook"],"description":"PythonLibs pip提供了一个选项 --no-dependencies ，用于指定不安装包的依赖项。 通过使用这个选项，我们可以强制pip只安装指定的包，而不检查和安装依赖关系。 调试相关库 pdb库 使用方法：在代码中添加'import pdb;pdb.set_trace()'，当你在命令行看到(Pdb)时，说明已经正确打开了pdb，然后就可...","head":[["meta",{"property":"og:url","content":"https://github.com/Genhiy/Genhiy.github.io/zsk/tech/python/PythonLibs.html"}],["meta",{"property":"og:site_name","content":"Genhiy"}],["meta",{"property":"og:title","content":"PythonLibs"}],["meta",{"property":"og:description","content":"PythonLibs pip提供了一个选项 --no-dependencies ，用于指定不安装包的依赖项。 通过使用这个选项，我们可以强制pip只安装指定的包，而不检查和安装依赖关系。 调试相关库 pdb库 使用方法：在代码中添加'import pdb;pdb.set_trace()'，当你在命令行看到(Pdb)时，说明已经正确打开了pdb，然后就可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Genhiy"}],["meta",{"property":"article:tag","content":"CodeBook"}],["meta",{"property":"article:published_time","content":"2024-04-16T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PythonLibs\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-16T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Genhiy\\"}]}"]]},"headers":[{"level":2,"title":"调试相关库","slug":"调试相关库","link":"#调试相关库","children":[{"level":3,"title":"pdb库","slug":"pdb库","link":"#pdb库","children":[]},{"level":3,"title":"ipdb库","slug":"ipdb库","link":"#ipdb库","children":[]},{"level":3,"title":"pytest库","slug":"pytest库","link":"#pytest库","children":[]},{"level":3,"title":"line_profiler库","slug":"line-profiler库","link":"#line-profiler库","children":[]}]},{"level":2,"title":"参数管理库","slug":"参数管理库","link":"#参数管理库","children":[{"level":3,"title":"argparse库","slug":"argparse库","link":"#argparse库","children":[]},{"level":3,"title":"hydra库","slug":"hydra库","link":"#hydra库","children":[]}]},{"level":2,"title":"终端及数据可视化","slug":"终端及数据可视化","link":"#终端及数据可视化","children":[{"level":3,"title":"rich库","slug":"rich库","link":"#rich库","children":[]},{"level":3,"title":"wandb库","slug":"wandb库","link":"#wandb库","children":[]},{"level":3,"title":"logging库","slug":"logging库","link":"#logging库","children":[]},{"level":3,"title":"tqdm库","slug":"tqdm库","link":"#tqdm库","children":[]},{"level":3,"title":"pkg_resources","slug":"pkg-resources","link":"#pkg-resources","children":[]}]},{"level":2,"title":"python深度学习相关库","slug":"python深度学习相关库","link":"#python深度学习相关库","children":[{"level":3,"title":"catalyst","slug":"catalyst","link":"#catalyst","children":[]},{"level":3,"title":"torch.nn.Module","slug":"torch-nn-module","link":"#torch-nn-module","children":[]},{"level":3,"title":"mmcv","slug":"mmcv","link":"#mmcv","children":[]}]},{"level":2,"title":"python文件处理库","slug":"python文件处理库","link":"#python文件处理库","children":[{"level":3,"title":"io.BytesIO","slug":"io-bytesio","link":"#io-bytesio","children":[]},{"level":3,"title":"glob库","slug":"glob库","link":"#glob库","children":[]},{"level":3,"title":"pickle库","slug":"pickle库","link":"#pickle库","children":[]}]},{"level":2,"title":"python专业领域处理库","slug":"python专业领域处理库","link":"#python专业领域处理库","children":[{"level":3,"title":"albumentations库","slug":"albumentations库","link":"#albumentations库","children":[]},{"level":3,"title":"PIL库","slug":"pil库","link":"#pil库","children":[]}]},{"level":2,"title":"其他常用内容","slug":"其他常用内容","link":"#其他常用内容","children":[]},{"level":2,"title":"其他不常见库","slug":"其他不常见库","link":"#其他不常见库","children":[{"level":3,"title":"copy库","slug":"copy库","link":"#copy库","children":[]},{"level":3,"title":"gc库","slug":"gc库","link":"#gc库","children":[]}]}],"git":{},"readingTime":{"minutes":14.74,"words":4422},"filePathRelative":"zsk/tech/python/PythonLibs.md","localizedDate":"2024年4月16日","excerpt":"\\n<p>pip提供了一个选项 --no-dependencies ，用于指定不安装包的依赖项。 通过使用这个选项，我们可以强制pip只安装指定的包，而不检查和安装依赖关系。</p>\\n<h2>调试相关库</h2>\\n<h3>pdb库</h3>\\n<p>使用方法：在代码中添加'import pdb;pdb.set_trace()'，当你在命令行看到(Pdb)时，说明已经正确打开了pdb，然后就可以开始输入pdb命令了。</p>\\n<p>常用命令：</p>\\n<ul>\\n<li>l (list): 查看当前位置前后11行源代码（多次会翻页）； ll: 查看当前函数或框架内的所有代码。</li>\\n<li>s (step): 执行下一行（能进入函数体）； n (next): 执行下一行（不进入函数体）； r (return): 执行下一行（在函数体中时会直接执行到函数返回处）。</li>\\n<li>p: 后跟变量，表示打印该变量值。</li>\\n<li>cl: 不带参数用于清除所有断点，带参数则清除指定行或当前文件制定序号的断点。</li>\\n<li>b (break): 不带参数表示查看断点位置，带lineno（行号）表示把断点添加到该行，带filename:lineno表示把断点添加到filename中的第lineno行，带functionname（函数名）表示把断点添加到该函数执行的第一行。tbreak的使用同b，只不过其执行一次后自动删除，故被称为临时断点。</li>\\n<li>c (continue): 持续执行下去直到遇到断点。unt lineno: 持续执行直到运行到指定行。</li>\\n<li>a: 在函数中时打印函数的参数和参数的值。</li>\\n<li>whatis expression: 打印表达式的类型，常用来打印变量值。</li>\\n<li>interact: 启动一个python的交互式解释器，使用当前代码的全局命名空间（使用ctrl+d返回pdb）。</li>\\n<li>w: 打印堆栈信息，最新的帧在最底部。箭头表示当前帧。</li>\\n<li>q: 退出pdb。</li>\\n</ul>","autoDesc":true}`);export{O as comp,M as data};
