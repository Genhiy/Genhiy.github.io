import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as e,e as l}from"./app-SD3SAAIy.js";const s="/assets/images/ks/a2u/image1.png",n="/assets/images/ks/a2u/Snipaste_2024-06-28_02-11-03.png",t="/assets/images/ks/a2u/image2.png",p="/assets/images/ks/a2u/image4.png",r="/assets/images/ks/a2u/Snipaste_2024-06-28_02-17-54.png",o="/assets/images/ks/a2u/image5.png",d="/assets/images/ks/a2u/image6.png",g="/assets/images/ks/a2u/image7.png",c="/assets/images/ks/a2u/image8.png",h="/assets/images/ks/a2u/image9.png",u="/assets/images/ks/a2u/Snipaste_2024-06-28_02-27-41.png",f="/assets/images/ks/a2u/image10.png",m={},N=l('<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><h3 id="作品侧推荐的概念" tabindex="-1"><a class="header-anchor" href="#作品侧推荐的概念"><span>作品侧推荐的概念</span></a></h3><p>推荐系统的常见逻辑是为每个用户寻找最匹配的作品，从而达到最优质的用户体验。但是，短视频社区是一个“供给——消费”双边网络，好的内容是社区良性发展的重要一环。在这个前提下，不仅需要考虑分发策略对用户消费的影响，也要考虑分发策略对供给侧的影响。 在供给侧优化中，一个重要的优化项是让作品/作者获得流量，被系统“看见”（如图1）：</p><ul><li>作品需要获得合理的初始分发流量，才能被推荐系统发现，并实现持续分发</li><li>新作者需要依靠初始流量，完成在系统内的landing、涨粉，从而逐渐成长</li><li>作品的流量情况同样对作者的活跃度影响极大</li></ul><figure><img src="'+s+'" alt="图1 作品获得流量的意义" tabindex="0" loading="lazy"><figcaption>图1 作品获得流量的意义</figcaption></figure><p>由于推荐系统的正常逻辑是为用户找到其感兴趣的作品，在这个逻辑下，我们并不关心一个具体的作品的分发情况，这就很可能造成“部分作者不受推荐系统重视 -&gt; 获取不到流量 -&gt; 缺乏足够的样本训练 -&gt; 模型精度持续较低 -&gt; 持续获取不到流量”的恶性循环。为了打破这样的循环，有必要建立一套机制，为每个作品找到对其感兴趣的用户，提升作品获得的流量和作者的体验。这样的机制被称为作品侧推荐，表1给出了用户侧推荐和作品侧推荐的一些对比：</p><figure><img src="'+n+'" alt="表1 用户侧推荐和作品侧推荐的对比" tabindex="0" loading="lazy"><figcaption>表1 用户侧推荐和作品侧推荐的对比</figcaption></figure><h3 id="作品侧推荐的3个挑战" tabindex="-1"><a class="header-anchor" href="#作品侧推荐的3个挑战"><span>作品侧推荐的3个挑战</span></a></h3><p>看起来，作品侧推荐和用户侧推荐的结构是完全对偶的，但实际实现时，会发现作品侧推荐系统和用户侧推荐系统的一系列本质不同：</p><ul><li>挑战1：用户实时活跃性问题：对于用户侧推荐系统，给用户推荐作品的时候，不存在“作品不可用”的问题。但是对于作品侧推荐系统，则存在“为作品寻找了一些用户，但这些用户并没有来到站内”的问题。</li><li>挑战2：用户流量约束问题：对于用户侧推荐系统，可以向大量用户分发同一个作品，但是对于作品侧推荐系统，则不应该为大量作品选择同一个用户（用户能消费的流量是有限的）。</li><li>挑战3：新作品信息不足的问题：对于用户侧推荐系统，大量的用户都是老用户，有充足的信息可供获取，而对于作品侧推荐系统，大量的作品/作者都是长尾作品/作者，模型难以泛化。</li></ul><p>本文探讨作品侧推荐系统在实现上的一些常见问题。针对挑战1和挑战2，本文提出了对偶推荐系统的方案；针对挑战3，本文探讨了Side Info的利用方法，并给出了增广DropoutNet和作者长期交互建模的方案。</p><h2 id="方案调研" tabindex="-1"><a class="header-anchor" href="#方案调研"><span>方案调研</span></a></h2><h3 id="常规方案" tabindex="-1"><a class="header-anchor" href="#常规方案"><span>常规方案</span></a></h3><p>在冷启动、助推中都有作品侧流量分发的需求，常规的方案可以总结为：划分一定的流量，以尚未达到指定vv的作品作为候选池，并在用户请求时予以分发。</p><figure><img src="'+t+'" alt="图2 常规流量分发方案" tabindex="0" loading="lazy"><figcaption>图2 常规流量分发方案</figcaption></figure><p>该类方案的特点是：</p><ul><li>有流量需求的作品，在低vv阶段单独建立候选池，分发竞争性较低，作品容易透出</li><li>在作品达到一定流量之后自动退池，可以直接和流量分发需求相对应</li></ul><p>该方案的问题在于：</p><ul><li>由于缺乏大盘竞争，很可能出现用户即使不喜欢该作品，也会强行分发的问题，影响用户消费体验。</li><li>当候选池较少的时候，会出现分发过快的现象，作品在遇到合适的用户之前，就已经消耗完额度，从而分发不到合适的用户。</li></ul><h3 id="在线匹配方案" tabindex="-1"><a class="header-anchor" href="#在线匹配方案"><span>在线匹配方案</span></a></h3><p>在线匹配方案从二部图匹配的角度建模该问题，把用户和作品看作二部图的两类节点，把作品分发给用户的问题建模为二部图的节点出度约束。该问题在广告领域被建模为Guaranteed Delivery问题，一种经典的求解方法是SHALE算法[1]。SHALE算法把作品和用户的匹配问题通过对偶技巧转化成用户到来时的作品实时分发问题，通过两步求解的方法在实时请求时逼近离线最优解。</p><p>快手主站和海外在早期都实现了基于SHALE算法的内容冷启动召回架构，并取得了显著的收益。但这样的在线匹配方案也有相应的问题：</p><ul><li>实时的计算量极大：在实时计算时，每次请求都需要对所有候选视频做计算，在社区每日新增视频达到数百万的情况下，实时计算的压力极大。</li><li>匹配分发的流量分配过于平均，流量利用率低：在推荐系统中，多数视频侧分发需求不是强约束，过于平均的流量分配同样会降低效率。</li></ul><h3 id="星河模型" tabindex="-1"><a class="header-anchor" href="#星河模型"><span>星河模型</span></a></h3><p>星河模型由快手主站冷启动团队提出，其出发点在于：为了考虑内容的长期成长和被利用效率，需要从B端视角考虑，作品被用户看到后，作品的表现如何。为此，星河模型在新作品在全量用户群体上定向检索人群，从而实现把作品定向分发给人群的效果。</p><p>星河模型由实时的P2U训练服务、匹配检索服务、倒排索引服务组成，首先对每个作品，获取匹配的人群列表，然后通过倒排服务，实现用户请求时返回相应作品的效果。</p><p>星河模型在消费侧持平的情况下，获得了单列出坡作品数+18%的收益。海外的作品侧推荐也受到了星河模型的启发，并结合海外现状进行了进一步的优化。</p><h2 id="作品侧推荐架构设计" tabindex="-1"><a class="header-anchor" href="#作品侧推荐架构设计"><span>作品侧推荐架构设计</span></a></h2><p>本节介绍作品侧推荐的架构设计，并用于解决之前提出的前2个挑战（用户实时活跃性问题和用户流量约束问题）。</p><h3 id="初步架构-作品到用户的召回方案" tabindex="-1"><a class="header-anchor" href="#初步架构-作品到用户的召回方案"><span>初步架构：作品到用户的召回方案</span></a></h3><p>对偶推荐系统的前身是为作品找用户（Photo-To-User, P2U）的召回思路，如图4。该方案和主站星河模型类似，其特点如下：</p><ul><li>把近期活跃的用户作为候选集，以双塔模型为基础，建立ANN索引</li><li>以作品为query，通过ANN索引查找最匹配的用户，形成用户列表</li><li>将作品和用户的匹配对存入倒排索引</li><li>线上通过倒排召回拉回视频。</li></ul><p>该方案取得了显著的出坡收益（出坡作品数+9.042%[2]）</p><figure><img src="'+p+'" alt="图4 海外作品到用户基础方案" tabindex="0" loading="lazy"><figcaption>图4 海外作品到用户基础方案</figcaption></figure><p>可以注意到，该方案对挑战1（用户实时活跃性问题）提供了一种较简单的解决方案：把近期活跃的用户作为候选集，并假设近期活跃的用户，未来活跃的可能性也更大。然后，通过倒排索引进行缓存，并等待用户到来。这样，作品侧的推荐和用户的实际到来就不需要在同一个时间，避免了文献[1]中的实时计算压力。</p><p>然而，在进一步优化的过程中，我们也发现了该方案的一些问题：</p><ul><li>难以满足流量约束（即挑战2）：现有方式容易出现多个作品匹配到同一个用户的问题，由于用户的播放次数有限，过多的匹配会造成无法下发，难以控制下发量。</li><li>可迭代性较弱：在每个场景里只能针对少量目标进行加权（例如透出、涨粉等），在目标层面的可操作空间小。且ANN召回是隐式召回，难以显式考虑用户的关注关系等。本质原因在于，该方案为一路召回，依赖于召回模型本身的迭代，迭代路径有限。</li></ul><p>基于上述出发点，海外进一步探索了作品侧推荐的优化方向，提出了对偶推荐系统的方案，以便更精准地实现作品和用户的匹配。</p><h3 id="对偶推荐系统" tabindex="-1"><a class="header-anchor" href="#对偶推荐系统"><span>对偶推荐系统</span></a></h3><p>我们知道，用户侧推荐系统是根据用户请求，通过召回、排序、重排等模块，返回用户可能最感兴趣的作品，提升用户体验。可以想象，如果对偶地搭建一个作品侧推荐系统，那么这个系统应该也有相应的各个模块，如表2。</p><figure><img src="'+r+'" alt="表2 用户侧推荐系统和作品侧推荐系统的对比" tabindex="0" loading="lazy"><figcaption>表2 用户侧推荐系统和作品侧推荐系统的对比</figcaption></figure><p>从这个角度，对偶推荐系统的优势在于和消费侧推荐系统的各个模块完全对应，各模块各司其职，能够较好地平衡各个需求和算力。下面介绍对偶推荐系统的各个模块的构造。</p><h4 id="整体结构" tabindex="-1"><a class="header-anchor" href="#整体结构"><span>整体结构</span></a></h4><p>对偶推荐系统的整体结构如图5所示：</p><figure><img src="'+o+'" alt="图5 对偶推荐系统" tabindex="0" loading="lazy"><figcaption>图5 对偶推荐系统</figcaption></figure><p>可以看到，对偶推荐系统的请求来自作品，服务返回的是用户列表，并包含如下环节：</p><ul><li>视频侧发送请求。当视频索引发生更新时，根据筛选规则模块，筛选出需要匹配用户的视频目标扶持视频，向作品推荐服务发送推荐请求。</li><li>多路召回。包括粉丝好友等显式召回及强互动类型的xtr i2u隐式召回等，在整个用户大盘寻找目标用户。</li><li>过滤用户合法性。构建用户正排索引，保存用户的最近访问时间、候选池等，筛选保留近期在线用户并限制热门用户。</li><li>模型打分。考虑到计算性能问题，本项目目前使用双塔粗排架构。与正常推荐系统粗排的不同之处在于，双塔的photo侧是实时infer，而user侧使用缓存的user embedding。</li><li>多目标排序。采用es队列，对模型打分进行多目标融合。</li><li>打散。观察到推荐系统存在天然聚集问题，即大量作品找到少部分热门用户，但单用户每天的消费vv有限，因此通过打散策略限制高热用户的数量，保证视频之间不会有过于激烈的竞争。</li><li>写入倒排池。将当前视频写入所有找到的用户的视频候选池，线上用户请求时通过一路倒排召回。</li></ul><p>下面介绍几个关键模块的作用。</p><h4 id="用户侧正排索引" tabindex="-1"><a class="header-anchor" href="#用户侧正排索引"><span>用户侧正排索引</span></a></h4><p>用户侧正排索引与消费侧推荐系统中的视频侧正排索引相对应，用于存储用户的一些基本属性。该模块在线上用户请求时，更新用户的各项数据，并存储到KV结构中，用于在对偶推荐系统中调用。 用户侧正排索引主要用于解决第1节中论述的“用户实时活跃性问题”和“用户流量约束问题”：</p><ul><li>挑战1：用户实时活跃性问题：可以在正排索引中，存入用户过去的行为（过去访问天数、上次访问时间等），基于这些数据，预估用户未来到来的可能性，并把作品下发给更可能回到App的用户。</li><li>挑战2：用户流量约束问题：在前期的ANN召回中难以解决该问题，但是有了用户侧正排索引之后，可以把用户当前已经匹配的作品数量存入正排，并在排序和打散中，考虑用户的流量约束。在这方面，广告优化中考虑流量约束的方案均可参考。</li></ul><figure><img src="'+d+'" alt="图6 用户侧正排索引" tabindex="0" loading="lazy"><figcaption>图6 用户侧正排索引</figcaption></figure><h4 id="视频侧请求和倒排索引" tabindex="-1"><a class="header-anchor" href="#视频侧请求和倒排索引"><span>视频侧请求和倒排索引</span></a></h4><p>对于对偶推荐系统，其请求方是视频。视频在不同的状态下，模型学习的精准度也不同，尤其是在低vv阶段，随着vv的积累，视频的embedding更新可能较快。为此，可以按照视频的vv相对变化量级触发视频侧请求，例如每上涨一定比例，则触发一次请求，这样即可实现较准确的更新。</p><p>对偶推荐系统的返回值是用户列表，可以通过倒排索引的方式，转化为用户匹配的视频列表，并在用户到来时予以推荐。同时，配合用户侧正排索引，可以基本保证返回的用户在较短时间内会到来，这就实现了从作品侧推荐到用户侧推荐的转换。</p><p>由此可见，对偶推荐系统在解决作品侧推荐的各项挑战时，采用的方法都简单有效，计算复杂度低。这和2.2节中的在线匹配方案的计算复杂度形成了鲜明对比。</p><h4 id="召回、排序和打散" tabindex="-1"><a class="header-anchor" href="#召回、排序和打散"><span>召回、排序和打散</span></a></h4><p>相应于用户侧推荐系统的分层结构，对偶推荐系统也包含召回、排序和打散等环节。</p><p>首先，多路召回可以有效缓解前述基于ANN的P2U方案的单一性问题。对于ANN来说，难以考虑显式关注关系等，但是对于对偶推荐系统，只需要新增一路基于关注关系的召回即可。本质在于，基于ANN的P2U中，ANN既要承担召回任务，又要承担排序任务（ANN的embedding相似性就是排序依据），排序的单一性决定了ANN模型的单一性。而在对偶推荐系统中，召回的形式可以多种多样，最后交由排序模块进行统一的预估和多目标融合即可。</p><p>其次，排序模块的预估、融合分离的形式，也是原先基于ANN的P2U方案所不具备的。原因在于，在ANN方案中，由于需要高效召回，所以最终的分数必须是embedding相似性的格式，这就极大的限制了多目标融合的可能形式。而在对偶推荐系统中，召回和排序是独立的，排序模块就可以更自由地使用更精细的融合方式（例如ensemble sort）。</p><p>最后，在打散模块，可以显式考虑用户流量约束，把流量平摊到各个用户，提升流量的利用率。图7给出了初版ANN方案（没有考虑流量约束）和对偶推荐系统（考虑流量约束）为日活用户分配到的作品数量。可以看出，在不考虑流量约束的时候，绝大多数用户都没有匹配到任何作品，且很多作品都匹配到了少量用户，因此下发效率较低。而经过流量约束的优化之后，这个现象得到了显著的缓解。</p><h4 id="对偶推荐系统的优势和收益" tabindex="-1"><a class="header-anchor" href="#对偶推荐系统的优势和收益"><span>对偶推荐系统的优势和收益</span></a></h4><p>对偶推荐系统相较于基于ANN的P2U方案有如下优势：</p><ul><li>更好地解决用户实时活跃问题：在ANN方案中，只能通过圈选活跃用户的方式，而在对偶推荐系统中，可以基于用户侧正排，更精细地用户到来的可能性。</li><li>显式考虑用户流量约束：由于可以显式考虑流量约束，大量作品匹配到相同用户的现象可以得到显著缓解。</li><li>可迭代性强：对偶推荐系统的目标视频筛选、召回、排序、打散等模块分工清晰，且都有进一步迭代的空间，未来可以用更好的模型、更优化的策略，进一步提升作品和用户匹配的效率。</li></ul><p>对偶推荐系统的初次上线，取得了如下显著收益[3]：</p><ul><li>巴西市场： 当日作品数+1.167%，app使用时长（作者世界）+0.108%</li><li>印尼市场：发布作品数 +2.895%推荐vv超过1w视频数 +8.440% APP使用时长（作者世界） +0.199%</li><li>巴基斯坦市场：活跃设备数+0.319% app使用时长(作者世界)+0.520% 发布作品数+3.327%</li></ul><p>由此可见，如果能足够高效地为作品寻找合适的用户，不仅可以让作品获得更多的流量，还可以提升作者体验和作者活跃度。同时，由于作者也是大盘用户的一部分，作者活跃度的提升也会进一步带来大盘DAU、时长的上涨。</p><h2 id="作品侧推荐算法迭代" tabindex="-1"><a class="header-anchor" href="#作品侧推荐算法迭代"><span>作品侧推荐算法迭代</span></a></h2><p>针对之前提到的作品侧推荐的3个挑战，前2个可以通过对偶推荐系统解决。而第3个挑战（新作品信息不足的问题）则需要通过算法途径解决。本节讨论作品侧推荐的一些算法方案，用于在作品信息不足时，提升为作品找用户的精度。</p><h3 id="side-info的利用-增广dropoutnet模型" tabindex="-1"><a class="header-anchor" href="#side-info的利用-增广dropoutnet模型"><span>side info的利用：增广DropoutNet模型</span></a></h3><p>该模型主要基于如下出发点：</p><ul><li>推荐系统中正常的模型都较依赖作品id，但是对于新作品，作品id通常难以学习准确。因此，我们希望预估模型能更重视id以外的特征，即Side Info。</li><li>此外，由于作品找用户和用户到来的时间有gap，因此新作品在匹配用户时，也希望基于用户的稳定兴趣，而非实时变化的兴趣。 针对该问题，一个常见的想法是对用户的action list和作品id进行dropout，如图7：</li></ul><figure><img src="'+g+'" alt="图7 通过Dropout增强Embedding稳定性" tabindex="0" loading="lazy"><figcaption>图7 通过Dropout增强Embedding稳定性</figcaption></figure><p>通过dropout，可以让模型对action list和photo id特征的依赖显著降低。但是在推荐系统的流式训练流程下，dropout造成的信息丢弃是难以接受的，为此，我们借鉴了对比学习中样本增广的思路，把过滤了Action List和Photo Id的Embedding作为增广的样本，与原Embedding共同计算内积和loss，从而让模型既能够学习到Action List和Photo Id蕴含的信息，又能够不完全依赖这些特征。具体模型结构如图8:</p><figure><img src="'+c+'" alt="图8 增广DropoutNet模型" tabindex="0" loading="lazy"><figcaption>图8 增广DropoutNet模型</figcaption></figure><p>该模型带来了离线指标WUAUC+1.01pp的收益，并在线上取得10.733%的出坡作品数提升[4]。</p><h3 id="作者信息的利用-作者长期兴趣模型" tabindex="-1"><a class="header-anchor" href="#作者信息的利用-作者长期兴趣模型"><span>作者信息的利用：作者长期兴趣模型</span></a></h3><p>对于新作品来说，由于作品id信息不准确，有必要挖掘更多的其他信息。其中，作者信号是很强的信号，一个直觉是：如果用户经常消费同一个作者的作品，那么把这个作者的新作品匹配给该用户，成功率是较高的。基于这个想法，我们首先通过用户的长期行为历史，对用户和各个作者的交互进行KGNN建图，如图9。基于用户和作者的交互图，可以为每个作者找到对其（从长期行为角度）最感兴趣的用户，并进行冷启动分发。该策略获得了出坡作品数4.679%的提升[5]。</p><figure><img src="'+h+'" alt="图9 基于用户-作者长期交互的匹配算法" tabindex="0" loading="lazy"><figcaption>图9 基于用户-作者长期交互的匹配算法</figcaption></figure><p>在这个策略的基础上，可以进一步思考，我们的本质是根据作品，找到作品的作者，再根据作者找到对其感兴趣的用户，即P-A-U。这个思路和PDN召回（U-I-I）有很强的共通之处，如表3。具体来说，作品的各种特征，可以对应于消费侧PDN的Action List（视频Trigger），作品特征和用户的匹配关系，可以对应于消费侧PDN的SimilarityNet。在本实验中，我们把作者作为联结点，搭建了作者长期兴趣模型，如图10。该模型取得了3.717%的出坡作品数正向[6]。而未来，还可以尝试更多的特征，如作品标签和用户的长期交互，探索更大的收益来源。</p><figure><img src="'+u+'" alt="表3 消费侧PDN召回和作者长期兴趣召回的对比" tabindex="0" loading="lazy"><figcaption>表3 消费侧PDN召回和作者长期兴趣召回的对比</figcaption></figure><figure><img src="'+f+'" alt="图10 作者长期兴趣模型" tabindex="0" loading="lazy"><figcaption>图10 作者长期兴趣模型</figcaption></figure><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>作品侧的推荐架构和算法和消费侧的推荐系统有相似之处，也有大量的不同。对于作品侧推荐，核心问题是为每个作品找到对其最感兴趣的用户，实现定向分发，提升每个作品被推荐系统发现的可能性，改善创作者体验，提升创作者积极性。本文探讨了作品侧推荐的架构和算法问题。</p><p>一方面，在架构上，提出了对偶推荐系统的概念，解决了用户实时活跃性问题和用户流量约束问题，同时能够借力消费侧的大量有效经验。另一方面，在算法上，通过增广DropoutNet和作者长期兴趣模型解决新作品信息不足的问题，均取得显著收益。</p><p>作品侧的推荐系统目前在海外应用于出坡、助推、创作者涨粉等多个场景，带来了出坡40%+，创作者涨粉30%+，助推涨粉率13%的收益。未来也希望在如下方向进一步探索：</p><ul><li>由于对偶推荐系统的各个模块和消费侧完全对应，未来会尝试更多类型的召回、排序模型和策略。</li><li>从作品侧推荐的目标上，过去主要从xtr的角度建模，未来会直接建模流量对作品、作者的价值，从而实现作品、作者视角下的更显著的提升。</li></ul>',87),_=[N];function b(x,v){return a(),e("div",null,_)}const P=i(m,[["render",b],["__file","a2u.html.vue"]]),y=JSON.parse('{"path":"/rcmd/ks/a2u.html","title":"作品侧推荐架构和算法","lang":"zh-CN","frontmatter":{"date":"2024-06-28T00:00:00.000Z","title":"作品侧推荐架构和算法","author":"Genhiy","order":2,"category":["推荐系统"],"tag":["无标签"],"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[{"level":3,"title":"作品侧推荐的概念","slug":"作品侧推荐的概念","link":"#作品侧推荐的概念","children":[]},{"level":3,"title":"作品侧推荐的3个挑战","slug":"作品侧推荐的3个挑战","link":"#作品侧推荐的3个挑战","children":[]}]},{"level":2,"title":"方案调研","slug":"方案调研","link":"#方案调研","children":[{"level":3,"title":"常规方案","slug":"常规方案","link":"#常规方案","children":[]},{"level":3,"title":"在线匹配方案","slug":"在线匹配方案","link":"#在线匹配方案","children":[]},{"level":3,"title":"星河模型","slug":"星河模型","link":"#星河模型","children":[]}]},{"level":2,"title":"作品侧推荐架构设计","slug":"作品侧推荐架构设计","link":"#作品侧推荐架构设计","children":[{"level":3,"title":"初步架构：作品到用户的召回方案","slug":"初步架构-作品到用户的召回方案","link":"#初步架构-作品到用户的召回方案","children":[]},{"level":3,"title":"对偶推荐系统","slug":"对偶推荐系统","link":"#对偶推荐系统","children":[]}]},{"level":2,"title":"作品侧推荐算法迭代","slug":"作品侧推荐算法迭代","link":"#作品侧推荐算法迭代","children":[{"level":3,"title":"side info的利用：增广DropoutNet模型","slug":"side-info的利用-增广dropoutnet模型","link":"#side-info的利用-增广dropoutnet模型","children":[]},{"level":3,"title":"作者信息的利用：作者长期兴趣模型","slug":"作者信息的利用-作者长期兴趣模型","link":"#作者信息的利用-作者长期兴趣模型","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{},"readingTime":{"minutes":18.84,"words":5651},"filePathRelative":"rcmd/ks/a2u.md","localizedDate":"2024年6月28日"}');export{P as comp,y as data};
