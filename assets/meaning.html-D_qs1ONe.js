import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as i,c as e,e as a}from"./app-SD3SAAIy.js";const n={},t=a('<h2 id="推荐系统的意义" tabindex="-1"><a class="header-anchor" href="#推荐系统的意义"><span>推荐系统的意义</span></a></h2><p>推荐系统产生背景：信息过载 + 用户需求不明确。</p><p>随着移动互联网的飞速发展，人们已经处于一个信息过载的时代。在这个时代中，信息的生产者很难将信息呈现在对它们感兴趣的信息消费者面前，而对于信息消费者也很难从海量的信息中找到自己感兴趣的信息。推荐系统就是一个将信息生产者和信息消费者连接起来的桥梁。平台往往会作为推荐系统的载体，实现信息生产者和消费者之间信息的匹配。</p><h3 id="平台方" tabindex="-1"><a class="header-anchor" href="#平台方"><span>平台方</span></a></h3><p>平台方一般是为信息生产者提供物品展示的位置，然后通过不同的方式吸引用户来到平台上寻找他们感兴趣的物品。平台通过商家对物品的展示以及用户的浏览、观看或下单等行为，就产生了所谓的&quot;流量&quot;。</p><p>对平台方而言，流量的高效利用是推荐系统存在的重要原因。典型的电商网站一般是用树状拓扑结构，树状结构在连通性方面有着天然的劣势，阻碍这流量的高效流通。推荐系统的出现使得原本的树状结构变成网络拓扑结构，大大增强了整个网络的连通性。推荐模块不仅使用户在当前页面有了更好的选择路径，同时也给了每个商品增加入口和展示机会，进而提高了成交概率。而推荐质量的好坏，直接决定了用户选择这条路径的可能性，进而影响着流量的利用效率。</p><p>推荐系统解决产品能够最大限度地吸引用户、留存用户、增加用户粘性、提高用户转化率的问题，从而达到平台商业目标增长的目的。不同平台的目标取决于其商业的盈利目的，例如对于YouTube，其商业目标是最大化视频被点击（点击率）以及用户观看的时长（完播率），同时也会最大化内置广告的点击率；对于淘宝等电商平台，除了最大化商品的点击率外，最关键的目标则是最大化用户的转化率，即由点击到完成商品购买的指标。推荐系统能够平台带来丰厚的商业价值 。</p><h2 id="固有问题" tabindex="-1"><a class="header-anchor" href="#固有问题"><span>固有问题</span></a></h2><p>冷启动：</p><ul><li>新用户/新物品缺乏交互数据，如何做推荐</li><li>场景： <ul><li>新用户冷启动：不知道用户啥兴趣，应该推荐什么物品给他</li><li>新物品冷启动：如何将物品推荐给合适的用户</li></ul></li></ul><p>探索与利用：</p><ul><li>业界称为EE问题，即如何利用用户兴趣进行推荐，以及如何探索用户新兴趣。</li><li>举例说明： <ul><li>策略一：推荐的物品全部符合用户兴趣</li><li>策略二：无视用户兴趣，随便推荐</li><li>策略三：80%推荐用户兴趣相关物品，20%随机推荐，给他点惊喜（这种更好）</li></ul></li></ul><p>安全问题：</p><ul><li>推荐结果不靠谱</li><li>没有区分谁是水军，收集了不靠谱的训练数据，长期影响推荐效果</li></ul><h2 id="推荐、广告、搜索" tabindex="-1"><a class="header-anchor" href="#推荐、广告、搜索"><span>推荐、广告、搜索</span></a></h2><h3 id="根本问题上的区别" tabindex="-1"><a class="header-anchor" href="#根本问题上的区别"><span>根本问题上的区别</span></a></h3><ul><li>广告：一个公司要搭建广告系统，它的商业目的非常直接，就是要解决公司的收入问题。所以广告算法的目标就是为了<strong>直接增加公司收入</strong>。</li><li>推荐：推荐算法虽然本质上也是为了增加公司收入，但其直接目标是为了<strong>增加用户的参与度</strong>。只有用户的参与度高了，才能让广告系统有更多的inventory，进而增加公司营收。</li><li>搜索：搜索要解决的关键问题全部是围绕着用户输入的搜索词展开的。虽然现在搜索越来越强调个性化的结果，但是一定要清楚的是，推荐算法强调的个性化永远只是搜索算法的补充。“<strong>围绕着搜索词高效获取信息</strong>“才是搜索算法想解决的根本问题。</li></ul><h3 id="优化目标的区别" tabindex="-1"><a class="header-anchor" href="#优化目标的区别"><span>优化目标的区别</span></a></h3><ul><li>广告：预估CTR（Click Through Rate 点击率）和CVR（Conversion Rate 转化率）。这是跟当前效果类广告的产品形态密切相关的。因为CPC（cost per click）和CPA（cost per action）计价仍是效果类广告系统的主流计价方式。所以只有预估出CTR和CVR，才能反向推导出流量的价值，并进一步给出合理的出价。所以针对这样的目标，广告算法非常看重把预估偏差当作首要的评价指标。</li><li>推荐：推荐算法的预估目标就不尽相同，视频类更多倾向于预测观看时长，新闻类预测CTR，电商类预估客单价等等这些跟用户参与度最相关的业务指标。而且由于推荐系统的推荐场景是生成一个列表，所以更加关注item间的相对位置，因此评估阶段更倾向于用AUC，gAUC，MAP这些指标作为评价标准。</li><li>搜索：搜索的预估目标又有所不同，因为相比广告和推荐，搜索某种意义上说是存在着“正确答案”的。所以搜索非常看重能否把这些正确答案给召回回来（广告和推荐也关注召回率，但重要性完全不同）。所以搜索系统往往会针对召回率，MAP，NDCG这些指标进行优化。</li></ul><p>总的来说，广告算法是要“估得更准”，推荐算法是要整体上“排的更好”，搜索算法是要“搜的更全”。</p><h3 id="模型设计中的区别" tabindex="-1"><a class="header-anchor" href="#模型设计中的区别"><span>模型设计中的区别</span></a></h3><p>优化目标有区别，这就让它们算法模型设计中的侧重点完全不一样：</p><ul><li>广告：由于广告算法要预测“精准”的CTR和CVR，用于后续计算精确的出价，因此数值上的“精准”就是至关重要的要求，仅仅预估广告间的相对位置是无法满足要求的。这就催生了广告算法中对calibration方法的严苛要求，就算模型训练的过程中存在偏差，比如使用了负采样、weighted sampling等方式改变了数据原始分布，也要根据正确的后验概率在各个维度上矫正模型输出。此外，因为广告是很少以列表的形式连续呈现的，要对每一条广告的CTR，CVR都估的准，广告算法大都是point wise的训练方式。</li><li>推荐：推荐算法的结果往往以列表的形式呈现，因此不用估的那么准，而是要更多照顾一个列表整体上，甚至一段时间内的内容多样性上对于用户的“吸引力”，让用户的参与度更高。因此现在很多头部公司在算法设计时，不仅要考虑当前推荐的item的吸引力，甚至会有一些list level，page level的算法去衡量整体的效果进行优化。也正因为这一点，推荐算法有大量不同的训练方式，除了point-wise，还有pair-wise，list-wise等等。此外为了增加用户的长期参与度，还对推荐内容的多样性，新鲜度有更高的要求，这就让探索与利用，强化学习等一些列方法在推荐场景下更受重视。</li><li>搜索：对于搜索算法，我们还是要再次强调搜索词的关键性，以及对搜索词的理解。正因为这样，搜索词与其他特征组成的交叉特征，组合特征，以及模型中的交叉部分是异常重要的。对于一些特定场景，比如搜索引擎，我们一定程度上要抑制个性化的需求，更多把质量和权威性放在更重要的位置。</li></ul><h3 id="辅助策略和算法上的区别" tabindex="-1"><a class="header-anchor" href="#辅助策略和算法上的区别"><span>辅助策略和算法上的区别</span></a></h3><p>除了主模型的差异，跟主模型配合的辅助策略/算法也存在着较大的区别。</p><ul><li>广告：CTR等算法只是其中关键的一步，估的准CTR只是一个前提，如何让广告系统盈利，产生更多收入，还需要pacing，bidding，budget control，ads allocation等多个同样重要的模块协同作用，才能让平台利益最大化，这显然是比推荐系统复杂的。</li><li>推荐：由于需要更多照顾用户的长期兴趣，需要一些补充策略做出一些看似“非最优”的选择，比如探索性的尝试一些长尾内容，在生成整个推荐列表时要加入多样性的约束，等等。这一点上，广告系统也需要，但远没有推荐系统的重视程度高。</li><li>搜索：大量辅助算法还是要聚焦在对搜索词和内容的理解上。因此搜索系统往往是应用NLP模型最重的地方，因为需要对大量内容进行预处理，embedding化，进而生成更理解用户语义的结果。比如最典型的例子就是airbnb对搜索词embedding化后，输入滑雪skiing，会返回更多滑雪胜地的地点，而不是仅仅是字面上的匹配。</li></ul><h3 id="模型本身的差异" tabindex="-1"><a class="header-anchor" href="#模型本身的差异"><span>模型本身的差异</span></a></h3><p>最后才谈到模型本身的差异，因为相比上面一路走来的关键问题，模型本身的差异反而是更细节的问题，这里从模型结构的层面谈一个典型的差异：</p><ul><li>广告：由于用户的兴趣是不那么连贯的，因此容易造成sequential model的失效，attention机制可能会更加重要一些。</li><li>推荐：如果不抓住用户兴趣的连续变化，是很难做好推荐模型的，因此利用sequential model来模拟用户兴趣变化往往是有收益的。</li><li>搜索：搜索词和item之间天然是一个双塔结构，因此在模型构建的时候各种交叉特征，模型中的各种交叉结构往往是搜索类模型的重点。当然，在构建良好的交叉特征之后，使用传统的LTR，GBDT等模型也往往能够取得不错的结果。</li></ul><h3 id="系统层面的痛点" tabindex="-1"><a class="header-anchor" href="#系统层面的痛点"><span>系统层面的痛点</span></a></h3><ul><li>广告算法：问题更加琐碎，各模块协同工作找到平台全局利润最大化方法的难度非常大，系统异常复杂到难以掌控的地步，这是广告算法工程师的痛点；</li><li>推荐算法：问题往往卡在长期利益与短期利益的平衡上，在模型结构红利消失殆尽的今天，如何破局是推荐算法工程师们做梦都在想的问题。</li><li>搜索算法：往往把重心放在搜索词和item的内容理解上，只要能做好这一点，模型结构本身反而不是改进的关键点了，但是在多模态的时代，图片、视频内容的理解往往是制约搜索效果的痛点。</li></ul><h2 id="推荐系统的应用方面" tabindex="-1"><a class="header-anchor" href="#推荐系统的应用方面"><span>推荐系统的应用方面</span></a></h2><p>个性化推荐系统通过分析用户的行为日志，得到用户当前的甚至未来可能的兴趣，给不同的用户展示不同的(个性化)的页面，来提高网站或者app的点击率、转化率、留存率等指标。推荐系统被广泛应用在广告、电商、影视、音乐、社交、饮食、阅读等领域。</p><ul><li>电商首页推荐（淘宝、京东、拼多多）</li><li>视频推荐（抖音、快手、B站、爱奇艺）</li><li>饮食推荐（美团、饿了么、叮咚买菜）</li><li>音乐电台（网易云音乐、QQ音乐、喜马拉雅）</li><li>资讯、阅读（头条、知乎、豆瓣）</li></ul>',34),s=[t];function r(h,d){return i(),e("div",null,s)}const o=l(n,[["render",r],["__file","meaning.html.vue"]]),u=JSON.parse('{"path":"/rcmd/ch01/meaning.html","title":"推荐系统的意义","lang":"zh-CN","frontmatter":{"date":"2024-06-05T00:00:00.000Z","title":"推荐系统的意义","author":"Genhiy","order":1,"category":["推荐系统"],"tag":["无标签"],"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"推荐系统的意义","slug":"推荐系统的意义","link":"#推荐系统的意义","children":[{"level":3,"title":"平台方","slug":"平台方","link":"#平台方","children":[]}]},{"level":2,"title":"固有问题","slug":"固有问题","link":"#固有问题","children":[]},{"level":2,"title":"推荐、广告、搜索","slug":"推荐、广告、搜索","link":"#推荐、广告、搜索","children":[{"level":3,"title":"根本问题上的区别","slug":"根本问题上的区别","link":"#根本问题上的区别","children":[]},{"level":3,"title":"优化目标的区别","slug":"优化目标的区别","link":"#优化目标的区别","children":[]},{"level":3,"title":"模型设计中的区别","slug":"模型设计中的区别","link":"#模型设计中的区别","children":[]},{"level":3,"title":"辅助策略和算法上的区别","slug":"辅助策略和算法上的区别","link":"#辅助策略和算法上的区别","children":[]},{"level":3,"title":"模型本身的差异","slug":"模型本身的差异","link":"#模型本身的差异","children":[]},{"level":3,"title":"系统层面的痛点","slug":"系统层面的痛点","link":"#系统层面的痛点","children":[]}]},{"level":2,"title":"推荐系统的应用方面","slug":"推荐系统的应用方面","link":"#推荐系统的应用方面","children":[]}],"git":{},"readingTime":{"minutes":10.17,"words":3052},"filePathRelative":"rcmd/ch01/meaning.md","localizedDate":"2024年6月5日"}');export{o as comp,u as data};
