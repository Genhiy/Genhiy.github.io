import{_ as p}from"./Snipaste_2024-06-27_14-32-14-DE2oJBjS.js";import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as c,c as i,a as s,d as n,b as e,e as t}from"./app-SD3SAAIy.js";const r="/assets/images/zsk/tech/sqlkj.png",d={},u=t(`<p>有了大语言模型之后，学习和应用一个陌生的代码框架真的容易了太多，这样算法工程师就可以把更多心思放在如何设计算法上，用我个人今天的经验举个例子：</p><h2 id="简单应用" tabindex="-1"><a class="header-anchor" href="#简单应用"><span>简单应用</span></a></h2><p>下午15点左右，接到了一个任务，有一个数据库，其中关键信息为uid、aid、ts，分别为user用户id、author作者id、timestamp时间戳，需求：1.只保留一个ts下的数据，2.相同的(uid,aid)对，只保留一条数据。在此之前我没接触过SQL，但是，通过kimi：</p><h3 id="任务一-筛选" tabindex="-1"><a class="header-anchor" href="#任务一-筛选"><span>任务一：筛选</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Prompt：写一段sql语句，用于从一个表格中读取ts列以及新的一列rk，rk列内容为ts从小到大排列的位次。</p></div><blockquote><p>为什么这样实现？由于我们并不能直接写死筛选某个特殊的ts值，所以最好的方式是将ts排序，形成新的一列：rank，然后通过rank列的数值进行筛选。</p></blockquote><p>kimi：</p><p>在SQL中，您可以使用<code>RANK()</code>函数来实现行的排名。<code>RANK()</code>函数会根据您指定的列的值进行排序，并为每一行分配一个唯一的排名。如果存在相同的值，则这些行会获得相同的排名，并且下一个排名会跳过一个数字。例如，如果两行都排名第一，则下一个排名会直接是第三。</p><p>以下是一段SQL语句，用于从一个名为<code>your_table</code>的表格中读取<code>ts</code>列，并添加一个新的列<code>rk</code>，其中<code>rk</code>列是<code>ts</code>列值从小到大排列的位次：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> ts<span class="token punctuation">,</span> RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> ts<span class="token punctuation">)</span> <span class="token keyword">AS</span> rk
<span class="token keyword">FROM</span> your_table<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里使用的<code>OVER</code>子句指定了<code>RANK()</code>函数的排序依据，即按照<code>ts</code>列的值从小到大排序。如果<code>ts</code>列中有相同的值，它们将获得相同的排名，并且排名不会有间隔。</p><p>如果您希望即使在有相同值的情况下排名也不跳过数字（即连续排名），可以使用<code>DENSE_RANK()</code>函数替代<code>RANK()</code>：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> ts<span class="token punctuation">,</span> DENSE_RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> ts<span class="token punctuation">)</span> <span class="token keyword">AS</span> rk
<span class="token keyword">FROM</span> your_table<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这将保证即使<code>ts</code>列中有相同的值，排名也是连续的。</p><h3 id="任务二-去重" tabindex="-1"><a class="header-anchor" href="#任务二-去重"><span>任务二：去重</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Prompt：写一段sql语句，用于从一个表格中读取uid、aid两个字段，并去除具有相同uid和aid的行</p></div><p>kimi:</p><p>要从一个表中读取 <code>uid</code> 和 <code>aid</code> 字段，并且去除具有相同 <code>uid</code> 和 <code>aid</code> 的重复行，可以使用 <code>GROUP BY</code> 语句结合聚合函数来实现。以下是一个示例 SQL 语句：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> uid<span class="token punctuation">,</span> aid
<span class="token keyword">FROM</span> original_table
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> uid<span class="token punctuation">,</span> aid<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段 SQL 语句的作用是：</p><ul><li><code>SELECT uid, aid</code> 指定了要查询的字段。</li><li><code>FROM original_table</code> 指定了查询的表，你需要将 <code>original_table</code> 替换为实际的表名。</li><li><code>GROUP BY uid, aid</code> 将结果按照 <code>uid</code> 和 <code>aid</code> 进行分组，这样每个 <code>uid</code> 和 <code>aid</code> 的组合只会在结果集中出现一次，从而去除重复行。</li></ul><p>如果你需要将这个结果插入到一个新的表中，可以使用 <code>INSERT INTO</code> 语句，如下所示：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> new_table <span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> uid<span class="token punctuation">,</span> aid
<span class="token keyword">FROM</span> original_table
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> uid<span class="token punctuation">,</span> aid<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个语句首先创建了一个新的表 <code>new_table</code>，然后通过 <code>SELECT</code> 语句查询去重后的数据，并将结果插入到新表中。记得根据你的数据库环境和表结构调整这些语句。</p><h4 id="聚合代码" tabindex="-1"><a class="header-anchor" href="#聚合代码"><span>聚合代码</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 如果存在名为 reco_live.a2u_live_author_tmp_0613_yih 的表，则删除该表</span>
<span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> reco_live<span class="token punctuation">.</span>a2u_live_author_tmp_0613_yih<span class="token punctuation">;</span>

<span class="token comment">-- 创建一个新表 reco_live.a2u_live_author_tmp_0613_yih，如果表不存在的话</span>
<span class="token comment">-- 同时设置表属性，指定数据的生命周期为7天</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> reco_live<span class="token punctuation">.</span>a2u_live_author_tmp_0613_yih 
tblproperties<span class="token punctuation">(</span><span class="token string">&#39;kuaishou.dp-mdc.lifecycle.day&#39;</span> <span class="token operator">=</span> <span class="token string">&#39;7&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span>

<span class="token comment">-- 选择数据的查询开始</span>
<span class="token keyword">select</span>
    uid<span class="token punctuation">,</span>                               <span class="token comment">-- 选择拆分后的uid字段</span>
    get_json_object<span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token string">&#39;$.aid&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> aid<span class="token punctuation">,</span>  <span class="token comment">-- 从json字段中提取aid</span>
    biz<span class="token punctuation">,</span>                               <span class="token comment">-- 选择biz字段</span>
    RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> ts<span class="token punctuation">)</span> <span class="token keyword">as</span> rk   <span class="token comment">-- 根据ts字段对结果进行排名</span>
<span class="token keyword">from</span>
<span class="token punctuation">(</span>
    <span class="token comment">-- 子查询，从原始日志表中选择数据</span>
    <span class="token keyword">select</span>
       <span class="token operator">*</span>
    <span class="token keyword">from</span>
        ks_origin_reco_live_log<span class="token punctuation">.</span>reco_live_rocket_general_json_log
    <span class="token keyword">where</span>
        p_date <span class="token operator">=</span> <span class="token string">&#39;{{ds_nodash}}&#39;</span>    <span class="token comment">-- 选择特定日期的数据，具体日期由外部变量提供</span>
        <span class="token comment">-- and p_hourmin in (&#39;0900&#39;, &#39;0800&#39;)  -- 这行被注释掉了，原本用于选择特定时间段的数据</span>
        <span class="token operator">and</span> biz <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">&#39;a2utask&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a2uv2task&#39;</span><span class="token punctuation">)</span>  <span class="token comment">-- 选择特定业务类型</span>
        <span class="token operator">and</span> get_json_object<span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token string">&#39;$.part&#39;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">-- 选择json中part字段为0的记录</span>
<span class="token punctuation">)</span>cc

<span class="token comment">-- 使用LATERAL VIEW和posexplode函数将uid_set字段拆分成单独的行</span>
LATERAL <span class="token keyword">VIEW</span> posexplode<span class="token punctuation">(</span>split<span class="token punctuation">(</span>regexp_replace<span class="token punctuation">(</span>get_json_object<span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token string">&#39;$.uid_set&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> lateralTable <span class="token keyword">AS</span> pos<span class="token punctuation">,</span> uid

<span class="token comment">-- 只选择pos小于1000的行</span>
<span class="token keyword">WHERE</span>
    pos <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成任务！所以，人工智能的时代，会的多自然好，学的快似乎也同样重要。</p><h3 id="任务三-统计" tabindex="-1"><a class="header-anchor" href="#任务三-统计"><span>任务三：统计</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Prompt：写一段sql代码：我有一个表，有两列：uid，num_aid，统计num_aid为1、2、3、4、5-6、7-8、9-10、11-15、15-30、&gt;30的uid数量。</p></div><p>kimi：要统计不同num_aid范围内的uid数量，你可以使用CASE语句结合COUNT函数来实现：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 
  <span class="token keyword">CASE</span> 
    <span class="token keyword">WHEN</span> num_aid <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">THEN</span> <span class="token string">&#39;1&#39;</span>
    <span class="token keyword">WHEN</span> num_aid <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">THEN</span> <span class="token string">&#39;2&#39;</span>
    <span class="token keyword">WHEN</span> num_aid <span class="token operator">=</span> <span class="token number">3</span> <span class="token keyword">THEN</span> <span class="token string">&#39;3&#39;</span>
    <span class="token keyword">WHEN</span> num_aid <span class="token operator">=</span> <span class="token number">4</span> <span class="token keyword">THEN</span> <span class="token string">&#39;4&#39;</span>
    <span class="token keyword">WHEN</span> num_aid <span class="token operator">BETWEEN</span> <span class="token number">5</span> <span class="token operator">AND</span> <span class="token number">6</span> <span class="token keyword">THEN</span> <span class="token string">&#39;5-6&#39;</span>
    <span class="token keyword">WHEN</span> num_aid <span class="token operator">BETWEEN</span> <span class="token number">7</span> <span class="token operator">AND</span> <span class="token number">8</span> <span class="token keyword">THEN</span> <span class="token string">&#39;7-8&#39;</span>
    <span class="token keyword">WHEN</span> num_aid <span class="token operator">BETWEEN</span> <span class="token number">9</span> <span class="token operator">AND</span> <span class="token number">10</span> <span class="token keyword">THEN</span> <span class="token string">&#39;9-10&#39;</span>
    <span class="token keyword">WHEN</span> num_aid <span class="token operator">BETWEEN</span> <span class="token number">11</span> <span class="token operator">AND</span> <span class="token number">15</span> <span class="token keyword">THEN</span> <span class="token string">&#39;11-15&#39;</span>
    <span class="token keyword">WHEN</span> num_aid <span class="token operator">BETWEEN</span> <span class="token number">16</span> <span class="token operator">AND</span> <span class="token number">30</span> <span class="token keyword">THEN</span> <span class="token string">&#39;16-30&#39;</span>
    <span class="token keyword">ELSE</span> <span class="token string">&#39;&gt;30&#39;</span>
  <span class="token keyword">END</span> <span class="token keyword">AS</span> num_aid_range<span class="token punctuation">,</span>
  <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> uid<span class="token punctuation">)</span> <span class="token keyword">AS</span> uid_count
<span class="token keyword">FROM</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span>
        uid<span class="token punctuation">,</span>
        <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num_aid
    <span class="token keyword">FROM</span> reco_live<span class="token punctuation">.</span>schedual_task_a2u_live_author_result
    <span class="token keyword">WHERE</span> p_date <span class="token operator">=</span> <span class="token string">&#39;20240623&#39;</span> <span class="token operator">AND</span> p_hour <span class="token operator">=</span> <span class="token string">&#39;2100&#39;</span> <span class="token operator">AND</span> biz <span class="token operator">=</span> <span class="token string">&#39;a2utask&#39;</span>
    <span class="token keyword">group</span> <span class="token keyword">by</span> uid
<span class="token punctuation">)</span>aa
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 
  <span class="token keyword">CASE</span> 
    <span class="token keyword">WHEN</span> num_aid <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">THEN</span> <span class="token string">&#39;1&#39;</span>
    <span class="token keyword">WHEN</span> num_aid <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">THEN</span> <span class="token string">&#39;2&#39;</span>
    <span class="token keyword">WHEN</span> num_aid <span class="token operator">=</span> <span class="token number">3</span> <span class="token keyword">THEN</span> <span class="token string">&#39;3&#39;</span>
    <span class="token keyword">WHEN</span> num_aid <span class="token operator">=</span> <span class="token number">4</span> <span class="token keyword">THEN</span> <span class="token string">&#39;4&#39;</span>
    <span class="token keyword">WHEN</span> num_aid <span class="token operator">BETWEEN</span> <span class="token number">5</span> <span class="token operator">AND</span> <span class="token number">6</span> <span class="token keyword">THEN</span> <span class="token string">&#39;5-6&#39;</span>
    <span class="token keyword">WHEN</span> num_aid <span class="token operator">BETWEEN</span> <span class="token number">7</span> <span class="token operator">AND</span> <span class="token number">8</span> <span class="token keyword">THEN</span> <span class="token string">&#39;7-8&#39;</span>
    <span class="token keyword">WHEN</span> num_aid <span class="token operator">BETWEEN</span> <span class="token number">9</span> <span class="token operator">AND</span> <span class="token number">10</span> <span class="token keyword">THEN</span> <span class="token string">&#39;9-10&#39;</span>
    <span class="token keyword">WHEN</span> num_aid <span class="token operator">BETWEEN</span> <span class="token number">11</span> <span class="token operator">AND</span> <span class="token number">15</span> <span class="token keyword">THEN</span> <span class="token string">&#39;11-15&#39;</span>
    <span class="token keyword">WHEN</span> num_aid <span class="token operator">BETWEEN</span> <span class="token number">16</span> <span class="token operator">AND</span> <span class="token number">30</span> <span class="token keyword">THEN</span> <span class="token string">&#39;16-30&#39;</span>
    <span class="token keyword">ELSE</span> <span class="token string">&#39;&gt;30&#39;</span>
  <span class="token keyword">END</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>统计数据分位点：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  percentile<span class="token punctuation">(</span>num_uid<span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_uid_10th_percentile<span class="token punctuation">,</span>
  percentile<span class="token punctuation">(</span>num_uid<span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_uid_30th_percentile<span class="token punctuation">,</span>
  percentile<span class="token punctuation">(</span>num_uid<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_uid_50th_percentile<span class="token punctuation">,</span>
  percentile<span class="token punctuation">(</span>num_uid<span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_uid_80th_percentile<span class="token punctuation">,</span>
  percentile<span class="token punctuation">(</span>num_uid<span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_uid_90th_percentile<span class="token punctuation">,</span>
  percentile<span class="token punctuation">(</span>num_uid<span class="token punctuation">,</span> <span class="token number">0.95</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_uid_95th_percentile<span class="token punctuation">,</span>
  percentile<span class="token punctuation">(</span>num_uid<span class="token punctuation">,</span> <span class="token number">0.99</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_uid_99th_percentile
<span class="token keyword">FROM</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span>
    author_id<span class="token punctuation">,</span>
    <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num_uid<span class="token punctuation">,</span>
    concat_ws<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span>collect_set<span class="token punctuation">(</span>cast<span class="token punctuation">(</span>user_id <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> map_list
    <span class="token keyword">FROM</span> reco_live<span class="token punctuation">.</span>daily_user_author_action_stat_di
    <span class="token keyword">WHERE</span> p_date <span class="token operator">between</span> <span class="token string">&#39;20240617&#39;</span> <span class="token operator">and</span> <span class="token string">&#39;20240623&#39;</span> 
    <span class="token operator">AND</span> follow_author_cnt <span class="token operator">+</span> more_60s_play_cnt <span class="token operator">+</span> comment_cnt <span class="token operator">+</span> send_gift_amt <span class="token operator">&gt;</span> <span class="token number">0</span>
    <span class="token keyword">group</span> <span class="token keyword">by</span> author_id
<span class="token punctuation">)</span>aa<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="任务四-auc计算" tabindex="-1"><a class="header-anchor" href="#任务四-auc计算"><span>任务四：AUC计算</span></a></h3>`,34),k=s("p",null,[n("AUC为正样本得分大于负样本得分的概率，但是穷举正负样本对太复杂，可以先根据得分从小到大排序，然后找出每个正样本的排序位次。计算出每个位次下负样本的个数，就是该正样本得分大于负样本得分的次数，对次数进行累加就是所有正样本得分大于负样本得分的次数，除以"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"M"),s("mo",null,"×"),s("mi",null,"N")]),s("annotation",{encoding:"application/x-tex"},"M×N")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])]),n("就是所有正样本得分大于负样本得分的概率，如下图所示：")],-1),m=s("figure",null,[s("img",{src:p,alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),v=s("p",null,"所以最终AUC的公式为：",-1),b=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A"),s("mi",null,"U"),s("mi",null,"C"),s("mo",null,"="),s("mfrac",null,[s("mrow",null,[s("munder",null,[s("mo",null,"∑"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"∈"),s("mtext",null," 正样本 ")])]),s("msub",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"rank"),s("mo",null,"⁡")]),s("mi",null,"i")]),s("mo",null,"−"),s("mi",null,"M"),s("mo",{stretchy:"false"},"("),s("mi",null,"M"),s("mo",null,"+"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mi",{mathvariant:"normal"},"/"),s("mn",null,"2")]),s("mrow",null,[s("mi",null,"M"),s("mo",null,"×"),s("mi",null,"N")])])]),s("annotation",{encoding:"application/x-tex"}," AUC=\\frac{\\sum_{i \\in \\text { 正样本 }} \\operatorname{rank}_{i}-M(M+1) / 2}{M \\times N} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"U"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.2364em","vertical-align":"-0.7693em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.4671em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.7171em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"∑"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1786em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"∈"),s("span",{class:"mord text mtight"},[s("span",{class:"mord mtight"}," "),s("span",{class:"mord cjk_fallback mtight"},"正样本"),s("span",{class:"mord mtight"}," ")])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3271em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[s("span",{class:"mop"},[s("span",{class:"mord mathrm"},"rank")]),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"−"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")"),s("span",{class:"mord"},"/2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7693em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])])])],-1),h=t(`<p>SQL代码如下：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
    aid<span class="token punctuation">,</span> <span class="token punctuation">(</span>sum_rank <span class="token operator">-</span> <span class="token number">0.5</span><span class="token operator">*</span>m<span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>n<span class="token operator">/</span>m <span class="token keyword">as</span> auc
<span class="token keyword">from</span><span class="token punctuation">(</span>
    <span class="token keyword">select</span> aid<span class="token punctuation">,</span>
        <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> n<span class="token punctuation">,</span>
        <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> m<span class="token punctuation">,</span>
        <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sum_rank
    <span class="token keyword">from</span><span class="token punctuation">(</span>
        <span class="token keyword">select</span> aid<span class="token punctuation">,</span> pair_exists <span class="token keyword">as</span> y<span class="token punctuation">,</span> row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> aid <span class="token keyword">order</span> <span class="token keyword">by</span> rank <span class="token keyword">desc</span><span class="token punctuation">)</span> <span class="token keyword">as</span> r
        <span class="token keyword">from</span> reco_live<span class="token punctuation">.</span>a2u_live_yih_auc_rank
    <span class="token punctuation">)</span>A <span class="token keyword">group</span> <span class="token keyword">by</span> aid
<span class="token punctuation">)</span>B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sql框架" tabindex="-1"><a class="header-anchor" href="#sql框架"><span>sql框架</span></a></h2><p>SQL 语句执行顺序：</p><ul><li><p>书写顺序：SELECT -&gt; FROM -&gt; JOIN -&gt; ON -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; UNION -&gt; ORDER BY -&gt;LIMIT</p></li><li><p>执行顺序：FROM -&gt; ON -&gt; JOIN -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT -&gt; UNION -&gt; ORDER BY -&gt;LIMIT</p></li></ul><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">--sql的书写顺序【按行号】 执行顺序【按括号内的数字顺序】</span>
<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">DISTINCT</span><span class="token operator">&lt;</span>Select_list<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>left_table<span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>join_type<span class="token operator">&gt;</span><span class="token keyword">JOIN</span><span class="token operator">&lt;</span>right_table<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">ON</span><span class="token operator">&lt;</span>join_condition<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span><span class="token operator">&lt;</span>where_condition<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span><span class="token operator">&lt;</span>group_by_list<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">WITH</span> {CUBE<span class="token operator">|</span>ROLLUP}
<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token keyword">HAVING</span><span class="token operator">&lt;</span>having_condtion<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span><span class="token operator">&lt;</span>order_by_list<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">LIMIT</span><span class="token operator">&lt;</span>limit_number<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,8),g={href:"https://blog.csdn.net/helloHbulie/article/details/115376657",target:"_blank",rel:"noopener noreferrer"},y={href:"https://developer.aliyun.com/article/901408",target:"_blank",rel:"noopener noreferrer"},_={href:"https://blog.csdn.net/u012762410/article/details/127744611",target:"_blank",rel:"noopener noreferrer"};function w(E,N){const a=l("ExternalLinkIcon");return c(),i("div",null,[u,k,m,v,b,h,s("blockquote",null,[s("p",null,[n("CSDN："),s("a",g,[n("一文学完所有的Hive Sql（两万字最全详解）"),e(a)]),n(" 阿里云开发者社区："),s("a",y,[n("最强最全面的Hive SQL开发指南，超四万字全面解析 （一）"),e(a)]),n(" CSDN："),s("a",_,[n("AUC的三种计算方法及代码"),e(a)])])])])}const q=o(d,[["render",w],["__file","sql.html.vue"]]),A=JSON.parse('{"path":"/zsk/tech/code/sql.html","title":"SQL学习笔记","lang":"zh-CN","frontmatter":{"date":"2024-06-14T00:00:00.000Z","title":"SQL学习笔记","author":"Genhiy","order":6,"category":["Coding"],"tag":["SQL"],"description":"有了大语言模型之后，学习和应用一个陌生的代码框架真的容易了太多，这样算法工程师就可以把更多心思放在如何设计算法上，用我个人今天的经验举个例子： 简单应用 下午15点左右，接到了一个任务，有一个数据库，其中关键信息为uid、aid、ts，分别为user用户id、author作者id、timestamp时间戳，需求：1.只保留一个ts下的数据，2.相同的(...","head":[["meta",{"property":"og:url","content":"https://github.com/Genhiy/Genhiy.github.io/zsk/tech/code/sql.html"}],["meta",{"property":"og:site_name","content":"Genhiy"}],["meta",{"property":"og:title","content":"SQL学习笔记"}],["meta",{"property":"og:description","content":"有了大语言模型之后，学习和应用一个陌生的代码框架真的容易了太多，这样算法工程师就可以把更多心思放在如何设计算法上，用我个人今天的经验举个例子： 简单应用 下午15点左右，接到了一个任务，有一个数据库，其中关键信息为uid、aid、ts，分别为user用户id、author作者id、timestamp时间戳，需求：1.只保留一个ts下的数据，2.相同的(..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/Genhiy/Genhiy.github.io/assets/images/zsk/tech/Snipaste_2024-06-27_14-32-14.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Genhiy"}],["meta",{"property":"article:tag","content":"SQL"}],["meta",{"property":"article:published_time","content":"2024-06-14T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SQL学习笔记\\",\\"image\\":[\\"https://github.com/Genhiy/Genhiy.github.io/assets/images/zsk/tech/Snipaste_2024-06-27_14-32-14.png\\",\\"https://github.com/Genhiy/Genhiy.github.io/assets/images/zsk/tech/sqlkj.png\\"],\\"datePublished\\":\\"2024-06-14T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Genhiy\\"}]}"]]},"headers":[{"level":2,"title":"简单应用","slug":"简单应用","link":"#简单应用","children":[{"level":3,"title":"任务一：筛选","slug":"任务一-筛选","link":"#任务一-筛选","children":[]},{"level":3,"title":"任务二：去重","slug":"任务二-去重","link":"#任务二-去重","children":[]},{"level":3,"title":"任务三：统计","slug":"任务三-统计","link":"#任务三-统计","children":[]},{"level":3,"title":"任务四：AUC计算","slug":"任务四-auc计算","link":"#任务四-auc计算","children":[]}]},{"level":2,"title":"sql框架","slug":"sql框架","link":"#sql框架","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{},"readingTime":{"minutes":6.41,"words":1923},"filePathRelative":"zsk/tech/code/sql.md","localizedDate":"2024年6月14日","excerpt":"<p>有了大语言模型之后，学习和应用一个陌生的代码框架真的容易了太多，这样算法工程师就可以把更多心思放在如何设计算法上，用我个人今天的经验举个例子：</p>\\n<h2>简单应用</h2>\\n<p>下午15点左右，接到了一个任务，有一个数据库，其中关键信息为uid、aid、ts，分别为user用户id、author作者id、timestamp时间戳，需求：1.只保留一个ts下的数据，2.相同的(uid,aid)对，只保留一条数据。在此之前我没接触过SQL，但是，通过kimi：</p>\\n<h3>任务一：筛选</h3>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>Prompt：写一段sql语句，用于从一个表格中读取ts列以及新的一列rk，rk列内容为ts从小到大排列的位次。</p>\\n</div>","autoDesc":true}');export{q as comp,A as data};
