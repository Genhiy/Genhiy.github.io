import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-SD3SAAIy.js";const p={},t=e(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>在做数据分析或者门户看板的时候，我们有时会有求大盘数据的分位数的需求，大部分场景在都可以通过Hive提供的分位数函数求解，但是在大数据量（几十亿+）的情况下，HIVE自带的分位数函数往往执行速度受限，极端情况需要需要执行十几小时或者在资源限制下得不到最终结果。</p><p>本文介绍几种方式，通过对sql的简单改造，更加快速执行出结果。</p><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h2><h3 id="案例一-计算过去30天内用户对主播的时长分-double类型的小数-10-25-50-75-90分位数" tabindex="-1"><a class="header-anchor" href="#案例一-计算过去30天内用户对主播的时长分-double类型的小数-10-25-50-75-90分位数"><span>案例一：计算过去30天内用户对主播的时长分（double类型的小数）10，25， 50，75，90分位数</span></a></h3><p>案例背景：某时长优化实验需要确定策略阈值，因此需要探查下满足某个特征的用户群体对某类主播的时长分的分位数情况，以便对该人群的直播喜好属性做更精细化的划分</p><p>针对该场景常规做法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
  percentile<span class="token punctuation">(</span>play_live_duration_pp<span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span>  <span class="token keyword">as</span> play_live_duration_pp10<span class="token punctuation">,</span>
  percentile<span class="token punctuation">(</span>play_live_duration_pp<span class="token punctuation">,</span><span class="token number">0.25</span><span class="token punctuation">)</span> <span class="token keyword">as</span> play_live_duration_pp25<span class="token punctuation">,</span>
  percentile<span class="token punctuation">(</span>play_live_duration_pp<span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span>  <span class="token keyword">as</span> play_live_duration_pp50<span class="token punctuation">,</span>
  percentile<span class="token punctuation">(</span>play_live_duration_pp<span class="token punctuation">,</span><span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token keyword">as</span> play_live_duration_pp70<span class="token punctuation">,</span>
  percentile<span class="token punctuation">(</span>play_live_duration_pp<span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">)</span>  <span class="token keyword">as</span> play_live_duration_pp90
<span class="token keyword">from</span> 
	tableA 
<span class="token keyword">where</span>
	p_date <span class="token operator">=</span> <span class="token string">&#39;20221008&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经测试，该sql由于时长分（上述sql中的play_live_duration_pp）的精度较高，小数点后保留10位以上，整体执行时长17h+，主要原因是在做reduce时，要做最终的merge操作，在map端聚合的效果越差，在reduce阶段的数据倾斜压力就越大（相等于由一个task处理百亿到千亿级别的数据）</p><p>改动后:</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
  percentile<span class="token punctuation">(</span><span class="token function">round</span><span class="token punctuation">(</span>play_live_duration_pp<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span>  <span class="token keyword">as</span> play_live_duration_pp10<span class="token punctuation">,</span>
  percentile<span class="token punctuation">(</span><span class="token function">round</span><span class="token punctuation">(</span>play_live_duration_pp<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.25</span><span class="token punctuation">)</span> <span class="token keyword">as</span> play_live_duration_pp25<span class="token punctuation">,</span>
  percentile<span class="token punctuation">(</span><span class="token function">round</span><span class="token punctuation">(</span>play_live_duration_pp<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span>  <span class="token keyword">as</span> play_live_duration_pp50<span class="token punctuation">,</span>
  percentile<span class="token punctuation">(</span><span class="token function">round</span><span class="token punctuation">(</span>play_live_duration_pp<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token keyword">as</span> play_live_duration_pp70<span class="token punctuation">,</span>
  percentile<span class="token punctuation">(</span><span class="token function">round</span><span class="token punctuation">(</span>play_live_duration_pp<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">)</span>  <span class="token keyword">as</span> play_live_duration_pp90
<span class="token keyword">from</span> 
	tableA   
<span class="token keyword">where</span>
	p_date <span class="token operator">=</span> <span class="token string">&#39;20221008&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改动后执行时间从原先的17h，到改动后的5分钟达成结果。</p><p>Ps： 示例中保留了4位小数，若4位不满足述求，可按实际需要保留位数即可，但保留的位数越多，在进行reduce操作时，提前聚合结果的效果越差，即最终的数据倾斜程度越高。</p><h3 id="案例二-多维度下观测用户关注数各分位数-10分位数、中位数、90分位数等-的变化情况" tabindex="-1"><a class="header-anchor" href="#案例二-多维度下观测用户关注数各分位数-10分位数、中位数、90分位数等-的变化情况"><span>案例二：多维度下观测用户关注数各分位数（10分位数、中位数、90分位数等）的变化情况</span></a></h3><p>案例背景：为了持续观测各类涨关注实验对大盘用户关注数的影响，需要看不同产品、年龄段、用户活跃度以及关注数区间下（实际上可能更多维度）的用户的关注数分位数变化情况</p><p>常规做法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
    nvl<span class="token punctuation">(</span>product<span class="token punctuation">,</span><span class="token string">&#39;ALL&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> product
   <span class="token punctuation">,</span>nvl<span class="token punctuation">(</span>age_range<span class="token punctuation">,</span><span class="token string">&#39;ALL&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> age_range
   <span class="token punctuation">,</span>nvl<span class="token punctuation">(</span>user_active_degree<span class="token punctuation">,</span><span class="token string">&#39;ALL&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> user_active_degree
   <span class="token punctuation">,</span>nvl<span class="token punctuation">(</span>follow_user_num_range<span class="token punctuation">,</span><span class="token string">&#39;ALL&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> follow_user_num_range
   <span class="token punctuation">,</span>percentile<span class="token punctuation">(</span>follow_user_num<span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.75</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> percentile_arr
<span class="token keyword">from</span>
    tableA    
<span class="token keyword">where</span>
    p_date <span class="token operator">=</span> <span class="token string">&#39;2022xxxx&#39;</span>
<span class="token keyword">group</span> <span class="token keyword">by</span>
     product
    <span class="token punctuation">,</span>age_range
    <span class="token punctuation">,</span>follow_user_num_range
    <span class="token punctuation">,</span>user_active_degree
<span class="token keyword">with</span> cube
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于需要计算cube, 即计算多个维度的自由组合（此处是2^4, 约计算膨胀16倍左右），假设tableA 数量级在十亿左右，膨胀过后约在百亿级别，整体计算量有一定的膨胀。</p><p>Ps: 极端场景下，底表聚合后依旧有百亿~千亿级别，膨胀亦是300多倍的场景，此时，整体约万亿甚至几十万亿的计算，计算量膨胀过大。</p><p>改动后：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">add</span> jar viewfs:<span class="token comment">//hadoop-lt-cluster/home/ksapp/data/udf/191/percentfile_distribute-udf-1.0-SNAPSHOT.jar;</span>
<span class="token keyword">create</span> <span class="token keyword">temporary</span> <span class="token keyword">function</span> percentile_disbt <span class="token keyword">as</span> <span class="token string">&#39;com.kuaishou.dp.udaf.PercentFileDistributeUDAF&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">with</span> cube_base <span class="token keyword">as</span> 
<span class="token punctuation">(</span>
    <span class="token keyword">select</span>
         product
        <span class="token punctuation">,</span>age_range
        <span class="token punctuation">,</span>follow_user_num_range
        <span class="token punctuation">,</span>user_active_degree
        <span class="token punctuation">,</span>follow_user_num
        <span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> follow_user_num_freq_cnt
    <span class="token keyword">from</span>
        tableA    
    <span class="token keyword">where</span>
  		p_date <span class="token operator">=</span> <span class="token string">&#39;2022xxxx&#39;</span>
  \uFEFF  <span class="token keyword">group</span> <span class="token keyword">by</span>
         product
        <span class="token punctuation">,</span>age_range
        <span class="token punctuation">,</span>follow_user_num_range
        <span class="token punctuation">,</span>user_active_degree
        <span class="token punctuation">,</span>follow_user_num
<span class="token punctuation">)</span>   
       
<span class="token keyword">select</span>
   nvl<span class="token punctuation">(</span>product<span class="token punctuation">,</span><span class="token string">&#39;ALL&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> product
  <span class="token punctuation">,</span>nvl<span class="token punctuation">(</span>age_range<span class="token punctuation">,</span><span class="token string">&#39;ALL&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> age_range
  <span class="token punctuation">,</span>nvl<span class="token punctuation">(</span>user_active_degree<span class="token punctuation">,</span><span class="token string">&#39;ALL&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> user_active_degree
  <span class="token punctuation">,</span>nvl<span class="token punctuation">(</span>follow_user_num_range<span class="token punctuation">,</span><span class="token string">&#39;ALL&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> follow_user_num_range
  <span class="token punctuation">,</span>percentile_disbt<span class="token punctuation">(</span>follow_user_num<span class="token punctuation">,</span>follow_user_num_freq_cnt<span class="token punctuation">,</span>array<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.75</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> percentile_arr
<span class="token keyword">from</span> cube_base
<span class="token keyword">group</span> <span class="token keyword">by</span>
   product
  <span class="token punctuation">,</span>age_range
  <span class="token punctuation">,</span>follow_user_num_range
  <span class="token punctuation">,</span>user_active_degree
<span class="token keyword">with</span> cube
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改动之后，先做第一层聚合，在做cube计算之前，将cube迭代计算的数据量从亿级别缩小到几千到几万之间，整体迭代计算的数据量缩小百倍。</p><p>改动前后效果概览，相对之前的效果，提升明显</p><h2 id="原理分析" tabindex="-1"><a class="header-anchor" href="#原理分析"><span>原理分析</span></a></h2><p>经过以上案例，可以知道做完改动之后的效果明显，这里介绍下percentile函数的计算过程，以便更好的理解为什么做了以上改动能够做提效，以下面的一个SQL为例子</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span>  
	 product<span class="token punctuation">,</span>
     percentile<span class="token punctuation">(</span>play_live_duration_pp<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token keyword">as</span> play_live_duration_pp50
<span class="token keyword">FROM</span> 
	 tableB
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 
	 product
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上SQL的执行流程如下：</p><ul><li>从表 tableB 中扫描所有的数据，在map阶段，所有value放进一个Map&lt;value,LongWriteable&gt;里,相同的value则增加map中的计数值 <ul><li>这里的value就是时长分（play_live_duration_pp），举个例子，在map阶段会计算（0.34532, 876）,代表这个map中，时长分为0.34532的用户有876个</li></ul></li><li>在reduce中把map中的所有entry放入一个List中,然后对List根据value值（play_live_duration_pp）进行全排序(\`Collections.sort(entriesList, new MyComparator())😉，</li><li>在reduce阶段从头开始扫一遍上一步的List, 根据计数器的值总和,分位数,定位到对应的分位数,返回对应的分位数对应的值</li></ul><p>可以知道，在第一步和第二步中间，map阶段的聚合效果越差（如案例一、小数点后位数过多，或求分位数指标的基数越多），到reduce阶段，单个task需要处理的数据量就越大，因此最终的执行时间就越长。</p><p>同时我们看到，在做cube计算时，第一步在每一个cube计算中都需要重复去计算，如果我们事先把时长分出现的频次计算好（如案例二，将百亿级别的迭代，缩小到百万级别），在第二步的时候，直接基于这个频次做计算，能极大减少迭代的计算量。从而更快速的得到结果</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>简单总结下，并非所有的分位数计算的场景都需要做这个改动，SQL数据量很小、几分钟就可以出结果的情况下，则没有必要花个几分钟去改动SQL, 白白浪费宝贵的时间。</p><p>当然，如果你的SQL计算数据量非常非常大（几十亿或者到几千亿），且分位数对应的指标基数（如案例中的关注数等）不大、这个时候，小改一下，能一定的节省你的时间，同时节省你的计算资源。具体的场景如下：</p><ul><li>计算量级： <ul><li>几十亿或者到几千亿 -&gt; 推荐做个改动，避免数据倾斜，同时减少数据膨胀</li><li>亿到十亿级别 -&gt; 常规做法即可</li></ul></li><li>指标（比如关注数、播放次数等）基数 <ul><li>相同的指标较多，根据指标分组之后，基数小的情况下 -&gt; 推荐做个改动，节省一定时间</li><li>根据指标聚合后，对计算量变化不大 -&gt; 常规做法即可</li></ul></li><li>执行时间 <ul><li>执行时间小时以上，可看计算量级和指标基数是否满足述求</li><li>执行时间分钟级别 -&gt; 常规做法即可，减少改SQL的时间</li></ul></li></ul>`,34),l=[t];function i(o,c){return s(),a("div",null,l)}const d=n(p,[["render",i],["__file","sql_p.html.vue"]]),k=JSON.parse('{"path":"/zsk/tech/code/sql_p.html","title":"SQL分位数计算优化","lang":"zh-CN","frontmatter":{"date":"2024-06-28T00:00:00.000Z","title":"SQL分位数计算优化","author":"Genhiy","order":7,"category":["Coding"],"tag":["SQL"],"description":"介绍 在做数据分析或者门户看板的时候，我们有时会有求大盘数据的分位数的需求，大部分场景在都可以通过Hive提供的分位数函数求解，但是在大数据量（几十亿+）的情况下，HIVE自带的分位数函数往往执行速度受限，极端情况需要需要执行十几小时或者在资源限制下得不到最终结果。 本文介绍几种方式，通过对sql的简单改造，更加快速执行出结果。 案例 案例一：计算过去...","head":[["meta",{"property":"og:url","content":"https://github.com/Genhiy/Genhiy.github.io/zsk/tech/code/sql_p.html"}],["meta",{"property":"og:site_name","content":"Genhiy"}],["meta",{"property":"og:title","content":"SQL分位数计算优化"}],["meta",{"property":"og:description","content":"介绍 在做数据分析或者门户看板的时候，我们有时会有求大盘数据的分位数的需求，大部分场景在都可以通过Hive提供的分位数函数求解，但是在大数据量（几十亿+）的情况下，HIVE自带的分位数函数往往执行速度受限，极端情况需要需要执行十几小时或者在资源限制下得不到最终结果。 本文介绍几种方式，通过对sql的简单改造，更加快速执行出结果。 案例 案例一：计算过去..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Genhiy"}],["meta",{"property":"article:tag","content":"SQL"}],["meta",{"property":"article:published_time","content":"2024-06-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SQL分位数计算优化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Genhiy\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[{"level":3,"title":"案例一：计算过去30天内用户对主播的时长分（double类型的小数）10，25， 50，75，90分位数","slug":"案例一-计算过去30天内用户对主播的时长分-double类型的小数-10-25-50-75-90分位数","link":"#案例一-计算过去30天内用户对主播的时长分-double类型的小数-10-25-50-75-90分位数","children":[]},{"level":3,"title":"案例二：多维度下观测用户关注数各分位数（10分位数、中位数、90分位数等）的变化情况","slug":"案例二-多维度下观测用户关注数各分位数-10分位数、中位数、90分位数等-的变化情况","link":"#案例二-多维度下观测用户关注数各分位数-10分位数、中位数、90分位数等-的变化情况","children":[]}]},{"level":2,"title":"原理分析","slug":"原理分析","link":"#原理分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"readingTime":{"minutes":5.82,"words":1746},"filePathRelative":"zsk/tech/code/sql_p.md","localizedDate":"2024年6月28日","excerpt":"<h2>介绍</h2>\\n<p>在做数据分析或者门户看板的时候，我们有时会有求大盘数据的分位数的需求，大部分场景在都可以通过Hive提供的分位数函数求解，但是在大数据量（几十亿+）的情况下，HIVE自带的分位数函数往往执行速度受限，极端情况需要需要执行十几小时或者在资源限制下得不到最终结果。</p>\\n<p>本文介绍几种方式，通过对sql的简单改造，更加快速执行出结果。</p>\\n<h2>案例</h2>\\n<h3>案例一：计算过去30天内用户对主播的时长分（double类型的小数）10，25， 50，75，90分位数</h3>\\n<p>案例背景：某时长优化实验需要确定策略阈值，因此需要探查下满足某个特征的用户群体对某类主播的时长分的分位数情况，以便对该人群的直播喜好属性做更精细化的划分</p>","autoDesc":true}');export{d as comp,k as data};
