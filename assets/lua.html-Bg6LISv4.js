import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as t,c as o,a as n,d as s,b as c,e as l}from"./app-SD3SAAIy.js";const i={},u={class:"hint-container tip"},k=n("p",{class:"hint-container-title"},"提示",-1),r={href:"https://learnxinyminutes.com/",target:"_blank",rel:"noopener noreferrer"},m=l(`<div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token comment">-- 单行注释以两个连字符开头</span>

<span class="token comment">--[[
     多行注释
--]]</span>

<span class="token comment">----------------------------------------------------</span>
<span class="token comment">-- 1. 变量和流程控制</span>
<span class="token comment">----------------------------------------------------</span>

num <span class="token operator">=</span> <span class="token number">42</span>  <span class="token comment">-- 所有的数字都是双精度浮点型。</span>
<span class="token comment">-- 别害怕，64位的双精度浮点型数字中有52位用于</span>
<span class="token comment">-- 保存精确的整型值; 对于52位以内的整型值，</span>
<span class="token comment">-- 不用担心精度问题。</span>

s <span class="token operator">=</span> <span class="token string">&#39;walternate&#39;</span>  <span class="token comment">-- 和Python一样，字符串不可变。</span>
t <span class="token operator">=</span> <span class="token string">&quot;也可以用双引号&quot;</span>
u <span class="token operator">=</span> <span class="token string">[[ 多行的字符串
       以两个方括号
       开始和结尾。]]</span>
t <span class="token operator">=</span> <span class="token keyword">nil</span>  <span class="token comment">-- 撤销t的定义; Lua 支持垃圾回收。</span>

<span class="token comment">-- 块使用do/end之类的关键字标识：</span>
<span class="token keyword">while</span> num <span class="token operator">&lt;</span> <span class="token number">50</span> <span class="token keyword">do</span>
  num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment">-- 不支持 ++ 或 += 运算符。</span>
<span class="token keyword">end</span>

<span class="token comment">-- If语句：</span>
<span class="token keyword">if</span> num <span class="token operator">&gt;</span> <span class="token number">40</span> <span class="token keyword">then</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;over 40&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">elseif</span> s <span class="token operator">~=</span> <span class="token string">&#39;walternate&#39;</span> <span class="token keyword">then</span>  <span class="token comment">-- ~= 表示不等于。</span>
  <span class="token comment">-- 像Python一样，用 == 检查是否相等 ；字符串同样适用。</span>
  io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;not over 40\\n&#39;</span><span class="token punctuation">)</span>  <span class="token comment">-- 默认标准输出。</span>
<span class="token keyword">else</span>
  <span class="token comment">-- 默认全局变量。</span>
  thisIsGlobal <span class="token operator">=</span> <span class="token number">5</span>  <span class="token comment">-- 通常使用驼峰。</span>

  <span class="token comment">-- 如何定义局部变量：</span>
  <span class="token keyword">local</span> line <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">-- 读取标准输入的下一行。</span>

  <span class="token comment">-- ..操作符用于连接字符串：</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;Winter is coming, &#39;</span> <span class="token operator">..</span> line<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment">-- 未定义的变量返回nil。</span>
<span class="token comment">-- 这不是错误：</span>
foo <span class="token operator">=</span> anUnknownVariable  <span class="token comment">-- 现在 foo = nil.</span>

aBoolValue <span class="token operator">=</span> <span class="token keyword">false</span>

<span class="token comment">--只有nil和false为假; 0和 &#39;&#39;均为真！</span>
<span class="token keyword">if</span> <span class="token keyword">not</span> aBoolValue <span class="token keyword">then</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;false&#39;</span><span class="token punctuation">)</span> <span class="token keyword">end</span>

<span class="token comment">-- &#39;or&#39;和 &#39;and&#39;短路</span>
<span class="token comment">-- 类似于C/js里的 a?b:c 操作符：</span>
ans <span class="token operator">=</span> aBoolValue <span class="token keyword">and</span> <span class="token string">&#39;yes&#39;</span> <span class="token keyword">or</span> <span class="token string">&#39;no&#39;</span>  <span class="token comment">--&gt; &#39;no&#39;</span>

karlSum <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token keyword">do</span>  <span class="token comment">-- 范围包含两端</span>
  karlSum <span class="token operator">=</span> karlSum <span class="token operator">+</span> i
<span class="token keyword">end</span>

<span class="token comment">-- 使用 &quot;100, 1, -1&quot; 表示递减的范围：</span>
fredSum <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">do</span> fredSum <span class="token operator">=</span> fredSum <span class="token operator">+</span> j <span class="token keyword">end</span>

<span class="token comment">-- 通常，范围表达式为begin, end[, step].</span>

<span class="token comment">-- 循环的另一种结构：</span>
<span class="token keyword">repeat</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;the way of the future&#39;</span><span class="token punctuation">)</span>
  num <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">1</span>
<span class="token keyword">until</span> num <span class="token operator">==</span> <span class="token number">0</span>

<span class="token comment">----------------------------------------------------</span>
<span class="token comment">-- 2. 函数。</span>
<span class="token comment">----------------------------------------------------</span>

<span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
  <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token keyword">then</span> <span class="token keyword">return</span> n <span class="token keyword">end</span>
  <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment">-- 支持闭包及匿名函数：</span>
<span class="token keyword">function</span> <span class="token function">adder</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
  <span class="token comment">-- 调用adder时，会创建返回的函数，</span>
  <span class="token comment">-- 并且会记住x的值：</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token keyword">end</span>
<span class="token keyword">end</span>
a1 <span class="token operator">=</span> <span class="token function">adder</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>
a2 <span class="token operator">=</span> <span class="token function">adder</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">a1</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">--&gt; 25</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">a2</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">--&gt; 100</span>

<span class="token comment">-- 返回值、函数调用和赋值都可以</span>
<span class="token comment">-- 使用长度不匹配的list。</span>
<span class="token comment">-- 不匹配的接收方会被赋值nil；</span>
<span class="token comment">-- 不匹配的发送方会被丢弃。</span>

x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>
<span class="token comment">-- x = 1、y = 2、z = 3, 而 4 会被丢弃。</span>

<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
  <span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">42</span>
<span class="token keyword">end</span>

x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token string">&#39;zaphod&#39;</span><span class="token punctuation">)</span>  <span class="token comment">--&gt; 打印 &quot;zaphod  nil nil&quot;</span>
<span class="token comment">-- 现在 x = 4, y = 8, 而值15..42被丢弃。</span>

<span class="token comment">-- 函数是一等公民，可以是局部的，也可以是全局的。</span>
<span class="token comment">-- 以下表达式等价：</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">return</span> x <span class="token operator">*</span> x <span class="token keyword">end</span>
f <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">return</span> x <span class="token operator">*</span> x <span class="token keyword">end</span>

<span class="token comment">-- 这些也是等价的：</span>
<span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">end</span>
<span class="token keyword">local</span> g<span class="token punctuation">;</span> g <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">end</span>
<span class="token comment">-- 以上均因&#39;local g&#39;，使得g可以自引用。</span>
<span class="token keyword">local</span> g <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">end</span>
<span class="token comment">-- 等价于 local function g(x)..., 但函数体中g不可自引用</span>

<span class="token comment">-- 顺便提下，三角函数以弧度为单位。</span>

<span class="token comment">-- 用一个字符串参数调用函数，可以省略括号：</span>
print <span class="token string">&#39;hello&#39;</span>  <span class="token comment">--可以工作。</span>

<span class="token comment">-- 调用函数时，如果只有一个table参数，</span>
<span class="token comment">-- 同样可以省略括号（table详情见下）：</span>
<span class="token function">print</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">-- 一样可以工作。</span>

<span class="token comment">----------------------------------------------------</span>
<span class="token comment">-- 3. Table。</span>
<span class="token comment">----------------------------------------------------</span>

<span class="token comment">-- Table = Lua唯一的组合数据结构;</span>
<span class="token comment">--         它们是关联数组。</span>
<span class="token comment">-- 类似于PHP的数组或者js的对象，</span>
<span class="token comment">-- 它们是哈希表或者字典，也可以当列表使用。</span>

<span class="token comment">-- 按字典/map的方式使用Table：</span>

<span class="token comment">-- Dict字面量默认使用字符串类型的key：</span>
t <span class="token operator">=</span> <span class="token punctuation">{</span>key1 <span class="token operator">=</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span> key2 <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">}</span>

<span class="token comment">-- 字符串key可以使用类似js的点标记：</span>
<span class="token function">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>key1<span class="token punctuation">)</span>  <span class="token comment">-- 打印 &#39;value1&#39;.</span>
t<span class="token punctuation">.</span>newKey <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">-- 添加新的键值对。</span>
t<span class="token punctuation">.</span>key2 <span class="token operator">=</span> <span class="token keyword">nil</span>   <span class="token comment">-- 从table删除 key2。</span>

<span class="token comment">-- 使用任何非nil的值作为key：</span>
u <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">&#39;@!#&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;qbert&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1729</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6.28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;tau&#39;</span><span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span>u<span class="token punctuation">[</span><span class="token number">6.28</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">-- 打印 &quot;tau&quot;</span>

<span class="token comment">-- 数字和字符串的key按值匹配的</span>
<span class="token comment">-- table按id匹配。</span>
a <span class="token operator">=</span> u<span class="token punctuation">[</span><span class="token string">&#39;@!#&#39;</span><span class="token punctuation">]</span>  <span class="token comment">-- 现在 a = &#39;qbert&#39;.</span>
b <span class="token operator">=</span> u<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span>     <span class="token comment">-- 我们或许期待的是 1729,  但是得到的是nil:</span>
<span class="token comment">-- b = nil ，因为没有找到。</span>
<span class="token comment">-- 之所以没找到，是因为我们用的key与保存数据时用的不是同</span>
<span class="token comment">-- 一个对象。</span>
<span class="token comment">-- 所以字符串和数字是移植性更好的key。</span>

<span class="token comment">-- 只需要一个table参数的函数调用不需要括号：</span>
<span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>key1<span class="token punctuation">)</span> <span class="token keyword">end</span>
<span class="token function">h</span><span class="token punctuation">{</span>key1 <span class="token operator">=</span> <span class="token string">&#39;Sonmi~451&#39;</span><span class="token punctuation">}</span>  <span class="token comment">-- 打印&#39;Sonmi~451&#39;.</span>

<span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token keyword">do</span>  <span class="token comment">-- 遍历Table</span>
  <span class="token function">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment">-- _G 是一个特殊的table，用于保存所有的全局变量</span>
<span class="token function">print</span><span class="token punctuation">(</span>_G<span class="token punctuation">[</span><span class="token string">&#39;_G&#39;</span><span class="token punctuation">]</span> <span class="token operator">==</span> _G<span class="token punctuation">)</span>  <span class="token comment">-- 打印&#39;true&#39;.</span>

<span class="token comment">-- 按列表/数组的方式使用：</span>

<span class="token comment">-- 列表字面量隐式添加整数键：</span>
v <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">,</span> <span class="token number">1.21</span><span class="token punctuation">,</span> <span class="token string">&#39;gigawatts&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">#</span>v <span class="token keyword">do</span>  <span class="token comment">-- #v 是列表的大小</span>
  <span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">-- 索引从 1 开始!! 太疯狂了！</span>
<span class="token keyword">end</span>
<span class="token comment">-- &#39;list&#39;并非真正的类型，v 其实是一个table，</span>
<span class="token comment">-- 只不过它用连续的整数作为key，可以像list那样去使用。</span>

<span class="token comment">----------------------------------------------------</span>
<span class="token comment">-- 3.1 元表（metatable） 和元方法（metamethod）。</span>
<span class="token comment">----------------------------------------------------</span>

<span class="token comment">-- table的元表提供了一种机制，支持类似操作符重载的行为。</span>
<span class="token comment">-- 稍后我们会看到元表如何支持类似js prototype的行为。</span>

f1 <span class="token operator">=</span> <span class="token punctuation">{</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span>  <span class="token comment">-- 表示一个分数 a/b.</span>
f2 <span class="token operator">=</span> <span class="token punctuation">{</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span>

<span class="token comment">-- 这会失败：</span>
<span class="token comment">-- s = f1 + f2</span>

metafraction <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> metafraction<span class="token punctuation">.</span><span class="token function">__add</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">)</span>
  <span class="token keyword">local</span> sum <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  sum<span class="token punctuation">.</span>b <span class="token operator">=</span> f1<span class="token punctuation">.</span>b <span class="token operator">*</span> f2<span class="token punctuation">.</span>b
  sum<span class="token punctuation">.</span>a <span class="token operator">=</span> f1<span class="token punctuation">.</span>a <span class="token operator">*</span> f2<span class="token punctuation">.</span>b <span class="token operator">+</span> f2<span class="token punctuation">.</span>a <span class="token operator">*</span> f1<span class="token punctuation">.</span>b
  <span class="token keyword">return</span> sum
<span class="token keyword">end</span>

<span class="token function">setmetatable</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> metafraction<span class="token punctuation">)</span>
<span class="token function">setmetatable</span><span class="token punctuation">(</span>f2<span class="token punctuation">,</span> metafraction<span class="token punctuation">)</span>

s <span class="token operator">=</span> f1 <span class="token operator">+</span> f2  <span class="token comment">-- 调用在f1的元表上的__add(f1, f2) 方法</span>

<span class="token comment">-- f1, f2 没有关于元表的key，这点和js的prototype不一样。</span>
<span class="token comment">-- 因此你必须用getmetatable(f1)获取元表。</span>
<span class="token comment">-- 元表是一个普通的table，</span>
<span class="token comment">-- 元表的key是普通的Lua中的key，例如__add。</span>

<span class="token comment">-- 但是下面一行代码会失败，因为s没有元表：</span>
<span class="token comment">-- t = s + s</span>
<span class="token comment">-- 下面提供的与类相似的模式可以解决这个问题：</span>

<span class="token comment">-- 元表的__index 可以重载用于查找的点操作符：</span>
defaultFavs <span class="token operator">=</span> <span class="token punctuation">{</span>animal <span class="token operator">=</span> <span class="token string">&#39;gru&#39;</span><span class="token punctuation">,</span> food <span class="token operator">=</span> <span class="token string">&#39;donuts&#39;</span><span class="token punctuation">}</span>
myFavs <span class="token operator">=</span> <span class="token punctuation">{</span>food <span class="token operator">=</span> <span class="token string">&#39;pizza&#39;</span><span class="token punctuation">}</span>
<span class="token function">setmetatable</span><span class="token punctuation">(</span>myFavs<span class="token punctuation">,</span> <span class="token punctuation">{</span>__index <span class="token operator">=</span> defaultFavs<span class="token punctuation">}</span><span class="token punctuation">)</span>
eatenBy <span class="token operator">=</span> myFavs<span class="token punctuation">.</span>animal  <span class="token comment">-- 可以工作！感谢元表</span>

<span class="token comment">-- 如果在table中直接查找key失败，会使用</span>
<span class="token comment">-- 元表的__index 递归地重试。</span>

<span class="token comment">-- __index的值也可以是function(tbl, key)</span>
<span class="token comment">-- 这样可以支持自定义查找。</span>

<span class="token comment">-- __index、__add等的值，被称为元方法。</span>
<span class="token comment">-- 这里是一个table元方法的清单：</span>

<span class="token comment">-- __add(a, b)                     for a + b</span>
<span class="token comment">-- __sub(a, b)                     for a - b</span>
<span class="token comment">-- __mul(a, b)                     for a * b</span>
<span class="token comment">-- __div(a, b)                     for a / b</span>
<span class="token comment">-- __mod(a, b)                     for a % b</span>
<span class="token comment">-- __pow(a, b)                     for a ^ b</span>
<span class="token comment">-- __unm(a)                        for -a</span>
<span class="token comment">-- __concat(a, b)                  for a .. b</span>
<span class="token comment">-- __len(a)                        for #a</span>
<span class="token comment">-- __eq(a, b)                      for a == b</span>
<span class="token comment">-- __lt(a, b)                      for a &lt; b</span>
<span class="token comment">-- __le(a, b)                      for a &lt;= b</span>
<span class="token comment">-- __index(a, b)  &lt;fn or a table&gt;  for a.b</span>
<span class="token comment">-- __newindex(a, b, c)             for a.b = c</span>
<span class="token comment">-- __call(a, ...)                  for a(...)</span>

<span class="token comment">----------------------------------------------------</span>
<span class="token comment">-- 3.2 与类相似的table和继承。</span>
<span class="token comment">----------------------------------------------------</span>

<span class="token comment">-- Lua没有内建的类；可以通过不同的方法，利用表和元表</span>
<span class="token comment">-- 来实现类。</span>

<span class="token comment">-- 下面是一个例子，解释在后面：</span>

Dog <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                                   <span class="token comment">-- 1.</span>

<span class="token keyword">function</span> Dog<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token comment">-- 2.</span>
  <span class="token keyword">local</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span>sound <span class="token operator">=</span> <span class="token string">&#39;woof&#39;</span><span class="token punctuation">}</span>                <span class="token comment">-- 3.</span>
  self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self                      <span class="token comment">-- 4.</span>
  <span class="token keyword">return</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> self<span class="token punctuation">)</span>        <span class="token comment">-- 5.</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> Dog<span class="token punctuation">:</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment">-- 6.</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;I say &#39;</span> <span class="token operator">..</span> self<span class="token punctuation">.</span>sound<span class="token punctuation">)</span>
<span class="token keyword">end</span>

mrDog <span class="token operator">=</span> Dog<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token comment">-- 7.</span>
mrDog<span class="token punctuation">:</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">-- &#39;I say woof&#39;         -- 8.</span>

<span class="token comment">-- 1. Dog看上去像一个类；其实它是一个table。</span>
<span class="token comment">-- 2. 函数tablename:fn(...) 等价于</span>
<span class="token comment">--    函数tablename.fn(self, ...)</span>
<span class="token comment">--    冒号（:）只是添加了self作为第一个参数。</span>
<span class="token comment">--    阅读7 &amp; 8条 了解self变量是如何得到其值的。</span>
<span class="token comment">-- 3. newObj是类Dog的一个实例。</span>
<span class="token comment">-- 4. self = 被继承的类。通常self = Dog，不过继承可以改变它。</span>
<span class="token comment">--    如果把newObj的元表和__index都设置为self，</span>
<span class="token comment">--    newObj就可以得到self的函数。</span>
<span class="token comment">-- 5. 备忘：setmetatable返回其第一个参数。</span>
<span class="token comment">-- 6. 冒号（：）的作用和第2条一样，不过这里</span>
<span class="token comment">--    self是一个实例，而不是类</span>
<span class="token comment">-- 7. 等价于Dog.new(Dog)，所以在new()中，self = Dog。</span>
<span class="token comment">-- 8. 等价于mrDog.makeSound(mrDog); self = mrDog。</span>

<span class="token comment">----------------------------------------------------</span>

<span class="token comment">-- 继承的例子：</span>

LoudDog <span class="token operator">=</span> Dog<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment">-- 1.</span>

<span class="token keyword">function</span> LoudDog<span class="token punctuation">:</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> s <span class="token operator">=</span> self<span class="token punctuation">.</span>sound <span class="token operator">..</span> <span class="token string">&#39; &#39;</span>                       <span class="token comment">-- 2.</span>
  <span class="token function">print</span><span class="token punctuation">(</span>s <span class="token operator">..</span> s <span class="token operator">..</span> s<span class="token punctuation">)</span>
<span class="token keyword">end</span>

seymour <span class="token operator">=</span> LoudDog<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token comment">-- 3.</span>
seymour<span class="token punctuation">:</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">-- &#39;woof woof woof&#39;      -- 4.</span>

<span class="token comment">-- 1. LoudDog获得Dog的方法和变量列表。</span>
<span class="token comment">-- 2. 因为new()的缘故，self拥有了一个&#39;sound&#39; key，参见第3条。</span>
<span class="token comment">-- 3. 等价于LoudDog.new(LoudDog)，转换一下就是</span>
<span class="token comment">--    Dog.new(LoudDog)，这是因为LoudDog没有&#39;new&#39; key，</span>
<span class="token comment">--    但是它的元表中有 __index = Dog。</span>
<span class="token comment">--    结果: seymour的元表是LoudDog，并且</span>
<span class="token comment">--    LoudDog.__index = Dog。所以有seymour.key</span>
<span class="token comment">--    = seymour.key, LoudDog.key, Dog.key</span>
<span class="token comment">--    从其中第一个有指定key的table获取。</span>
<span class="token comment">-- 4. 在LoudDog可以找到&#39;makeSound&#39;的key；</span>
<span class="token comment">--    等价于LoudDog.makeSound(seymour)。</span>

<span class="token comment">-- 如果有必要，子类也可以有new()，与基类相似：</span>
<span class="token keyword">function</span> LoudDog<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">-- 初始化newObj</span>
  self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self
  <span class="token keyword">return</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> self<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment">----------------------------------------------------</span>
<span class="token comment">-- 4. 模块</span>
<span class="token comment">----------------------------------------------------</span>


<span class="token comment">--[[ 我把这部分给注释了，这样脚本剩下的部分可以运行

-- 假设文件mod.lua的内容类似这样：
local M = {}

local function sayMyName()
  print(&#39;Hrunkner&#39;)
end

function M.sayHello()
  print(&#39;Why hello there&#39;)
  sayMyName()
end

return M

-- 另一个文件可以使用mod.lua的功能：
local mod = require(&#39;mod&#39;)  -- 运行文件mod.lua.
-- 注意：require 需要配合 LUA_PATH 一起使用 例如：export LUA_PATH=&quot;$HOME/workspace/projectName/?.lua;;&quot;

-- require是包含模块的标准做法。
-- require等价于:     (针对没有被缓存的情况；参见后面的内容)
local mod = (function ()
  &lt;contents of mod.lua&gt;
end)()
-- mod.lua被包在一个函数体中，因此mod.lua的局部变量
-- 对外不可见。

-- 下面的代码可以工作，因为在这里mod = mod.lua 中的 M：
mod.sayHello()  -- Says hello to Hrunkner.

-- 这是错误的；sayMyName只在mod.lua中存在：
mod.sayMyName()  -- 错误

-- require返回的值会被缓存，所以一个文件只会被运行一次，
-- 即使它被require了多次。

-- 假设mod2.lua包含代码&quot;print(&#39;Hi!&#39;)&quot;。
local a = require(&#39;mod2&#39;)  -- 打印Hi!
local b = require(&#39;mod2&#39;)  -- 不再打印; a=b.

-- dofile与require类似，但是不缓存：
dofile(&#39;mod2&#39;)  --&gt; Hi!
dofile(&#39;mod2&#39;)  --&gt; Hi! (再次运行，与require不同)

-- loadfile加载一个lua文件，但是并不运行它。
f = loadfile(&#39;mod2&#39;)  -- Calling f() runs mod2.lua.

-- loadstring是loadfile的字符串版本。
-- (loadstring已弃用, 使用load代替)
g = load(&#39;print(343)&#39;)  --返回一个函数。
g()  -- 打印343; 在此之前什么也不打印。

--]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function d(v,b){const a=p("ExternalLinkIcon");return t(),o("div",null,[n("div",u,[k,n("p",null,[s("转载自"),n("a",r,[s("https://learnxinyminutes.com/"),c(a)]),s("。")])]),m])}const w=e(i,[["render",d],["__file","lua.html.vue"]]),g=JSON.parse(`{"path":"/zsk/tech/code/lua.html","title":"速成lua","lang":"zh-CN","frontmatter":{"date":"2024-06-28T00:00:00.000Z","title":"速成lua","author":"Genhiy","order":7,"category":["Coding"],"tag":["lua"],"description":"提示 转载自https://learnxinyminutes.com/。","head":[["meta",{"property":"og:url","content":"https://github.com/Genhiy/Genhiy.github.io/zsk/tech/code/lua.html"}],["meta",{"property":"og:site_name","content":"Genhiy"}],["meta",{"property":"og:title","content":"速成lua"}],["meta",{"property":"og:description","content":"提示 转载自https://learnxinyminutes.com/。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Genhiy"}],["meta",{"property":"article:tag","content":"lua"}],["meta",{"property":"article:published_time","content":"2024-06-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"速成lua\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Genhiy\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":7.95,"words":2385},"filePathRelative":"zsk/tech/code/lua.md","localizedDate":"2024年6月28日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>转载自<a href=\\"https://learnxinyminutes.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://learnxinyminutes.com/</a>。</p>\\n</div>\\n<div class=\\"language-lua\\" data-ext=\\"lua\\" data-title=\\"lua\\"><pre class=\\"language-lua\\"><code><span class=\\"token comment\\">-- 单行注释以两个连字符开头</span>\\n\\n<span class=\\"token comment\\">--[[\\n     多行注释\\n--]]</span>\\n\\n<span class=\\"token comment\\">----------------------------------------------------</span>\\n<span class=\\"token comment\\">-- 1. 变量和流程控制</span>\\n<span class=\\"token comment\\">----------------------------------------------------</span>\\n\\nnum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">42</span>  <span class=\\"token comment\\">-- 所有的数字都是双精度浮点型。</span>\\n<span class=\\"token comment\\">-- 别害怕，64位的双精度浮点型数字中有52位用于</span>\\n<span class=\\"token comment\\">-- 保存精确的整型值; 对于52位以内的整型值，</span>\\n<span class=\\"token comment\\">-- 不用担心精度问题。</span>\\n\\ns <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'walternate'</span>  <span class=\\"token comment\\">-- 和Python一样，字符串不可变。</span>\\nt <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"也可以用双引号\\"</span>\\nu <span class=\\"token operator\\">=</span> <span class=\\"token string\\">[[ 多行的字符串\\n       以两个方括号\\n       开始和结尾。]]</span>\\nt <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">nil</span>  <span class=\\"token comment\\">-- 撤销t的定义; Lua 支持垃圾回收。</span>\\n\\n<span class=\\"token comment\\">-- 块使用do/end之类的关键字标识：</span>\\n<span class=\\"token keyword\\">while</span> num <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">50</span> <span class=\\"token keyword\\">do</span>\\n  num <span class=\\"token operator\\">=</span> num <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span>  <span class=\\"token comment\\">-- 不支持 ++ 或 += 运算符。</span>\\n<span class=\\"token keyword\\">end</span>\\n\\n<span class=\\"token comment\\">-- If语句：</span>\\n<span class=\\"token keyword\\">if</span> num <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">40</span> <span class=\\"token keyword\\">then</span>\\n  <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'over 40'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">elseif</span> s <span class=\\"token operator\\">~=</span> <span class=\\"token string\\">'walternate'</span> <span class=\\"token keyword\\">then</span>  <span class=\\"token comment\\">-- ~= 表示不等于。</span>\\n  <span class=\\"token comment\\">-- 像Python一样，用 == 检查是否相等 ；字符串同样适用。</span>\\n  io<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'not over 40\\\\n'</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\">-- 默认标准输出。</span>\\n<span class=\\"token keyword\\">else</span>\\n  <span class=\\"token comment\\">-- 默认全局变量。</span>\\n  thisIsGlobal <span class=\\"token operator\\">=</span> <span class=\\"token number\\">5</span>  <span class=\\"token comment\\">-- 通常使用驼峰。</span>\\n\\n  <span class=\\"token comment\\">-- 如何定义局部变量：</span>\\n  <span class=\\"token keyword\\">local</span> line <span class=\\"token operator\\">=</span> io<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">read</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\">-- 读取标准输入的下一行。</span>\\n\\n  <span class=\\"token comment\\">-- ..操作符用于连接字符串：</span>\\n  <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Winter is coming, '</span> <span class=\\"token operator\\">..</span> line<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">end</span>\\n\\n<span class=\\"token comment\\">-- 未定义的变量返回nil。</span>\\n<span class=\\"token comment\\">-- 这不是错误：</span>\\nfoo <span class=\\"token operator\\">=</span> anUnknownVariable  <span class=\\"token comment\\">-- 现在 foo = nil.</span>\\n\\naBoolValue <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">false</span>\\n\\n<span class=\\"token comment\\">--只有nil和false为假; 0和 ''均为真！</span>\\n<span class=\\"token keyword\\">if</span> <span class=\\"token keyword\\">not</span> aBoolValue <span class=\\"token keyword\\">then</span> <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'false'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">end</span>\\n\\n<span class=\\"token comment\\">-- 'or'和 'and'短路</span>\\n<span class=\\"token comment\\">-- 类似于C/js里的 a?b:c 操作符：</span>\\nans <span class=\\"token operator\\">=</span> aBoolValue <span class=\\"token keyword\\">and</span> <span class=\\"token string\\">'yes'</span> <span class=\\"token keyword\\">or</span> <span class=\\"token string\\">'no'</span>  <span class=\\"token comment\\">--&gt; 'no'</span>\\n\\nkarlSum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span>\\n<span class=\\"token keyword\\">for</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">100</span> <span class=\\"token keyword\\">do</span>  <span class=\\"token comment\\">-- 范围包含两端</span>\\n  karlSum <span class=\\"token operator\\">=</span> karlSum <span class=\\"token operator\\">+</span> i\\n<span class=\\"token keyword\\">end</span>\\n\\n<span class=\\"token comment\\">-- 使用 \\"100, 1, -1\\" 表示递减的范围：</span>\\nfredSum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span>\\n<span class=\\"token keyword\\">for</span> j <span class=\\"token operator\\">=</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span> <span class=\\"token keyword\\">do</span> fredSum <span class=\\"token operator\\">=</span> fredSum <span class=\\"token operator\\">+</span> j <span class=\\"token keyword\\">end</span>\\n\\n<span class=\\"token comment\\">-- 通常，范围表达式为begin, end[, step].</span>\\n\\n<span class=\\"token comment\\">-- 循环的另一种结构：</span>\\n<span class=\\"token keyword\\">repeat</span>\\n  <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'the way of the future'</span><span class=\\"token punctuation\\">)</span>\\n  num <span class=\\"token operator\\">=</span> num <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span>\\n<span class=\\"token keyword\\">until</span> num <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span>\\n\\n<span class=\\"token comment\\">----------------------------------------------------</span>\\n<span class=\\"token comment\\">-- 2. 函数。</span>\\n<span class=\\"token comment\\">----------------------------------------------------</span>\\n\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">fib</span><span class=\\"token punctuation\\">(</span>n<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">if</span> n <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">2</span> <span class=\\"token keyword\\">then</span> <span class=\\"token keyword\\">return</span> n <span class=\\"token keyword\\">end</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">fib</span><span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">-</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token function\\">fib</span><span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">end</span>\\n\\n<span class=\\"token comment\\">-- 支持闭包及匿名函数：</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">adder</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token comment\\">-- 调用adder时，会创建返回的函数，</span>\\n  <span class=\\"token comment\\">-- 并且会记住x的值：</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span>y<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> x <span class=\\"token operator\\">+</span> y <span class=\\"token keyword\\">end</span>\\n<span class=\\"token keyword\\">end</span>\\na1 <span class=\\"token operator\\">=</span> <span class=\\"token function\\">adder</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">9</span><span class=\\"token punctuation\\">)</span>\\na2 <span class=\\"token operator\\">=</span> <span class=\\"token function\\">adder</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">36</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">a1</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">16</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\">--&gt; 25</span>\\n<span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">a2</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">64</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\">--&gt; 100</span>\\n\\n<span class=\\"token comment\\">-- 返回值、函数调用和赋值都可以</span>\\n<span class=\\"token comment\\">-- 使用长度不匹配的list。</span>\\n<span class=\\"token comment\\">-- 不匹配的接收方会被赋值nil；</span>\\n<span class=\\"token comment\\">-- 不匹配的发送方会被丢弃。</span>\\n\\nx<span class=\\"token punctuation\\">,</span> y<span class=\\"token punctuation\\">,</span> z <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span>\\n<span class=\\"token comment\\">-- x = 1、y = 2、z = 3, 而 4 会被丢弃。</span>\\n\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">bar</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">,</span> b<span class=\\"token punctuation\\">,</span> c<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">,</span> b<span class=\\"token punctuation\\">,</span> c<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">8</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">15</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">16</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">23</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">42</span>\\n<span class=\\"token keyword\\">end</span>\\n\\nx<span class=\\"token punctuation\\">,</span> y <span class=\\"token operator\\">=</span> <span class=\\"token function\\">bar</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'zaphod'</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\">--&gt; 打印 \\"zaphod  nil nil\\"</span>\\n<span class=\\"token comment\\">-- 现在 x = 4, y = 8, 而值15..42被丢弃。</span>\\n\\n<span class=\\"token comment\\">-- 函数是一等公民，可以是局部的，也可以是全局的。</span>\\n<span class=\\"token comment\\">-- 以下表达式等价：</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">f</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> x <span class=\\"token operator\\">*</span> x <span class=\\"token keyword\\">end</span>\\nf <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> x <span class=\\"token operator\\">*</span> x <span class=\\"token keyword\\">end</span>\\n\\n<span class=\\"token comment\\">-- 这些也是等价的：</span>\\n<span class=\\"token keyword\\">local</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">g</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sin</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">end</span>\\n<span class=\\"token keyword\\">local</span> g<span class=\\"token punctuation\\">;</span> g <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sin</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">end</span>\\n<span class=\\"token comment\\">-- 以上均因'local g'，使得g可以自引用。</span>\\n<span class=\\"token keyword\\">local</span> g <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sin</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">end</span>\\n<span class=\\"token comment\\">-- 等价于 local function g(x)..., 但函数体中g不可自引用</span>\\n\\n<span class=\\"token comment\\">-- 顺便提下，三角函数以弧度为单位。</span>\\n\\n<span class=\\"token comment\\">-- 用一个字符串参数调用函数，可以省略括号：</span>\\nprint <span class=\\"token string\\">'hello'</span>  <span class=\\"token comment\\">--可以工作。</span>\\n\\n<span class=\\"token comment\\">-- 调用函数时，如果只有一个table参数，</span>\\n<span class=\\"token comment\\">-- 同样可以省略括号（table详情见下）：</span>\\n<span class=\\"token function\\">print</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span> <span class=\\"token comment\\">-- 一样可以工作。</span>\\n\\n<span class=\\"token comment\\">----------------------------------------------------</span>\\n<span class=\\"token comment\\">-- 3. Table。</span>\\n<span class=\\"token comment\\">----------------------------------------------------</span>\\n\\n<span class=\\"token comment\\">-- Table = Lua唯一的组合数据结构;</span>\\n<span class=\\"token comment\\">--         它们是关联数组。</span>\\n<span class=\\"token comment\\">-- 类似于PHP的数组或者js的对象，</span>\\n<span class=\\"token comment\\">-- 它们是哈希表或者字典，也可以当列表使用。</span>\\n\\n<span class=\\"token comment\\">-- 按字典/map的方式使用Table：</span>\\n\\n<span class=\\"token comment\\">-- Dict字面量默认使用字符串类型的key：</span>\\nt <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>key1 <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'value1'</span><span class=\\"token punctuation\\">,</span> key2 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">false</span><span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">-- 字符串key可以使用类似js的点标记：</span>\\n<span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span>t<span class=\\"token punctuation\\">.</span>key1<span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\">-- 打印 'value1'.</span>\\nt<span class=\\"token punctuation\\">.</span>newKey <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>  <span class=\\"token comment\\">-- 添加新的键值对。</span>\\nt<span class=\\"token punctuation\\">.</span>key2 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">nil</span>   <span class=\\"token comment\\">-- 从table删除 key2。</span>\\n\\n<span class=\\"token comment\\">-- 使用任何非nil的值作为key：</span>\\nu <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'@!#'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'qbert'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1729</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">6.28</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'tau'</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span>u<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">6.28</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\">-- 打印 \\"tau\\"</span>\\n\\n<span class=\\"token comment\\">-- 数字和字符串的key按值匹配的</span>\\n<span class=\\"token comment\\">-- table按id匹配。</span>\\na <span class=\\"token operator\\">=</span> u<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'@!#'</span><span class=\\"token punctuation\\">]</span>  <span class=\\"token comment\\">-- 现在 a = 'qbert'.</span>\\nb <span class=\\"token operator\\">=</span> u<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">]</span>     <span class=\\"token comment\\">-- 我们或许期待的是 1729,  但是得到的是nil:</span>\\n<span class=\\"token comment\\">-- b = nil ，因为没有找到。</span>\\n<span class=\\"token comment\\">-- 之所以没找到，是因为我们用的key与保存数据时用的不是同</span>\\n<span class=\\"token comment\\">-- 一个对象。</span>\\n<span class=\\"token comment\\">-- 所以字符串和数字是移植性更好的key。</span>\\n\\n<span class=\\"token comment\\">-- 只需要一个table参数的函数调用不需要括号：</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">h</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">.</span>key1<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">end</span>\\n<span class=\\"token function\\">h</span><span class=\\"token punctuation\\">{</span>key1 <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'Sonmi~451'</span><span class=\\"token punctuation\\">}</span>  <span class=\\"token comment\\">-- 打印'Sonmi~451'.</span>\\n\\n<span class=\\"token keyword\\">for</span> key<span class=\\"token punctuation\\">,</span> val <span class=\\"token keyword\\">in</span> <span class=\\"token function\\">pairs</span><span class=\\"token punctuation\\">(</span>u<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">do</span>  <span class=\\"token comment\\">-- 遍历Table</span>\\n  <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span> val<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">end</span>\\n\\n<span class=\\"token comment\\">-- _G 是一个特殊的table，用于保存所有的全局变量</span>\\n<span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span>_G<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'_G'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">==</span> _G<span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\">-- 打印'true'.</span>\\n\\n<span class=\\"token comment\\">-- 按列表/数组的方式使用：</span>\\n\\n<span class=\\"token comment\\">-- 列表字面量隐式添加整数键：</span>\\nv <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">'value1'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'value2'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1.21</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'gigawatts'</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">for</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">#</span>v <span class=\\"token keyword\\">do</span>  <span class=\\"token comment\\">-- #v 是列表的大小</span>\\n  <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span>v<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\">-- 索引从 1 开始!! 太疯狂了！</span>\\n<span class=\\"token keyword\\">end</span>\\n<span class=\\"token comment\\">-- 'list'并非真正的类型，v 其实是一个table，</span>\\n<span class=\\"token comment\\">-- 只不过它用连续的整数作为key，可以像list那样去使用。</span>\\n\\n<span class=\\"token comment\\">----------------------------------------------------</span>\\n<span class=\\"token comment\\">-- 3.1 元表（metatable） 和元方法（metamethod）。</span>\\n<span class=\\"token comment\\">----------------------------------------------------</span>\\n\\n<span class=\\"token comment\\">-- table的元表提供了一种机制，支持类似操作符重载的行为。</span>\\n<span class=\\"token comment\\">-- 稍后我们会看到元表如何支持类似js prototype的行为。</span>\\n\\nf1 <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> b <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">}</span>  <span class=\\"token comment\\">-- 表示一个分数 a/b.</span>\\nf2 <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> b <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">-- 这会失败：</span>\\n<span class=\\"token comment\\">-- s = f1 + f2</span>\\n\\nmetafraction <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">function</span> metafraction<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">__add</span><span class=\\"token punctuation\\">(</span>f1<span class=\\"token punctuation\\">,</span> f2<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">local</span> sum <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n  sum<span class=\\"token punctuation\\">.</span>b <span class=\\"token operator\\">=</span> f1<span class=\\"token punctuation\\">.</span>b <span class=\\"token operator\\">*</span> f2<span class=\\"token punctuation\\">.</span>b\\n  sum<span class=\\"token punctuation\\">.</span>a <span class=\\"token operator\\">=</span> f1<span class=\\"token punctuation\\">.</span>a <span class=\\"token operator\\">*</span> f2<span class=\\"token punctuation\\">.</span>b <span class=\\"token operator\\">+</span> f2<span class=\\"token punctuation\\">.</span>a <span class=\\"token operator\\">*</span> f1<span class=\\"token punctuation\\">.</span>b\\n  <span class=\\"token keyword\\">return</span> sum\\n<span class=\\"token keyword\\">end</span>\\n\\n<span class=\\"token function\\">setmetatable</span><span class=\\"token punctuation\\">(</span>f1<span class=\\"token punctuation\\">,</span> metafraction<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token function\\">setmetatable</span><span class=\\"token punctuation\\">(</span>f2<span class=\\"token punctuation\\">,</span> metafraction<span class=\\"token punctuation\\">)</span>\\n\\ns <span class=\\"token operator\\">=</span> f1 <span class=\\"token operator\\">+</span> f2  <span class=\\"token comment\\">-- 调用在f1的元表上的__add(f1, f2) 方法</span>\\n\\n<span class=\\"token comment\\">-- f1, f2 没有关于元表的key，这点和js的prototype不一样。</span>\\n<span class=\\"token comment\\">-- 因此你必须用getmetatable(f1)获取元表。</span>\\n<span class=\\"token comment\\">-- 元表是一个普通的table，</span>\\n<span class=\\"token comment\\">-- 元表的key是普通的Lua中的key，例如__add。</span>\\n\\n<span class=\\"token comment\\">-- 但是下面一行代码会失败，因为s没有元表：</span>\\n<span class=\\"token comment\\">-- t = s + s</span>\\n<span class=\\"token comment\\">-- 下面提供的与类相似的模式可以解决这个问题：</span>\\n\\n<span class=\\"token comment\\">-- 元表的__index 可以重载用于查找的点操作符：</span>\\ndefaultFavs <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>animal <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'gru'</span><span class=\\"token punctuation\\">,</span> food <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'donuts'</span><span class=\\"token punctuation\\">}</span>\\nmyFavs <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>food <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'pizza'</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token function\\">setmetatable</span><span class=\\"token punctuation\\">(</span>myFavs<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>__index <span class=\\"token operator\\">=</span> defaultFavs<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\neatenBy <span class=\\"token operator\\">=</span> myFavs<span class=\\"token punctuation\\">.</span>animal  <span class=\\"token comment\\">-- 可以工作！感谢元表</span>\\n\\n<span class=\\"token comment\\">-- 如果在table中直接查找key失败，会使用</span>\\n<span class=\\"token comment\\">-- 元表的__index 递归地重试。</span>\\n\\n<span class=\\"token comment\\">-- __index的值也可以是function(tbl, key)</span>\\n<span class=\\"token comment\\">-- 这样可以支持自定义查找。</span>\\n\\n<span class=\\"token comment\\">-- __index、__add等的值，被称为元方法。</span>\\n<span class=\\"token comment\\">-- 这里是一个table元方法的清单：</span>\\n\\n<span class=\\"token comment\\">-- __add(a, b)                     for a + b</span>\\n<span class=\\"token comment\\">-- __sub(a, b)                     for a - b</span>\\n<span class=\\"token comment\\">-- __mul(a, b)                     for a * b</span>\\n<span class=\\"token comment\\">-- __div(a, b)                     for a / b</span>\\n<span class=\\"token comment\\">-- __mod(a, b)                     for a % b</span>\\n<span class=\\"token comment\\">-- __pow(a, b)                     for a ^ b</span>\\n<span class=\\"token comment\\">-- __unm(a)                        for -a</span>\\n<span class=\\"token comment\\">-- __concat(a, b)                  for a .. b</span>\\n<span class=\\"token comment\\">-- __len(a)                        for #a</span>\\n<span class=\\"token comment\\">-- __eq(a, b)                      for a == b</span>\\n<span class=\\"token comment\\">-- __lt(a, b)                      for a &lt; b</span>\\n<span class=\\"token comment\\">-- __le(a, b)                      for a &lt;= b</span>\\n<span class=\\"token comment\\">-- __index(a, b)  &lt;fn or a table&gt;  for a.b</span>\\n<span class=\\"token comment\\">-- __newindex(a, b, c)             for a.b = c</span>\\n<span class=\\"token comment\\">-- __call(a, ...)                  for a(...)</span>\\n\\n<span class=\\"token comment\\">----------------------------------------------------</span>\\n<span class=\\"token comment\\">-- 3.2 与类相似的table和继承。</span>\\n<span class=\\"token comment\\">----------------------------------------------------</span>\\n\\n<span class=\\"token comment\\">-- Lua没有内建的类；可以通过不同的方法，利用表和元表</span>\\n<span class=\\"token comment\\">-- 来实现类。</span>\\n\\n<span class=\\"token comment\\">-- 下面是一个例子，解释在后面：</span>\\n\\nDog <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>                                   <span class=\\"token comment\\">-- 1.</span>\\n\\n<span class=\\"token keyword\\">function</span> Dog<span class=\\"token punctuation\\">:</span><span class=\\"token function\\">new</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>                         <span class=\\"token comment\\">-- 2.</span>\\n  <span class=\\"token keyword\\">local</span> newObj <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>sound <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'woof'</span><span class=\\"token punctuation\\">}</span>                <span class=\\"token comment\\">-- 3.</span>\\n  self<span class=\\"token punctuation\\">.</span>__index <span class=\\"token operator\\">=</span> self                      <span class=\\"token comment\\">-- 4.</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">setmetatable</span><span class=\\"token punctuation\\">(</span>newObj<span class=\\"token punctuation\\">,</span> self<span class=\\"token punctuation\\">)</span>        <span class=\\"token comment\\">-- 5.</span>\\n<span class=\\"token keyword\\">end</span>\\n\\n<span class=\\"token keyword\\">function</span> Dog<span class=\\"token punctuation\\">:</span><span class=\\"token function\\">makeSound</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>                   <span class=\\"token comment\\">-- 6.</span>\\n  <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'I say '</span> <span class=\\"token operator\\">..</span> self<span class=\\"token punctuation\\">.</span>sound<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">end</span>\\n\\nmrDog <span class=\\"token operator\\">=</span> Dog<span class=\\"token punctuation\\">:</span><span class=\\"token function\\">new</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>                          <span class=\\"token comment\\">-- 7.</span>\\nmrDog<span class=\\"token punctuation\\">:</span><span class=\\"token function\\">makeSound</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\">-- 'I say woof'         -- 8.</span>\\n\\n<span class=\\"token comment\\">-- 1. Dog看上去像一个类；其实它是一个table。</span>\\n<span class=\\"token comment\\">-- 2. 函数tablename:fn(...) 等价于</span>\\n<span class=\\"token comment\\">--    函数tablename.fn(self, ...)</span>\\n<span class=\\"token comment\\">--    冒号（:）只是添加了self作为第一个参数。</span>\\n<span class=\\"token comment\\">--    阅读7 &amp; 8条 了解self变量是如何得到其值的。</span>\\n<span class=\\"token comment\\">-- 3. newObj是类Dog的一个实例。</span>\\n<span class=\\"token comment\\">-- 4. self = 被继承的类。通常self = Dog，不过继承可以改变它。</span>\\n<span class=\\"token comment\\">--    如果把newObj的元表和__index都设置为self，</span>\\n<span class=\\"token comment\\">--    newObj就可以得到self的函数。</span>\\n<span class=\\"token comment\\">-- 5. 备忘：setmetatable返回其第一个参数。</span>\\n<span class=\\"token comment\\">-- 6. 冒号（：）的作用和第2条一样，不过这里</span>\\n<span class=\\"token comment\\">--    self是一个实例，而不是类</span>\\n<span class=\\"token comment\\">-- 7. 等价于Dog.new(Dog)，所以在new()中，self = Dog。</span>\\n<span class=\\"token comment\\">-- 8. 等价于mrDog.makeSound(mrDog); self = mrDog。</span>\\n\\n<span class=\\"token comment\\">----------------------------------------------------</span>\\n\\n<span class=\\"token comment\\">-- 继承的例子：</span>\\n\\nLoudDog <span class=\\"token operator\\">=</span> Dog<span class=\\"token punctuation\\">:</span><span class=\\"token function\\">new</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>                           <span class=\\"token comment\\">-- 1.</span>\\n\\n<span class=\\"token keyword\\">function</span> LoudDog<span class=\\"token punctuation\\">:</span><span class=\\"token function\\">makeSound</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">local</span> s <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>sound <span class=\\"token operator\\">..</span> <span class=\\"token string\\">' '</span>                       <span class=\\"token comment\\">-- 2.</span>\\n  <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span>s <span class=\\"token operator\\">..</span> s <span class=\\"token operator\\">..</span> s<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">end</span>\\n\\nseymour <span class=\\"token operator\\">=</span> LoudDog<span class=\\"token punctuation\\">:</span><span class=\\"token function\\">new</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>                       <span class=\\"token comment\\">-- 3.</span>\\nseymour<span class=\\"token punctuation\\">:</span><span class=\\"token function\\">makeSound</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\">-- 'woof woof woof'      -- 4.</span>\\n\\n<span class=\\"token comment\\">-- 1. LoudDog获得Dog的方法和变量列表。</span>\\n<span class=\\"token comment\\">-- 2. 因为new()的缘故，self拥有了一个'sound' key，参见第3条。</span>\\n<span class=\\"token comment\\">-- 3. 等价于LoudDog.new(LoudDog)，转换一下就是</span>\\n<span class=\\"token comment\\">--    Dog.new(LoudDog)，这是因为LoudDog没有'new' key，</span>\\n<span class=\\"token comment\\">--    但是它的元表中有 __index = Dog。</span>\\n<span class=\\"token comment\\">--    结果: seymour的元表是LoudDog，并且</span>\\n<span class=\\"token comment\\">--    LoudDog.__index = Dog。所以有seymour.key</span>\\n<span class=\\"token comment\\">--    = seymour.key, LoudDog.key, Dog.key</span>\\n<span class=\\"token comment\\">--    从其中第一个有指定key的table获取。</span>\\n<span class=\\"token comment\\">-- 4. 在LoudDog可以找到'makeSound'的key；</span>\\n<span class=\\"token comment\\">--    等价于LoudDog.makeSound(seymour)。</span>\\n\\n<span class=\\"token comment\\">-- 如果有必要，子类也可以有new()，与基类相似：</span>\\n<span class=\\"token keyword\\">function</span> LoudDog<span class=\\"token punctuation\\">:</span><span class=\\"token function\\">new</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">local</span> newObj <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">-- 初始化newObj</span>\\n  self<span class=\\"token punctuation\\">.</span>__index <span class=\\"token operator\\">=</span> self\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">setmetatable</span><span class=\\"token punctuation\\">(</span>newObj<span class=\\"token punctuation\\">,</span> self<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">end</span>\\n\\n<span class=\\"token comment\\">----------------------------------------------------</span>\\n<span class=\\"token comment\\">-- 4. 模块</span>\\n<span class=\\"token comment\\">----------------------------------------------------</span>\\n\\n\\n<span class=\\"token comment\\">--[[ 我把这部分给注释了，这样脚本剩下的部分可以运行\\n\\n-- 假设文件mod.lua的内容类似这样：\\nlocal M = {}\\n\\nlocal function sayMyName()\\n  print('Hrunkner')\\nend\\n\\nfunction M.sayHello()\\n  print('Why hello there')\\n  sayMyName()\\nend\\n\\nreturn M\\n\\n-- 另一个文件可以使用mod.lua的功能：\\nlocal mod = require('mod')  -- 运行文件mod.lua.\\n-- 注意：require 需要配合 LUA_PATH 一起使用 例如：export LUA_PATH=\\"$HOME/workspace/projectName/?.lua;;\\"\\n\\n-- require是包含模块的标准做法。\\n-- require等价于:     (针对没有被缓存的情况；参见后面的内容)\\nlocal mod = (function ()\\n  &lt;contents of mod.lua&gt;\\nend)()\\n-- mod.lua被包在一个函数体中，因此mod.lua的局部变量\\n-- 对外不可见。\\n\\n-- 下面的代码可以工作，因为在这里mod = mod.lua 中的 M：\\nmod.sayHello()  -- Says hello to Hrunkner.\\n\\n-- 这是错误的；sayMyName只在mod.lua中存在：\\nmod.sayMyName()  -- 错误\\n\\n-- require返回的值会被缓存，所以一个文件只会被运行一次，\\n-- 即使它被require了多次。\\n\\n-- 假设mod2.lua包含代码\\"print('Hi!')\\"。\\nlocal a = require('mod2')  -- 打印Hi!\\nlocal b = require('mod2')  -- 不再打印; a=b.\\n\\n-- dofile与require类似，但是不缓存：\\ndofile('mod2')  --&gt; Hi!\\ndofile('mod2')  --&gt; Hi! (再次运行，与require不同)\\n\\n-- loadfile加载一个lua文件，但是并不运行它。\\nf = loadfile('mod2')  -- Calling f() runs mod2.lua.\\n\\n-- loadstring是loadfile的字符串版本。\\n-- (loadstring已弃用, 使用load代替)\\ng = load('print(343)')  --返回一个函数。\\ng()  -- 打印343; 在此之前什么也不打印。\\n\\n--]]</span>\\n</code></pre></div>","autoDesc":true}`);export{w as comp,g as data};
