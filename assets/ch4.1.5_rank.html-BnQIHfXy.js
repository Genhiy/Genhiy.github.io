import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-SD3SAAIy.js";const p={},e=t(`<p>通过召回的操作， 我们已经进行了问题规模的缩减， 对于每个用户， 选择出了N篇文章作为了候选集，并基于召回的候选集构建了与用户历史相关的特征，以及用户本身的属性特征，文章本省的属性特征，以及用户与文章之间的特征，下面就是使用机器学习模型来对构造好的特征进行学习，然后对测试集进行预测，得到测试集中的每个候选集用户点击的概率，返回点击概率最大的topk个文章，作为最终的结果。</p><p>排序阶段选择了三个比较有代表性的排序模型，它们分别是：</p><ol><li>LGB的排序模型</li><li>LGB的分类模型</li><li>深度学习的分类模型DIN</li></ol><p>得到了最终的排序模型输出的结果之后，还选择了两种比较经典的模型集成的方法：</p><ol><li>输出结果加权融合</li><li>Staking（将模型的输出结果再使用一个简单模型进行预测）</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> pickle
<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm
<span class="token keyword">import</span> gc<span class="token punctuation">,</span> os
<span class="token keyword">import</span> time
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime
<span class="token keyword">import</span> lightgbm <span class="token keyword">as</span> lgb
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> MinMaxScaler
<span class="token keyword">import</span> warnings
warnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">&#39;ignore&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="读取排序特征" tabindex="-1"><a class="header-anchor" href="#读取排序特征"><span>读取排序特征</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>data_path <span class="token operator">=</span> <span class="token string">&#39;./data_raw/&#39;</span>
save_path <span class="token operator">=</span> <span class="token string">&#39;./temp_results/&#39;</span>
offline <span class="token operator">=</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 重新读取数据的时候，发现click_article_id是一个浮点数，所以将其转换成int类型</span>
trn_user_item_feats_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;trn_user_item_feats_df.csv&#39;</span><span class="token punctuation">)</span>
trn_user_item_feats_df<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> trn_user_item_feats_df<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> offline<span class="token punctuation">:</span>
    val_user_item_feats_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;val_user_item_feats_df.csv&#39;</span><span class="token punctuation">)</span>
    val_user_item_feats_df<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> val_user_item_feats_df<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    val_user_item_feats_df <span class="token operator">=</span> <span class="token boolean">None</span>
    
tst_user_item_feats_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;tst_user_item_feats_df.csv&#39;</span><span class="token punctuation">)</span>
tst_user_item_feats_df<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> tst_user_item_feats_df<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>

<span class="token comment"># 做特征的时候为了方便，给测试集也打上了一个无效的标签，这里直接删掉就行</span>
<span class="token keyword">del</span> tst_user_item_feats_df<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="返回排序后的结果" tabindex="-1"><a class="header-anchor" href="#返回排序后的结果"><span>返回排序后的结果</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">submit</span><span class="token punctuation">(</span>recall_df<span class="token punctuation">,</span> topk<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> model_name<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    recall_df <span class="token operator">=</span> recall_df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    recall_df<span class="token punctuation">[</span><span class="token string">&#39;rank&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> recall_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 判断是不是每个用户都有5篇文章及以上</span>
    tmp <span class="token operator">=</span> recall_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">&#39;rank&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> tmp<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> topk
    
    <span class="token keyword">del</span> recall_df<span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span>
    submit <span class="token operator">=</span> recall_df<span class="token punctuation">[</span>recall_df<span class="token punctuation">[</span><span class="token string">&#39;rank&#39;</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> topk<span class="token punctuation">]</span><span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rank&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    submit<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">else</span> col <span class="token keyword">for</span> col <span class="token keyword">in</span> submit<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>droplevel<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token comment"># 按照提交格式定义列名</span>
    submit <span class="token operator">=</span> submit<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">&#39;article_1&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">&#39;article_2&#39;</span><span class="token punctuation">,</span> 
                                                  <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">&#39;article_3&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">&#39;article_4&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">&#39;article_5&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    
    save_name <span class="token operator">=</span> save_path <span class="token operator">+</span> model_name <span class="token operator">+</span> <span class="token string">&#39;_&#39;</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%m-%d&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;.csv&#39;</span>
    submit<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>save_name<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 排序结果归一化</span>
<span class="token keyword">def</span> <span class="token function">norm_sim</span><span class="token punctuation">(</span>sim_df<span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># print(sim_df.head())</span>
    min_sim <span class="token operator">=</span> sim_df<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    max_sim <span class="token operator">=</span> sim_df<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> max_sim <span class="token operator">==</span> min_sim<span class="token punctuation">:</span>
        sim_df <span class="token operator">=</span> sim_df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> sim<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        sim_df <span class="token operator">=</span> sim_df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> sim<span class="token punctuation">:</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>sim <span class="token operator">-</span> min_sim<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>max_sim <span class="token operator">-</span> min_sim<span class="token punctuation">)</span><span class="token punctuation">)</span>

    sim_df <span class="token operator">=</span> sim_df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> sim<span class="token punctuation">:</span> sim <span class="token operator">+</span> weight<span class="token punctuation">)</span>  <span class="token comment"># plus one</span>
    <span class="token keyword">return</span> sim_df
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lgb排序模型" tabindex="-1"><a class="header-anchor" href="#lgb排序模型"><span>LGB排序模型</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 防止中间出错之后重新读取数据</span>
trn_user_item_feats_df_rank_model <span class="token operator">=</span> trn_user_item_feats_df<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> offline<span class="token punctuation">:</span>
    val_user_item_feats_df_rank_model <span class="token operator">=</span> val_user_item_feats_df<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
tst_user_item_feats_df_rank_model <span class="token operator">=</span> tst_user_item_feats_df<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 定义特征列</span>
lgb_cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;sim0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;time_diff0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;word_diff0&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;sim_max&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sim_min&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sim_sum&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;sim_mean&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;score&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;click_size&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;time_diff_mean&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;active_level&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;click_environment&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;click_deviceGroup&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_os&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_country&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;click_region&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;click_referrer_type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;user_time_hob1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;user_time_hob2&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;words_hbo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;category_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;created_at_ts&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;words_count&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 排序模型分组</span>
trn_user_item_feats_df_rank_model<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
g_train <span class="token operator">=</span> trn_user_item_feats_df_rank_model<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&quot;label&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values

<span class="token keyword">if</span> offline<span class="token punctuation">:</span>
    val_user_item_feats_df_rank_model<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    g_val <span class="token operator">=</span> val_user_item_feats_df_rank_model<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&quot;label&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 排序模型定义</span>
lgb_ranker <span class="token operator">=</span> lgb<span class="token punctuation">.</span>LGBMRanker<span class="token punctuation">(</span>boosting_type<span class="token operator">=</span><span class="token string">&#39;gbdt&#39;</span><span class="token punctuation">,</span> num_leaves<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">,</span> reg_alpha<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> reg_lambda<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>
                            max_depth<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n_estimators<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> subsample<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span> colsample_bytree<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span> subsample_freq<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>
                            learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> min_child_weight<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">2018</span><span class="token punctuation">,</span> n_jobs<span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 排序模型训练</span>
<span class="token keyword">if</span> offline<span class="token punctuation">:</span>
    lgb_ranker<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>trn_user_item_feats_df_rank_model<span class="token punctuation">[</span>lgb_cols<span class="token punctuation">]</span><span class="token punctuation">,</span> trn_user_item_feats_df_rank_model<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> group<span class="token operator">=</span>g_train<span class="token punctuation">,</span>
                eval_set<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>val_user_item_feats_df_rank_model<span class="token punctuation">[</span>lgb_cols<span class="token punctuation">]</span><span class="token punctuation">,</span> val_user_item_feats_df_rank_model<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
                eval_group<span class="token operator">=</span> <span class="token punctuation">[</span>g_val<span class="token punctuation">]</span><span class="token punctuation">,</span> eval_at<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> eval_metric<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;ndcg&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> early_stopping_rounds<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    lgb_ranker<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>trn_user_item_feats_df<span class="token punctuation">[</span>lgb_cols<span class="token punctuation">]</span><span class="token punctuation">,</span> trn_user_item_feats_df<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> group<span class="token operator">=</span>g_train<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 模型预测</span>
tst_user_item_feats_df<span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> lgb_ranker<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>tst_user_item_feats_df<span class="token punctuation">[</span>lgb_cols<span class="token punctuation">]</span><span class="token punctuation">,</span> num_iteration<span class="token operator">=</span>lgb_ranker<span class="token punctuation">.</span>best_iteration_<span class="token punctuation">)</span>

<span class="token comment"># 将这里的排序结果保存一份，用户后面的模型融合</span>
tst_user_item_feats_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;lgb_ranker_score.csv&#39;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 预测结果重新排序, 及生成提交结果</span>
rank_results <span class="token operator">=</span> tst_user_item_feats_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
rank_results<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> rank_results<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
submit<span class="token punctuation">(</span>rank_results<span class="token punctuation">,</span> topk<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> model_name<span class="token operator">=</span><span class="token string">&#39;lgb_ranker&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 五折交叉验证，这里的五折交叉是以用户为目标进行五折划分</span>
<span class="token comment">#  这一部分与前面的单独训练和验证是分开的</span>
<span class="token keyword">def</span> <span class="token function">get_kfold_users</span><span class="token punctuation">(</span>trn_df<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    user_ids <span class="token operator">=</span> trn_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span>
    user_set <span class="token operator">=</span> <span class="token punctuation">[</span>user_ids<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> user_set

k_fold <span class="token operator">=</span> <span class="token number">5</span>
trn_df <span class="token operator">=</span> trn_user_item_feats_df_rank_model
user_set <span class="token operator">=</span> get_kfold_users<span class="token punctuation">(</span>trn_df<span class="token punctuation">,</span> n<span class="token operator">=</span>k_fold<span class="token punctuation">)</span>

score_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
score_df <span class="token operator">=</span> trn_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
sub_preds <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>tst_user_item_feats_df_rank_model<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 五折交叉验证，并将中间结果保存用于staking</span>
<span class="token keyword">for</span> n_fold<span class="token punctuation">,</span> valid_user <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>user_set<span class="token punctuation">)</span><span class="token punctuation">:</span>
    train_idx <span class="token operator">=</span> trn_df<span class="token punctuation">[</span><span class="token operator">~</span>trn_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>valid_user<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># add slide user</span>
    valid_idx <span class="token operator">=</span> trn_df<span class="token punctuation">[</span>trn_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>valid_user<span class="token punctuation">)</span><span class="token punctuation">]</span>
    
    <span class="token comment"># 训练集与验证集的用户分组</span>
    train_idx<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    g_train <span class="token operator">=</span> train_idx<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&quot;label&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values
    
    valid_idx<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    g_val <span class="token operator">=</span> valid_idx<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&quot;label&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values
    
    <span class="token comment"># 定义模型</span>
    lgb_ranker <span class="token operator">=</span> lgb<span class="token punctuation">.</span>LGBMRanker<span class="token punctuation">(</span>boosting_type<span class="token operator">=</span><span class="token string">&#39;gbdt&#39;</span><span class="token punctuation">,</span> num_leaves<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">,</span> reg_alpha<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> reg_lambda<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>
                            max_depth<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n_estimators<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> subsample<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span> colsample_bytree<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span> subsample_freq<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>
                            learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> min_child_weight<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">2018</span><span class="token punctuation">,</span> n_jobs<span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span>  
    <span class="token comment"># 训练模型</span>
    lgb_ranker<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_idx<span class="token punctuation">[</span>lgb_cols<span class="token punctuation">]</span><span class="token punctuation">,</span> train_idx<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> group<span class="token operator">=</span>g_train<span class="token punctuation">,</span>
                   eval_set<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>valid_idx<span class="token punctuation">[</span>lgb_cols<span class="token punctuation">]</span><span class="token punctuation">,</span> valid_idx<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> eval_group<span class="token operator">=</span> <span class="token punctuation">[</span>g_val<span class="token punctuation">]</span><span class="token punctuation">,</span> 
                   eval_at<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> eval_metric<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;ndcg&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> early_stopping_rounds<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>
    
    <span class="token comment"># 预测验证集结果</span>
    valid_idx<span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> lgb_ranker<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>valid_idx<span class="token punctuation">[</span>lgb_cols<span class="token punctuation">]</span><span class="token punctuation">,</span> num_iteration<span class="token operator">=</span>lgb_ranker<span class="token punctuation">.</span>best_iteration_<span class="token punctuation">)</span>
    
    <span class="token comment"># 对输出结果进行归一化</span>
    valid_idx<span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> valid_idx<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> norm_sim<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    valid_idx<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    valid_idx<span class="token punctuation">[</span><span class="token string">&#39;pred_rank&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> valid_idx<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 将验证集的预测结果放到一个列表中，后面进行拼接</span>
    score_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>valid_idx<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_rank&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 如果是线上测试，需要计算每次交叉验证的结果相加，最后求平均</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> offline<span class="token punctuation">:</span>
        sub_preds <span class="token operator">+=</span> lgb_ranker<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>tst_user_item_feats_df_rank_model<span class="token punctuation">[</span>lgb_cols<span class="token punctuation">]</span><span class="token punctuation">,</span> lgb_ranker<span class="token punctuation">.</span>best_iteration_<span class="token punctuation">)</span>
    
score_df_ <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>score_list<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
score_df <span class="token operator">=</span> score_df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>score_df_<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 保存训练集交叉验证产生的新特征</span>
score_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_rank&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;trn_lgb_ranker_feats.csv&#39;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    
<span class="token comment"># 测试集的预测结果，多次交叉验证求平均,将预测的score和对应的rank特征保存，可以用于后面的staking，这里还可以构造其他更多的特征</span>
tst_user_item_feats_df_rank_model<span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> sub_preds <span class="token operator">/</span> k_fold
tst_user_item_feats_df_rank_model<span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> tst_user_item_feats_df_rank_model<span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> norm_sim<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
tst_user_item_feats_df_rank_model<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
tst_user_item_feats_df_rank_model<span class="token punctuation">[</span><span class="token string">&#39;pred_rank&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> tst_user_item_feats_df_rank_model<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 保存测试集交叉验证的新特征</span>
tst_user_item_feats_df_rank_model<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_rank&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;tst_lgb_ranker_feats.csv&#39;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 预测结果重新排序, 及生成提交结果</span>
<span class="token comment"># 单模型生成提交结果</span>
rank_results <span class="token operator">=</span> tst_user_item_feats_df_rank_model<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
rank_results<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> rank_results<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
submit<span class="token punctuation">(</span>rank_results<span class="token punctuation">,</span> topk<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> model_name<span class="token operator">=</span><span class="token string">&#39;lgb_ranker&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lgb分类模型" tabindex="-1"><a class="header-anchor" href="#lgb分类模型"><span>LGB分类模型</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 模型及参数的定义</span>
lgb_Classfication <span class="token operator">=</span> lgb<span class="token punctuation">.</span>LGBMClassifier<span class="token punctuation">(</span>boosting_type<span class="token operator">=</span><span class="token string">&#39;gbdt&#39;</span><span class="token punctuation">,</span> num_leaves<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">,</span> reg_alpha<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> reg_lambda<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>
                            max_depth<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n_estimators<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> subsample<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span> colsample_bytree<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span> subsample_freq<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>
                            learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> min_child_weight<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">2018</span><span class="token punctuation">,</span> n_jobs<span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 模型训练</span>
<span class="token keyword">if</span> offline<span class="token punctuation">:</span>
    lgb_Classfication<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>trn_user_item_feats_df_rank_model<span class="token punctuation">[</span>lgb_cols<span class="token punctuation">]</span><span class="token punctuation">,</span> trn_user_item_feats_df_rank_model<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    eval_set<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>val_user_item_feats_df_rank_model<span class="token punctuation">[</span>lgb_cols<span class="token punctuation">]</span><span class="token punctuation">,</span> val_user_item_feats_df_rank_model<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
                    eval_metric<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;auc&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>early_stopping_rounds<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    lgb_Classfication<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>trn_user_item_feats_df_rank_model<span class="token punctuation">[</span>lgb_cols<span class="token punctuation">]</span><span class="token punctuation">,</span> trn_user_item_feats_df_rank_model<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 模型预测</span>
tst_user_item_feats_df<span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> lgb_Classfication<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>tst_user_item_feats_df<span class="token punctuation">[</span>lgb_cols<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>

<span class="token comment"># 将这里的排序结果保存一份，用户后面的模型融合</span>
tst_user_item_feats_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;lgb_cls_score.csv&#39;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 预测结果重新排序, 及生成提交结果</span>
rank_results <span class="token operator">=</span> tst_user_item_feats_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
rank_results<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> rank_results<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
submit<span class="token punctuation">(</span>rank_results<span class="token punctuation">,</span> topk<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> model_name<span class="token operator">=</span><span class="token string">&#39;lgb_cls&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 五折交叉验证，这里的五折交叉是以用户为目标进行五折划分</span>
<span class="token comment">#  这一部分与前面的单独训练和验证是分开的</span>
<span class="token keyword">def</span> <span class="token function">get_kfold_users</span><span class="token punctuation">(</span>trn_df<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    user_ids <span class="token operator">=</span> trn_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span>
    user_set <span class="token operator">=</span> <span class="token punctuation">[</span>user_ids<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> user_set

k_fold <span class="token operator">=</span> <span class="token number">5</span>
trn_df <span class="token operator">=</span> trn_user_item_feats_df_rank_model
user_set <span class="token operator">=</span> get_kfold_users<span class="token punctuation">(</span>trn_df<span class="token punctuation">,</span> n<span class="token operator">=</span>k_fold<span class="token punctuation">)</span>

score_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
score_df <span class="token operator">=</span> trn_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
sub_preds <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>tst_user_item_feats_df_rank_model<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 五折交叉验证，并将中间结果保存用于staking</span>
<span class="token keyword">for</span> n_fold<span class="token punctuation">,</span> valid_user <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>user_set<span class="token punctuation">)</span><span class="token punctuation">:</span>
    train_idx <span class="token operator">=</span> trn_df<span class="token punctuation">[</span><span class="token operator">~</span>trn_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>valid_user<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># add slide user</span>
    valid_idx <span class="token operator">=</span> trn_df<span class="token punctuation">[</span>trn_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>valid_user<span class="token punctuation">)</span><span class="token punctuation">]</span>
    
    <span class="token comment"># 模型及参数的定义</span>
    lgb_Classfication <span class="token operator">=</span> lgb<span class="token punctuation">.</span>LGBMClassifier<span class="token punctuation">(</span>boosting_type<span class="token operator">=</span><span class="token string">&#39;gbdt&#39;</span><span class="token punctuation">,</span> num_leaves<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">,</span> reg_alpha<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> reg_lambda<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>
                            max_depth<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n_estimators<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> subsample<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span> colsample_bytree<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span> subsample_freq<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>
                            learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> min_child_weight<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">2018</span><span class="token punctuation">,</span> n_jobs<span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>  
    <span class="token comment"># 训练模型</span>
    lgb_Classfication<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_idx<span class="token punctuation">[</span>lgb_cols<span class="token punctuation">]</span><span class="token punctuation">,</span> train_idx<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>eval_set<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>valid_idx<span class="token punctuation">[</span>lgb_cols<span class="token punctuation">]</span><span class="token punctuation">,</span> valid_idx<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
                          eval_metric<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;auc&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>early_stopping_rounds<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>
    
    <span class="token comment"># 预测验证集结果</span>
    valid_idx<span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> lgb_Classfication<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>valid_idx<span class="token punctuation">[</span>lgb_cols<span class="token punctuation">]</span><span class="token punctuation">,</span> 
                                                              num_iteration<span class="token operator">=</span>lgb_Classfication<span class="token punctuation">.</span>best_iteration_<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
    
    <span class="token comment"># 对输出结果进行归一化 分类模型输出的值本身就是一个概率值不需要进行归一化</span>
    <span class="token comment"># valid_idx[&#39;pred_score&#39;] = valid_idx[[&#39;pred_score&#39;]].transform(lambda x: norm_sim(x))</span>
    
    valid_idx<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    valid_idx<span class="token punctuation">[</span><span class="token string">&#39;pred_rank&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> valid_idx<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 将验证集的预测结果放到一个列表中，后面进行拼接</span>
    score_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>valid_idx<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_rank&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 如果是线上测试，需要计算每次交叉验证的结果相加，最后求平均</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> offline<span class="token punctuation">:</span>
        sub_preds <span class="token operator">+=</span> lgb_Classfication<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>tst_user_item_feats_df_rank_model<span class="token punctuation">[</span>lgb_cols<span class="token punctuation">]</span><span class="token punctuation">,</span> 
                                                     num_iteration<span class="token operator">=</span>lgb_Classfication<span class="token punctuation">.</span>best_iteration_<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
    
score_df_ <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>score_list<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
score_df <span class="token operator">=</span> score_df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>score_df_<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 保存训练集交叉验证产生的新特征</span>
score_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_rank&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;trn_lgb_cls_feats.csv&#39;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    
<span class="token comment"># 测试集的预测结果，多次交叉验证求平均,将预测的score和对应的rank特征保存，可以用于后面的staking，这里还可以构造其他更多的特征</span>
tst_user_item_feats_df_rank_model<span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> sub_preds <span class="token operator">/</span> k_fold
tst_user_item_feats_df_rank_model<span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> tst_user_item_feats_df_rank_model<span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> norm_sim<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
tst_user_item_feats_df_rank_model<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
tst_user_item_feats_df_rank_model<span class="token punctuation">[</span><span class="token string">&#39;pred_rank&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> tst_user_item_feats_df_rank_model<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 保存测试集交叉验证的新特征</span>
tst_user_item_feats_df_rank_model<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_rank&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;tst_lgb_cls_feats.csv&#39;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 预测结果重新排序, 及生成提交结果</span>
rank_results <span class="token operator">=</span> tst_user_item_feats_df_rank_model<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
rank_results<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> rank_results<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
submit<span class="token punctuation">(</span>rank_results<span class="token punctuation">,</span> topk<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> model_name<span class="token operator">=</span><span class="token string">&#39;lgb_cls&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="din模型" tabindex="-1"><a class="header-anchor" href="#din模型"><span>DIN模型</span></a></h2><h3 id="用户的历史点击行为列表" tabindex="-1"><a class="header-anchor" href="#用户的历史点击行为列表"><span>用户的历史点击行为列表</span></a></h3><p>这个是为后面的DIN模型服务的</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> offline<span class="token punctuation">:</span>
    all_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;./data_raw/train_click_log.csv&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    trn_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;./data_raw/train_click_log.csv&#39;</span><span class="token punctuation">)</span>
    tst_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;./data_raw/testA_click_log.csv&#39;</span><span class="token punctuation">)</span>
    all_data <span class="token operator">=</span> trn_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tst_data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>hist_click <span class="token operator">=</span>all_data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token builtin">list</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>
his_behavior_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>
his_behavior_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> hist_click<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span>
his_behavior_df<span class="token punctuation">[</span><span class="token string">&#39;hist_click_article_id&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> hist_click<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>trn_user_item_feats_df_din_model <span class="token operator">=</span> trn_user_item_feats_df<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> offline<span class="token punctuation">:</span>
    val_user_item_feats_df_din_model <span class="token operator">=</span> val_user_item_feats_df<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span> 
    val_user_item_feats_df_din_model <span class="token operator">=</span> <span class="token boolean">None</span>
    
tst_user_item_feats_df_din_model <span class="token operator">=</span> tst_user_item_feats_df<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>trn_user_item_feats_df_din_model <span class="token operator">=</span> trn_user_item_feats_df_din_model<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>his_behavior_df<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> offline<span class="token punctuation">:</span>
    val_user_item_feats_df_din_model <span class="token operator">=</span> val_user_item_feats_df_din_model<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>his_behavior_df<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    val_user_item_feats_df_din_model <span class="token operator">=</span> <span class="token boolean">None</span>

tst_user_item_feats_df_din_model <span class="token operator">=</span> tst_user_item_feats_df_din_model<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>his_behavior_df<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="din模型简介" tabindex="-1"><a class="header-anchor" href="#din模型简介"><span>DIN模型简介</span></a></h3><p>我们下面尝试使用DIN模型， DIN的全称是Deep Interest Network， 这是阿里2018年基于前面的深度学习模型无法表达用户多样化的兴趣而提出的一个模型， 它可以通过考虑【给定的候选广告】和【用户的历史行为】的相关性，来计算用户兴趣的表示向量。具体来说就是通过引入局部激活单元，通过软搜索历史行为的相关部分来关注相关的用户兴趣，并采用加权和来获得有关候选广告的用户兴趣的表示。与候选广告相关性较高的行为会获得较高的激活权重，并支配着用户兴趣。该表示向量在不同广告上有所不同，大大提高了模型的表达能力。所以该模型对于此次新闻推荐的任务也比较适合， 我们在这里通过当前的候选文章与用户历史点击文章的相关性来计算用户对于文章的兴趣。 该模型的结构如下：</p><figure><img src="http://ryluo.oss-cn-chengdu.aliyuncs.com/abc/image-20201116201646983.png" alt="image-20201116201646983" tabindex="0" loading="lazy"><figcaption>image-20201116201646983</figcaption></figure><p>我们这里直接调包来使用这个模型， 关于这个模型的详细细节部分我们会在下一期的推荐系统组队学习中给出。下面说一下该模型如何具体使用：deepctr的函数原型如下：</p><blockquote><p>def DIN(dnn_feature_columns, history_feature_list, dnn_use_bn=False, dnn_hidden_units=(200, 80), dnn_activation=&#39;relu&#39;, att_hidden_size=(80, 40), att_activation=&quot;dice&quot;, att_weight_normalization=False, l2_reg_dnn=0, l2_reg_embedding=1e-6, dnn_dropout=0, seed=1024, task=&#39;binary&#39;):</p><ul><li>dnn_feature_columns: 特征列， 包含数据所有特征的列表</li><li>history_feature_list: 用户历史行为列， 反应用户历史行为的特征的列表</li><li>dnn_use_bn: 是否使用BatchNormalization</li><li>dnn_hidden_units: 全连接层网络的层数和每一层神经元的个数， 一个列表或者元组</li><li>dnn_activation_relu: 全连接网络的激活单元类型</li><li>att_hidden_size: 注意力层的全连接网络的层数和每一层神经元的个数</li><li>att_activation: 注意力层的激活单元类型</li><li>att_weight_normalization: 是否归一化注意力得分</li><li>l2_reg_dnn: 全连接网络的正则化系数</li><li>l2_reg_embedding: embedding向量的正则化稀疏</li><li>dnn_dropout: 全连接网络的神经元的失活概率</li><li>task: 任务， 可以是分类， 也可是是回归</li></ul></blockquote><p>在具体使用的时候， 我们必须要传入特征列和历史行为列， 但是再传入之前， 我们需要进行一下特征列的预处理。具体如下：</p><ol><li>首先，我们要处理数据集， 得到数据， 由于我们是基于用户过去的行为去预测用户是否点击当前文章， 所以我们需要把数据的特征列划分成数值型特征， 离散型特征和历史行为特征列三部分， 对于每一部分， DIN模型的处理会有不同 <ol><li>对于离散型特征， 在我们的数据集中就是那些类别型的特征， 比如user_id这种， 这种类别型特征， 我们首先要经过embedding处理得到每个特征的低维稠密型表示， 既然要经过embedding， 那么我们就需要为每一列的类别特征的取值建立一个字典，并指明embedding维度， 所以在使用deepctr的DIN模型准备数据的时候， 我们需要通过SparseFeat函数指明这些类别型特征, 这个函数的传入参数就是列名， 列的唯一取值(建立字典用)和embedding维度。</li><li>对于用户历史行为特征列， 比如文章id， 文章的类别等这种， 同样的我们需要先经过embedding处理， 只不过和上面不一样的地方是，对于这种特征， 我们在得到每个特征的embedding表示之后， 还需要通过一个Attention_layer计算用户的历史行为和当前候选文章的相关性以此得到当前用户的embedding向量， 这个向量就可以基于当前的候选文章与用户过去点击过得历史文章的相似性的程度来反应用户的兴趣， 并且随着用户的不同的历史点击来变化，去动态的模拟用户兴趣的变化过程。这类特征对于每个用户都是一个历史行为序列， 对于每个用户， 历史行为序列长度会不一样， 可能有的用户点击的历史文章多，有的点击的历史文章少， 所以我们还需要把这个长度统一起来， 在为DIN模型准备数据的时候， 我们首先要通过SparseFeat函数指明这些类别型特征， 然后还需要通过VarLenSparseFeat函数再进行序列填充， 使得每个用户的历史序列一样长， 所以这个函数参数中会有个maxlen，来指明序列的最大长度是多少。</li><li>对于连续型特征列， 我们只需要用DenseFeat函数来指明列名和维度即可。</li></ol></li><li>处理完特征列之后， 我们把相应的数据与列进行对应，就得到了最后的数据。</li></ol><p>下面根据具体的代码感受一下， 逻辑是这样， 首先我们需要写一个数据准备函数， 在这里面就是根据上面的具体步骤准备数据， 得到数据和特征列， 然后就是建立DIN模型并训练， 最后基于模型进行测试。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 导入deepctr</span>
<span class="token keyword">from</span> deepctr<span class="token punctuation">.</span>models <span class="token keyword">import</span> DIN
<span class="token keyword">from</span> deepctr<span class="token punctuation">.</span>feature_column <span class="token keyword">import</span> SparseFeat<span class="token punctuation">,</span> VarLenSparseFeat<span class="token punctuation">,</span> DenseFeat<span class="token punctuation">,</span> get_feature_names
<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>preprocessing<span class="token punctuation">.</span>sequence <span class="token keyword">import</span> pad_sequences

<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras <span class="token keyword">import</span> backend <span class="token keyword">as</span> K
<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>callbacks <span class="token keyword">import</span> <span class="token operator">*</span> 
<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf

<span class="token keyword">import</span> os
os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">&quot;CUDA_DEVICE_ORDER&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;PCI_BUS_ID&quot;</span>
os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">&quot;CUDA_VISIBLE_DEVICES&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 数据准备函数</span>
<span class="token keyword">def</span> <span class="token function">get_din_feats_columns</span><span class="token punctuation">(</span>df<span class="token punctuation">,</span> dense_fea<span class="token punctuation">,</span> sparse_fea<span class="token punctuation">,</span> behavior_fea<span class="token punctuation">,</span> his_behavior_fea<span class="token punctuation">,</span> emb_dim<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> max_len<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    数据准备函数:
    df: 数据集
    dense_fea: 数值型特征列
    sparse_fea: 离散型特征列
    behavior_fea: 用户的候选行为特征列
    his_behavior_fea: 用户的历史行为特征列
    embedding_dim: embedding的维度， 这里为了简单， 统一把离散型特征列采用一样的隐向量维度
    max_len: 用户序列的最大长度
    &quot;&quot;&quot;</span>
    
    sparse_feature_columns <span class="token operator">=</span> <span class="token punctuation">[</span>SparseFeat<span class="token punctuation">(</span>feat<span class="token punctuation">,</span> vocabulary_size<span class="token operator">=</span>df<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> embedding_dim<span class="token operator">=</span>emb_dim<span class="token punctuation">)</span> <span class="token keyword">for</span> feat <span class="token keyword">in</span> sparse_fea<span class="token punctuation">]</span>
    
    dense_feature_columns <span class="token operator">=</span> <span class="token punctuation">[</span>DenseFeat<span class="token punctuation">(</span>feat<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token keyword">for</span> feat <span class="token keyword">in</span> dense_fea<span class="token punctuation">]</span>
    
    var_feature_columns <span class="token operator">=</span> <span class="token punctuation">[</span>VarLenSparseFeat<span class="token punctuation">(</span>SparseFeat<span class="token punctuation">(</span>feat<span class="token punctuation">,</span> vocabulary_size<span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
                                    embedding_dim<span class="token operator">=</span>emb_dim<span class="token punctuation">,</span> embedding_name<span class="token operator">=</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxlen<span class="token operator">=</span>max_len<span class="token punctuation">)</span> <span class="token keyword">for</span> feat <span class="token keyword">in</span> hist_behavior_fea<span class="token punctuation">]</span>
    
    dnn_feature_columns <span class="token operator">=</span> sparse_feature_columns <span class="token operator">+</span> dense_feature_columns <span class="token operator">+</span> var_feature_columns
    
    <span class="token comment"># 建立x, x是一个字典的形式</span>
    x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> name <span class="token keyword">in</span> get_feature_names<span class="token punctuation">(</span>dnn_feature_columns<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> name <span class="token keyword">in</span> his_behavior_fea<span class="token punctuation">:</span>
            <span class="token comment"># 这是历史行为序列</span>
            his_list <span class="token operator">=</span> <span class="token punctuation">[</span>l <span class="token keyword">for</span> l <span class="token keyword">in</span> df<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">]</span>
            x<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> pad_sequences<span class="token punctuation">(</span>his_list<span class="token punctuation">,</span> maxlen<span class="token operator">=</span>max_len<span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">)</span>      <span class="token comment"># 二维数组</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            x<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>values
    
    <span class="token keyword">return</span> x<span class="token punctuation">,</span> dnn_feature_columns
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 把特征分开</span>
sparse_fea <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;category_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_environment&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_deviceGroup&#39;</span><span class="token punctuation">,</span> 
              <span class="token string">&#39;click_os&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_country&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_region&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_referrer_type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;is_cat_hab&#39;</span><span class="token punctuation">]</span>

behavior_fea <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span>

hist_behavior_fea <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;hist_click_article_id&#39;</span><span class="token punctuation">]</span>

dense_fea <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;sim0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;time_diff0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;word_diff0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sim_max&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sim_min&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sim_sum&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sim_mean&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;score&#39;</span><span class="token punctuation">,</span>
             <span class="token string">&#39;rank&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;click_size&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;time_diff_mean&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;active_level&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;user_time_hob1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;user_time_hob2&#39;</span><span class="token punctuation">,</span>
             <span class="token string">&#39;words_hbo&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;words_count&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># dense特征进行归一化, 神经网络训练都需要将数值进行归一化处理</span>
mm <span class="token operator">=</span> MinMaxScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 下面是做一些特殊处理，当在其他的地方出现无效值的时候，不处理无法进行归一化，刚开始可以先把他注释掉，在运行了下面的代码</span>
<span class="token comment"># 之后如果发现报错，应该先去想办法处理如何不出现inf之类的值</span>
<span class="token comment"># trn_user_item_feats_df_din_model.replace([np.inf, -np.inf], 0, inplace=True)</span>
<span class="token comment"># tst_user_item_feats_df_din_model.replace([np.inf, -np.inf], 0, inplace=True)</span>

<span class="token keyword">for</span> feat <span class="token keyword">in</span> dense_fea<span class="token punctuation">:</span>
    trn_user_item_feats_df_din_model<span class="token punctuation">[</span>feat<span class="token punctuation">]</span> <span class="token operator">=</span> mm<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>trn_user_item_feats_df_din_model<span class="token punctuation">[</span><span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    
    <span class="token keyword">if</span> val_user_item_feats_df_din_model <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        val_user_item_feats_df_din_model<span class="token punctuation">[</span>feat<span class="token punctuation">]</span> <span class="token operator">=</span> mm<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>val_user_item_feats_df_din_model<span class="token punctuation">[</span><span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    
    tst_user_item_feats_df_din_model<span class="token punctuation">[</span>feat<span class="token punctuation">]</span> <span class="token operator">=</span> mm<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>tst_user_item_feats_df_din_model<span class="token punctuation">[</span><span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 准备训练数据</span>
x_trn<span class="token punctuation">,</span> dnn_feature_columns <span class="token operator">=</span> get_din_feats_columns<span class="token punctuation">(</span>trn_user_item_feats_df_din_model<span class="token punctuation">,</span> dense_fea<span class="token punctuation">,</span> 
                                               sparse_fea<span class="token punctuation">,</span> behavior_fea<span class="token punctuation">,</span> hist_behavior_fea<span class="token punctuation">,</span> max_len<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
y_trn <span class="token operator">=</span> trn_user_item_feats_df_din_model<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values

<span class="token keyword">if</span> offline<span class="token punctuation">:</span>
    <span class="token comment"># 准备验证数据</span>
    x_val<span class="token punctuation">,</span> dnn_feature_columns <span class="token operator">=</span> get_din_feats_columns<span class="token punctuation">(</span>val_user_item_feats_df_din_model<span class="token punctuation">,</span> dense_fea<span class="token punctuation">,</span> 
                                                   sparse_fea<span class="token punctuation">,</span> behavior_fea<span class="token punctuation">,</span> hist_behavior_fea<span class="token punctuation">,</span> max_len<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
    y_val <span class="token operator">=</span> val_user_item_feats_df_din_model<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values
    
dense_fea <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> dense_fea <span class="token keyword">if</span> x <span class="token operator">!=</span> <span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span>
x_tst<span class="token punctuation">,</span> dnn_feature_columns <span class="token operator">=</span> get_din_feats_columns<span class="token punctuation">(</span>tst_user_item_feats_df_din_model<span class="token punctuation">,</span> dense_fea<span class="token punctuation">,</span> 
                                               sparse_fea<span class="token punctuation">,</span> behavior_fea<span class="token punctuation">,</span> hist_behavior_fea<span class="token punctuation">,</span> max_len<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>WARNING:tensorflow:From /home/ryluo/anaconda3/lib/python3.6/site-packages/tensorflow/python/keras/initializers.py:143: calling RandomNormal.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.
Instructions for updating:
Call initializer instance with the dtype argument instead of passing it to the constructor
</code></pre><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 建立模型</span>
model <span class="token operator">=</span> DIN<span class="token punctuation">(</span>dnn_feature_columns<span class="token punctuation">,</span> behavior_fea<span class="token punctuation">)</span>

<span class="token comment"># 查看模型结构</span>
model<span class="token punctuation">.</span>summary<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 模型编译</span>
model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&#39;adam&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;binary_crossentropy&#39;</span><span class="token punctuation">,</span>metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;binary_crossentropy&#39;</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>AUC<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>WARNING:tensorflow:From /home/ryluo/anaconda3/lib/python3.6/site-packages/tensorflow/python/ops/init_ops.py:1288: calling VarianceScaling.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.
Instructions for updating:
Call initializer instance with the dtype argument instead of passing it to the constructor
WARNING:tensorflow:From /home/ryluo/anaconda3/lib/python3.6/site-packages/tensorflow/python/autograph/impl/api.py:255: add_dispatch_support.&lt;locals&gt;.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use tf.where in 2.0, which has the same broadcast rule as np.where
Model: &quot;model&quot;
__________________________________________________________________________________________________
Layer (type)                    Output Shape         Param #     Connected to                     
==================================================================================================
user_id (InputLayer)            [(None, 1)]          0                                            
__________________________________________________________________________________________________
click_article_id (InputLayer)   [(None, 1)]          0                                            
__________________________________________________________________________________________________
category_id (InputLayer)        [(None, 1)]          0                                            
__________________________________________________________________________________________________
click_environment (InputLayer)  [(None, 1)]          0                                            
__________________________________________________________________________________________________
click_deviceGroup (InputLayer)  [(None, 1)]          0                                            
__________________________________________________________________________________________________
click_os (InputLayer)           [(None, 1)]          0                                            
__________________________________________________________________________________________________
click_country (InputLayer)      [(None, 1)]          0                                            
__________________________________________________________________________________________________
click_region (InputLayer)       [(None, 1)]          0                                            
__________________________________________________________________________________________________
click_referrer_type (InputLayer [(None, 1)]          0                                            
__________________________________________________________________________________________________
is_cat_hab (InputLayer)         [(None, 1)]          0                                            
__________________________________________________________________________________________________
sparse_emb_user_id (Embedding)  (None, 1, 32)        1600032     user_id[0][0]                    
__________________________________________________________________________________________________
sparse_seq_emb_hist_click_artic multiple             525664      click_article_id[0][0]           
                                                                 hist_click_article_id[0][0]      
                                                                 click_article_id[0][0]           
__________________________________________________________________________________________________
sparse_emb_category_id (Embeddi (None, 1, 32)        7776        category_id[0][0]                
__________________________________________________________________________________________________
sparse_emb_click_environment (E (None, 1, 32)        128         click_environment[0][0]          
__________________________________________________________________________________________________
sparse_emb_click_deviceGroup (E (None, 1, 32)        160         click_deviceGroup[0][0]          
__________________________________________________________________________________________________
sparse_emb_click_os (Embedding) (None, 1, 32)        288         click_os[0][0]                   
__________________________________________________________________________________________________
sparse_emb_click_country (Embed (None, 1, 32)        384         click_country[0][0]              
__________________________________________________________________________________________________
sparse_emb_click_region (Embedd (None, 1, 32)        928         click_region[0][0]               
__________________________________________________________________________________________________
sparse_emb_click_referrer_type  (None, 1, 32)        256         click_referrer_type[0][0]        
__________________________________________________________________________________________________
sparse_emb_is_cat_hab (Embeddin (None, 1, 32)        64          is_cat_hab[0][0]                 
__________________________________________________________________________________________________
no_mask (NoMask)                (None, 1, 32)        0           sparse_emb_user_id[0][0]         
                                                                 sparse_seq_emb_hist_click_article
                                                                 sparse_emb_category_id[0][0]     
                                                                 sparse_emb_click_environment[0][0
                                                                 sparse_emb_click_deviceGroup[0][0
                                                                 sparse_emb_click_os[0][0]        
                                                                 sparse_emb_click_country[0][0]   
                                                                 sparse_emb_click_region[0][0]    
                                                                 sparse_emb_click_referrer_type[0]
                                                                 sparse_emb_is_cat_hab[0][0]      
__________________________________________________________________________________________________
hist_click_article_id (InputLay [(None, 50)]         0                                            
__________________________________________________________________________________________________
concatenate (Concatenate)       (None, 1, 320)       0           no_mask[0][0]                    
                                                                 no_mask[1][0]                    
                                                                 no_mask[2][0]                    
                                                                 no_mask[3][0]                    
                                                                 no_mask[4][0]                    
                                                                 no_mask[5][0]                    
                                                                 no_mask[6][0]                    
                                                                 no_mask[7][0]                    
                                                                 no_mask[8][0]                    
                                                                 no_mask[9][0]                    
__________________________________________________________________________________________________
no_mask_1 (NoMask)              (None, 1, 320)       0           concatenate[0][0]                
__________________________________________________________________________________________________
attention_sequence_pooling_laye (None, 1, 32)        13961       sparse_seq_emb_hist_click_article
                                                                 sparse_seq_emb_hist_click_article
__________________________________________________________________________________________________
concatenate_1 (Concatenate)     (None, 1, 352)       0           no_mask_1[0][0]                  
                                                                 attention_sequence_pooling_layer[
__________________________________________________________________________________________________
sim0 (InputLayer)               [(None, 1)]          0                                            
__________________________________________________________________________________________________
time_diff0 (InputLayer)         [(None, 1)]          0                                            
__________________________________________________________________________________________________
word_diff0 (InputLayer)         [(None, 1)]          0                                            
__________________________________________________________________________________________________
sim_max (InputLayer)            [(None, 1)]          0                                            
__________________________________________________________________________________________________
sim_min (InputLayer)            [(None, 1)]          0                                            
__________________________________________________________________________________________________
sim_sum (InputLayer)            [(None, 1)]          0                                            
__________________________________________________________________________________________________
sim_mean (InputLayer)           [(None, 1)]          0                                            
__________________________________________________________________________________________________
score (InputLayer)              [(None, 1)]          0                                            
__________________________________________________________________________________________________
rank (InputLayer)               [(None, 1)]          0                                            
__________________________________________________________________________________________________
click_size (InputLayer)         [(None, 1)]          0                                            
__________________________________________________________________________________________________
time_diff_mean (InputLayer)     [(None, 1)]          0                                            
__________________________________________________________________________________________________
active_level (InputLayer)       [(None, 1)]          0                                            
__________________________________________________________________________________________________
user_time_hob1 (InputLayer)     [(None, 1)]          0                                            
__________________________________________________________________________________________________
user_time_hob2 (InputLayer)     [(None, 1)]          0                                            
__________________________________________________________________________________________________
words_hbo (InputLayer)          [(None, 1)]          0                                            
__________________________________________________________________________________________________
words_count (InputLayer)        [(None, 1)]          0                                            
__________________________________________________________________________________________________
flatten (Flatten)               (None, 352)          0           concatenate_1[0][0]              
__________________________________________________________________________________________________
no_mask_3 (NoMask)              (None, 1)            0           sim0[0][0]                       
                                                                 time_diff0[0][0]                 
                                                                 word_diff0[0][0]                 
                                                                 sim_max[0][0]                    
                                                                 sim_min[0][0]                    
                                                                 sim_sum[0][0]                    
                                                                 sim_mean[0][0]                   
                                                                 score[0][0]                      
                                                                 rank[0][0]                       
                                                                 click_size[0][0]                 
                                                                 time_diff_mean[0][0]             
                                                                 active_level[0][0]               
                                                                 user_time_hob1[0][0]             
                                                                 user_time_hob2[0][0]             
                                                                 words_hbo[0][0]                  
                                                                 words_count[0][0]                
__________________________________________________________________________________________________
no_mask_2 (NoMask)              (None, 352)          0           flatten[0][0]                    
__________________________________________________________________________________________________
concatenate_2 (Concatenate)     (None, 16)           0           no_mask_3[0][0]                  
                                                                 no_mask_3[1][0]                  
                                                                 no_mask_3[2][0]                  
                                                                 no_mask_3[3][0]                  
                                                                 no_mask_3[4][0]                  
                                                                 no_mask_3[5][0]                  
                                                                 no_mask_3[6][0]                  
                                                                 no_mask_3[7][0]                  
                                                                 no_mask_3[8][0]                  
                                                                 no_mask_3[9][0]                  
                                                                 no_mask_3[10][0]                 
                                                                 no_mask_3[11][0]                 
                                                                 no_mask_3[12][0]                 
                                                                 no_mask_3[13][0]                 
                                                                 no_mask_3[14][0]                 
                                                                 no_mask_3[15][0]                 
__________________________________________________________________________________________________
flatten_1 (Flatten)             (None, 352)          0           no_mask_2[0][0]                  
__________________________________________________________________________________________________
flatten_2 (Flatten)             (None, 16)           0           concatenate_2[0][0]              
__________________________________________________________________________________________________
no_mask_4 (NoMask)              multiple             0           flatten_1[0][0]                  
                                                                 flatten_2[0][0]                  
__________________________________________________________________________________________________
concatenate_3 (Concatenate)     (None, 368)          0           no_mask_4[0][0]                  
                                                                 no_mask_4[1][0]                  
__________________________________________________________________________________________________
dnn_1 (DNN)                     (None, 80)           89880       concatenate_3[0][0]              
__________________________________________________________________________________________________
dense (Dense)                   (None, 1)            80          dnn_1[0][0]                      
__________________________________________________________________________________________________
prediction_layer (PredictionLay (None, 1)            1           dense[0][0]                      
==================================================================================================
Total params: 2,239,602
Trainable params: 2,239,362
Non-trainable params: 240
__________________________________________________________________________________________________
</code></pre><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 模型训练</span>
<span class="token keyword">if</span> offline<span class="token punctuation">:</span>
    history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_trn<span class="token punctuation">,</span> y_trn<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> validation_data<span class="token operator">=</span><span class="token punctuation">(</span>x_val<span class="token punctuation">,</span> y_val<span class="token punctuation">)</span> <span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment"># 也可以使用上面的语句用自己采样出来的验证集</span>
    <span class="token comment"># history = model.fit(x_trn, y_trn, verbose=1, epochs=3, validation_split=0.3, batch_size=256)</span>
    history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_trn<span class="token punctuation">,</span> y_trn<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>Epoch 1/2
290964/290964 [==============================] - 55s 189us/sample - loss: 0.4209 - binary_crossentropy: 0.4206 - auc: 0.7842
Epoch 2/2
290964/290964 [==============================] - 52s 178us/sample - loss: 0.3630 - binary_crossentropy: 0.3618 - auc: 0.8478
</code></pre><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 模型预测</span>
tst_user_item_feats_df_din_model<span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_tst<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">)</span>
tst_user_item_feats_df_din_model<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;din_rank_score.csv&#39;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>500000/500000 [==============================] - 20s 39us/sample
</code></pre><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 预测结果重新排序, 及生成提交结果</span>
rank_results <span class="token operator">=</span> tst_user_item_feats_df_din_model<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
submit<span class="token punctuation">(</span>rank_results<span class="token punctuation">,</span> topk<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> model_name<span class="token operator">=</span><span class="token string">&#39;din&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 五折交叉验证，这里的五折交叉是以用户为目标进行五折划分</span>
<span class="token comment">#  这一部分与前面的单独训练和验证是分开的</span>
<span class="token keyword">def</span> <span class="token function">get_kfold_users</span><span class="token punctuation">(</span>trn_df<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    user_ids <span class="token operator">=</span> trn_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span>
    user_set <span class="token operator">=</span> <span class="token punctuation">[</span>user_ids<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> user_set

k_fold <span class="token operator">=</span> <span class="token number">5</span>
trn_df <span class="token operator">=</span> trn_user_item_feats_df_din_model
user_set <span class="token operator">=</span> get_kfold_users<span class="token punctuation">(</span>trn_df<span class="token punctuation">,</span> n<span class="token operator">=</span>k_fold<span class="token punctuation">)</span>

score_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
score_df <span class="token operator">=</span> trn_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
sub_preds <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>tst_user_item_feats_df_rank_model<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

dense_fea <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> dense_fea <span class="token keyword">if</span> x <span class="token operator">!=</span> <span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span>
x_tst<span class="token punctuation">,</span> dnn_feature_columns <span class="token operator">=</span> get_din_feats_columns<span class="token punctuation">(</span>tst_user_item_feats_df_din_model<span class="token punctuation">,</span> dense_fea<span class="token punctuation">,</span> 
                                                   sparse_fea<span class="token punctuation">,</span> behavior_fea<span class="token punctuation">,</span> hist_behavior_fea<span class="token punctuation">,</span> max_len<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>

<span class="token comment"># 五折交叉验证，并将中间结果保存用于staking</span>
<span class="token keyword">for</span> n_fold<span class="token punctuation">,</span> valid_user <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>user_set<span class="token punctuation">)</span><span class="token punctuation">:</span>
    train_idx <span class="token operator">=</span> trn_df<span class="token punctuation">[</span><span class="token operator">~</span>trn_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>valid_user<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># add slide user</span>
    valid_idx <span class="token operator">=</span> trn_df<span class="token punctuation">[</span>trn_df<span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>valid_user<span class="token punctuation">)</span><span class="token punctuation">]</span>
    
    <span class="token comment"># 准备训练数据</span>
    x_trn<span class="token punctuation">,</span> dnn_feature_columns <span class="token operator">=</span> get_din_feats_columns<span class="token punctuation">(</span>train_idx<span class="token punctuation">,</span> dense_fea<span class="token punctuation">,</span> 
                                                       sparse_fea<span class="token punctuation">,</span> behavior_fea<span class="token punctuation">,</span> hist_behavior_fea<span class="token punctuation">,</span> max_len<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
    y_trn <span class="token operator">=</span> train_idx<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values

    <span class="token comment"># 准备验证数据</span>
    x_val<span class="token punctuation">,</span> dnn_feature_columns <span class="token operator">=</span> get_din_feats_columns<span class="token punctuation">(</span>valid_idx<span class="token punctuation">,</span> dense_fea<span class="token punctuation">,</span> 
                                                   sparse_fea<span class="token punctuation">,</span> behavior_fea<span class="token punctuation">,</span> hist_behavior_fea<span class="token punctuation">,</span> max_len<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
    y_val <span class="token operator">=</span> valid_idx<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values
    
    history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_trn<span class="token punctuation">,</span> y_trn<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> validation_data<span class="token operator">=</span><span class="token punctuation">(</span>x_val<span class="token punctuation">,</span> y_val<span class="token punctuation">)</span> <span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 预测验证集结果</span>
    valid_idx<span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_val<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">)</span>   
    
    valid_idx<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    valid_idx<span class="token punctuation">[</span><span class="token string">&#39;pred_rank&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> valid_idx<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 将验证集的预测结果放到一个列表中，后面进行拼接</span>
    score_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>valid_idx<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_rank&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 如果是线上测试，需要计算每次交叉验证的结果相加，最后求平均</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> offline<span class="token punctuation">:</span>
        sub_preds <span class="token operator">+=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_tst<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>   
    
score_df_ <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>score_list<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
score_df <span class="token operator">=</span> score_df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>score_df_<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 保存训练集交叉验证产生的新特征</span>
score_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_rank&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;trn_din_cls_feats.csv&#39;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    
<span class="token comment"># 测试集的预测结果，多次交叉验证求平均,将预测的score和对应的rank特征保存，可以用于后面的staking，这里还可以构造其他更多的特征</span>
tst_user_item_feats_df_din_model<span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> sub_preds <span class="token operator">/</span> k_fold
tst_user_item_feats_df_din_model<span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> tst_user_item_feats_df_din_model<span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> norm_sim<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
tst_user_item_feats_df_din_model<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
tst_user_item_feats_df_din_model<span class="token punctuation">[</span><span class="token string">&#39;pred_rank&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> tst_user_item_feats_df_din_model<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 保存测试集交叉验证的新特征</span>
tst_user_item_feats_df_din_model<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_rank&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;tst_din_cls_feats.csv&#39;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="模型融合" tabindex="-1"><a class="header-anchor" href="#模型融合"><span>模型融合</span></a></h1><h2 id="加权融合" tabindex="-1"><a class="header-anchor" href="#加权融合"><span>加权融合</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 读取多个模型的排序结果文件</span>
lgb_ranker <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;lgb_ranker_score.csv&#39;</span><span class="token punctuation">)</span>
lgb_cls <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;lgb_cls_score.csv&#39;</span><span class="token punctuation">)</span>
din_ranker <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;din_rank_score.csv&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 这里也可以换成交叉验证输出的测试结果进行加权融合</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>rank_model <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;lgb_ranker&#39;</span><span class="token punctuation">:</span> lgb_ranker<span class="token punctuation">,</span> 
              <span class="token string">&#39;lgb_cls&#39;</span><span class="token punctuation">:</span> lgb_cls<span class="token punctuation">,</span> 
              <span class="token string">&#39;din_ranker&#39;</span><span class="token punctuation">:</span> din_ranker<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_ensumble_predict_topk</span><span class="token punctuation">(</span>rank_model<span class="token punctuation">,</span> topk<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    final_recall <span class="token operator">=</span> rank_model<span class="token punctuation">[</span><span class="token string">&#39;lgb_cls&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>rank_model<span class="token punctuation">[</span><span class="token string">&#39;din_ranker&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    rank_model<span class="token punctuation">[</span><span class="token string">&#39;lgb_ranker&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> rank_model<span class="token punctuation">[</span><span class="token string">&#39;lgb_ranker&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> norm_sim<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    final_recall <span class="token operator">=</span> final_recall<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rank_model<span class="token punctuation">[</span><span class="token string">&#39;lgb_ranker&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    final_recall <span class="token operator">=</span> final_recall<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    submit<span class="token punctuation">(</span>final_recall<span class="token punctuation">,</span> topk<span class="token operator">=</span>topk<span class="token punctuation">,</span> model_name<span class="token operator">=</span><span class="token string">&#39;ensemble_fuse&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>get_ensumble_predict_topk<span class="token punctuation">(</span>rank_model<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="staking" tabindex="-1"><a class="header-anchor" href="#staking"><span>Staking</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 读取多个模型的交叉验证生成的结果文件</span>
<span class="token comment"># 训练集</span>
trn_lgb_ranker_feats <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;trn_lgb_ranker_feats.csv&#39;</span><span class="token punctuation">)</span>
trn_lgb_cls_feats <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;trn_lgb_cls_feats.csv&#39;</span><span class="token punctuation">)</span>
trn_din_cls_feats <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;trn_din_cls_feats.csv&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 测试集</span>
tst_lgb_ranker_feats <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;tst_lgb_ranker_feats.csv&#39;</span><span class="token punctuation">)</span>
tst_lgb_cls_feats <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;tst_lgb_cls_feats.csv&#39;</span><span class="token punctuation">)</span>
tst_din_cls_feats <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">&#39;tst_din_cls_feats.csv&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 将多个模型输出的特征进行拼接</span>

finall_trn_ranker_feats <span class="token operator">=</span> trn_lgb_ranker_feats<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
finall_tst_ranker_feats <span class="token operator">=</span> tst_lgb_ranker_feats<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> idx<span class="token punctuation">,</span> trn_model <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>trn_lgb_ranker_feats<span class="token punctuation">,</span> trn_lgb_cls_feats<span class="token punctuation">,</span> trn_din_cls_feats<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> feat <span class="token keyword">in</span> <span class="token punctuation">[</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_rank&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        col_name <span class="token operator">=</span> feat <span class="token operator">+</span> <span class="token string">&#39;_&#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span>
        finall_trn_ranker_feats<span class="token punctuation">[</span>col_name<span class="token punctuation">]</span> <span class="token operator">=</span> trn_model<span class="token punctuation">[</span>feat<span class="token punctuation">]</span>

<span class="token keyword">for</span> idx<span class="token punctuation">,</span> tst_model <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>tst_lgb_ranker_feats<span class="token punctuation">,</span> tst_lgb_cls_feats<span class="token punctuation">,</span> tst_din_cls_feats<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> feat <span class="token keyword">in</span> <span class="token punctuation">[</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_rank&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        col_name <span class="token operator">=</span> feat <span class="token operator">+</span> <span class="token string">&#39;_&#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span>
        finall_tst_ranker_feats<span class="token punctuation">[</span>col_name<span class="token punctuation">]</span> <span class="token operator">=</span> tst_model<span class="token punctuation">[</span>feat<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 定义一个逻辑回归模型再次拟合交叉验证产生的特征对测试集进行预测</span>
<span class="token comment"># 这里需要注意的是，在做交叉验证的时候可以构造多一些与输出预测值相关的特征，来丰富这里简单模型的特征</span>
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression

feat_cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;pred_score_0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_rank_0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score_1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_rank_1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score_2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_rank_2&#39;</span><span class="token punctuation">]</span>

trn_x <span class="token operator">=</span> finall_trn_ranker_feats<span class="token punctuation">[</span>feat_cols<span class="token punctuation">]</span>
trn_y <span class="token operator">=</span> finall_trn_ranker_feats<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span>

tst_x <span class="token operator">=</span> finall_tst_ranker_feats<span class="token punctuation">[</span>feat_cols<span class="token punctuation">]</span>

<span class="token comment"># 定义模型</span>
lr <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 模型训练</span>
lr<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>trn_x<span class="token punctuation">,</span> trn_y<span class="token punctuation">)</span>

<span class="token comment"># 模型预测</span>
finall_tst_ranker_feats<span class="token punctuation">[</span><span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> lr<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>tst_x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 预测结果重新排序, 及生成提交结果</span>
rank_results <span class="token operator">=</span> finall_tst_ranker_feats<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click_article_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pred_score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
submit<span class="token punctuation">(</span>rank_results<span class="token punctuation">,</span> topk<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> model_name<span class="token operator">=</span><span class="token string">&#39;ensumble_staking&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h1><p>本章主要学习了三个排序模型，包括LGB的Rank， LGB的Classifier还有深度学习的DIN模型， 当然，对于这三个模型的原理部分，我们并没有给出详细的介绍， 请大家课下自己探索原理，也欢迎大家把自己的探索与所学分享出来，我们一块学习和进步。最后，我们进行了简单的模型融合策略，包括简单的加权和Stacking。</p><p>关于Datawhale： Datawhale是一个专注于数据科学与AI领域的开源组织，汇集了众多领域院校和知名企业的优秀学习者，聚合了一群有开源精神和探索精神的团队成员。Datawhale 以“for the learner，和学习者一起成长”为愿景，鼓励真实地展现自我、开放包容、互信互助、敢于试错和勇于担当。同时 Datawhale 用开源的理念去探索开源内容、开源学习和开源方案，赋能人才培养，助力人才成长，建立起人与人，人与知识，人与企业和人与未来的联结。 本次数据挖掘路径学习，专题知识将在天池分享，详情可关注Datawhale：</p><figure><img src="http://ryluo.oss-cn-chengdu.aliyuncs.com/abc/image-20201119112159065.png" alt="image-20201119112159065" tabindex="0" loading="lazy"><figcaption>image-20201119112159065</figcaption></figure>`,73),_=[e];function o(c,l){return s(),a("div",null,_)}const r=n(p,[["render",o],["__file","ch4.1.5_rank.html.vue"]]),k=JSON.parse('{"path":"/rcmd/ch04/ch4.1/ch4.1.5_rank.html","title":"排序模型","lang":"zh-CN","frontmatter":{"date":"2024-07-06T00:00:00.000Z","title":"排序模型","author":"Genhiy","order":2,"category":["推荐系统"],"tag":["无标签"],"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"读取排序特征","slug":"读取排序特征","link":"#读取排序特征","children":[]},{"level":2,"title":"返回排序后的结果","slug":"返回排序后的结果","link":"#返回排序后的结果","children":[]},{"level":2,"title":"LGB排序模型","slug":"lgb排序模型","link":"#lgb排序模型","children":[]},{"level":2,"title":"LGB分类模型","slug":"lgb分类模型","link":"#lgb分类模型","children":[]},{"level":2,"title":"DIN模型","slug":"din模型","link":"#din模型","children":[{"level":3,"title":"用户的历史点击行为列表","slug":"用户的历史点击行为列表","link":"#用户的历史点击行为列表","children":[]},{"level":3,"title":"DIN模型简介","slug":"din模型简介","link":"#din模型简介","children":[]}]},{"level":2,"title":"加权融合","slug":"加权融合","link":"#加权融合","children":[]},{"level":2,"title":"Staking","slug":"staking","link":"#staking","children":[]}],"git":{},"readingTime":{"minutes":19.97,"words":5992},"filePathRelative":"rcmd/ch04/ch4.1/ch4.1.5_rank.md","localizedDate":"2024年7月6日"}');export{r as comp,k as data};
